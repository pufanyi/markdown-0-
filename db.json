{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/favicon_small.ico","path":"favicon_small.ico","modified":0,"renderable":0},{"_id":"source/robot.txt","path":"robot.txt","modified":0,"renderable":0},{"_id":"source/friends/AutumnKite.webp","path":"friends/AutumnKite.webp","modified":0,"renderable":0},{"_id":"source/friends/CSJ.webp","path":"friends/CSJ.webp","modified":0,"renderable":0},{"_id":"source/friends/Froggy.webp","path":"friends/Froggy.webp","modified":0,"renderable":0},{"_id":"source/friends/bkmn.webp","path":"friends/bkmn.webp","modified":0,"renderable":0},{"_id":"source/friends/change.sh","path":"friends/change.sh","modified":0,"renderable":0},{"_id":"source/friends/cube.webp","path":"friends/cube.webp","modified":0,"renderable":0},{"_id":"source/friends/dfc.webp","path":"friends/dfc.webp","modified":0,"renderable":0},{"_id":"source/friends/dky.webp","path":"friends/dky.webp","modified":0,"renderable":0},{"_id":"source/friends/dt.webp","path":"friends/dt.webp","modified":0,"renderable":0},{"_id":"source/friends/emoairx.webp","path":"friends/emoairx.webp","modified":0,"renderable":0},{"_id":"source/friends/gaojunonly1.webp","path":"friends/gaojunonly1.webp","modified":0,"renderable":0},{"_id":"source/friends/heartlessly.webp","path":"friends/heartlessly.webp","modified":0,"renderable":0},{"_id":"source/friends/hyj.webp","path":"friends/hyj.webp","modified":0,"renderable":0},{"_id":"source/friends/jiang.webp","path":"friends/jiang.webp","modified":0,"renderable":0},{"_id":"source/friends/jzq.webp","path":"friends/jzq.webp","modified":0,"renderable":0},{"_id":"source/friends/luojinyao.webp","path":"friends/luojinyao.webp","modified":0,"renderable":0},{"_id":"source/friends/lxy.webp","path":"friends/lxy.webp","modified":0,"renderable":0},{"_id":"source/friends/md.webp","path":"friends/md.webp","modified":0,"renderable":0},{"_id":"source/friends/mq.webp","path":"friends/mq.webp","modified":0,"renderable":0},{"_id":"source/friends/mxdh.webp","path":"friends/mxdh.webp","modified":0,"renderable":0},{"_id":"source/friends/nbc.webp","path":"friends/nbc.webp","modified":0,"renderable":0},{"_id":"source/friends/nn.webp","path":"friends/nn.webp","modified":0,"renderable":0},{"_id":"source/friends/sxd666.webp","path":"friends/sxd666.webp","modified":0,"renderable":0},{"_id":"source/friends/sxyugao.webp","path":"friends/sxyugao.webp","modified":0,"renderable":0},{"_id":"source/friends/szb.webp","path":"friends/szb.webp","modified":0,"renderable":0},{"_id":"source/friends/uyom.webp","path":"friends/uyom.webp","modified":0,"renderable":0},{"_id":"source/friends/wzp.webp","path":"friends/wzp.webp","modified":0,"renderable":0},{"_id":"source/friends/xzy.webp","path":"friends/xzy.webp","modified":0,"renderable":0},{"_id":"source/friends/yangjie.webp","path":"friends/yangjie.webp","modified":0,"renderable":0},{"_id":"source/friends/zhoudong.webp","path":"friends/zhoudong.webp","modified":0,"renderable":0},{"_id":"source/friends/zhouyuyang.webp","path":"friends/zhouyuyang.webp","modified":0,"renderable":0},{"_id":"source/friends/zhzh.webp","path":"friends/zhzh.webp","modified":0,"renderable":0},{"_id":"themes/volantis/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/volantis/source/googled264010a11e453ae.html","path":"googled264010a11e453ae.html","modified":0,"renderable":1},{"_id":"themes/volantis/source/404/velocity.min.js","path":"404/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/volantis/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/volantis/source/fonts/Monaco.ttf","path":"fonts/Monaco.ttf","modified":0,"renderable":1},{"_id":"themes/volantis/source/images/1.svg","path":"images/1.svg","modified":0,"renderable":1},{"_id":"themes/volantis/source/images/2.svg","path":"images/2.svg","modified":0,"renderable":1},{"_id":"themes/volantis/source/images/3.svg","path":"images/3.svg","modified":0,"renderable":1},{"_id":"themes/volantis/source/images/4.svg","path":"images/4.svg","modified":0,"renderable":1},{"_id":"themes/volantis/source/images/5.jpg","path":"images/5.jpg","modified":0,"renderable":1},{"_id":"themes/volantis/source/images/6.png","path":"images/6.png","modified":0,"renderable":1},{"_id":"themes/volantis/source/images/index.html","path":"images/index.html","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/algolia_logo.svg","path":"img/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/apple-touch-icon-next.png","path":"img/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/avatar.gif","path":"img/avatar.gif","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/avatar.webp","path":"img/avatar.webp","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/avatar_very_small.jpg","path":"img/avatar_very_small.jpg","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/avatar_very_small.webp","path":"img/avatar_very_small.webp","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/azure.svg","path":"img/azure.svg","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/background.webp","path":"img/background.webp","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/baidu.svg","path":"img/baidu.svg","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/cc-by.svg","path":"img/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/favicon-16x16-next.png","path":"img/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/favicon-32x32-next.png","path":"img/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/favicon_small.ico","path":"img/favicon_small.ico","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/placeholder.gif","path":"img/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/quote-l.svg","path":"img/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/quote-r.svg","path":"img/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/searchicon.png","path":"img/searchicon.png","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/sitebar-avatar.jpg","path":"img/sitebar-avatar.jpg","modified":0,"renderable":1},{"_id":"themes/volantis/source/img/sitebar-avatar.webp","path":"img/sitebar-avatar.webp","modified":0,"renderable":1},{"_id":"themes/volantis/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/volantis/source/404/jquery.min.js","path":"404/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/volantis/source/js/valine.js","path":"js/valine.js","modified":0,"renderable":1},{"_id":"themes/volantis/source/fonts/Skranji-Regular.ttf","path":"fonts/Skranji-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/volantis/source/fonts/Ubuntu-Regular.ttf","path":"fonts/Ubuntu-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/volantis/source/fonts/euler.otf","path":"fonts/euler.otf","modified":0,"renderable":1}],"Cache":[{"_id":"source/README.md","hash":"7fdf1baa23d8fc67a8dc5a7c2bd5f8be4738b075","modified":1565480156073},{"_id":"source/favicon.ico","hash":"fb22a663e91d006c863c5de196850d7049c5003a","modified":1552177889623},{"_id":"source/favicon_small.ico","hash":"9bd3d815764f74e91fbf44d9cefc72b6b4926875","modified":1552177889627},{"_id":"source/robot.txt","hash":"a72f54a9cbcb35ef3841be37c4ec737ce9f17a8f","modified":1585444867420},{"_id":"themes/volantis/.gitignore","hash":"4b5e4eb66070da8433cd43d75af0de341e04a2ed","modified":1585202829213},{"_id":"themes/volantis/LICENSE","hash":"e0cbf6906cab5926a34f17852db6c05187ee1f68","modified":1585202829213},{"_id":"themes/volantis/README.md","hash":"91f213a172dd9e57e4ef03c9151ad94ec1bb2690","modified":1585202829214},{"_id":"themes/volantis/_config.yml","hash":"90ee4cfb997b6a3d3633311ed2d1af048045cbc4","modified":1629981985796},{"_id":"source/_posts/1001 [BeiJing2006]狼抓兔子.md","hash":"a2bfc8816ebc26756109ac701d0507f3f1e633ba","modified":1630154891872},{"_id":"source/_posts/1010 [HNOI2008]玩具装箱toy.md","hash":"e396024b035e79223729e162e17973b904800127","modified":1630154891872},{"_id":"source/_posts/AGC024 A-E题解.md","hash":"033c7adae9c7e047fcd8665ab2b099e310d25bbf","modified":1630154891872},{"_id":"source/_posts/BZOJ1040 [ZJOI2008]骑士.md","hash":"52bbd7fff549e65d719c57e8d628a34d774f022f","modified":1630154891872},{"_id":"source/_posts/BZOJ1041 [HAOI2008]圆上的整点.md","hash":"f34372822d9274aa92525b16fd49ce8dbe74788c","modified":1630154891872},{"_id":"source/_posts/BZOJ1042 [HAOI2008]硬币购物.md","hash":"e27aad0bfe5bfd33ce9c3f5a9672c01a3e3b6a59","modified":1630154891872},{"_id":"source/_posts/BZOJ1043 [HAOI2008]下落的圆盘.md","hash":"fd45e7344602bdee697f727137a26c081477eb25","modified":1630154891875},{"_id":"source/_posts/BZOJ1044 [HAOI2008]木棍分割.md","hash":"c64fb527e983e6897888bb7424c1647fca8f67e7","modified":1630154891875},{"_id":"source/_posts/线性规划与网络流24题.md","hash":"df5110cd815b00bfe2990162692912ddd7869ce9","modified":1630154891905},{"_id":"source/about/index.md","hash":"6409795da39dfc653684ac62c0a1cdf17dba1773","modified":1587212588596},{"_id":"source/archives/index.md","hash":"714a94918d2c29b0917d4d5d947ef9e74bfb4c1e","modified":1581477239393},{"_id":"source/categories/index.md","hash":"a3ea278f89be74b0e4b343b50d3f35830f8f0663","modified":1581311506586},{"_id":"source/friends/AutumnKite.webp","hash":"c921f07ce12a749e1b8cb66c8df025e5ffe6ffa4","modified":1628334424157},{"_id":"source/friends/CSJ.webp","hash":"04d3ebb9d17503e72acf957e748db5be7a066445","modified":1628334423987},{"_id":"source/friends/Froggy.webp","hash":"2f836004e675a10b674983edf1c22f15bb5905ee","modified":1628334444077},{"_id":"source/friends/bkmn.webp","hash":"3c75f61369dd524830536eab489c794a7f34058f","modified":1628334424200},{"_id":"source/friends/change.sh","hash":"b8ee998f2163efbe14b510244bcada9ab2328b58","modified":1628334437630},{"_id":"source/friends/cube.webp","hash":"8b92e4143e43176fcbf7012d81dc060a95d88c9f","modified":1628334424073},{"_id":"source/friends/dfc.webp","hash":"58b016edd79d2ce2e68b84db0e8f9b6d4082c303","modified":1628334187779},{"_id":"source/friends/dky.webp","hash":"5dc63de5924c6c3a145bf90ae070cd5e906f8be2","modified":1628334424240},{"_id":"source/friends/dt.webp","hash":"af5faae83c25e3ac9400343e62f9fb0876e1ba8f","modified":1628334424117},{"_id":"source/friends/emoairx.webp","hash":"5943833e5064608c97d4077c3ac017e344e36d85","modified":1628334444034},{"_id":"source/friends/gaojunonly1.webp","hash":"a0e38088ff43417bf4f0a3949bde8477fbecaf0d","modified":1628334217883},{"_id":"source/friends/heartlessly.webp","hash":"6eab9978e4bfb3a10c19531360b5f7e9e704349d","modified":1628334423903},{"_id":"source/friends/hyj.webp","hash":"793601117541c4b2dbef23c1b5d37d7259ae7b5e","modified":1628334424330},{"_id":"source/friends/index.md","hash":"eb790e25f4a4d5276fd6679f3191e6b73e5e587e","modified":1629980034206},{"_id":"source/friends/jiang.webp","hash":"0e6fdb1367fe40fe2a67f92039399fe2a2e17e6f","modified":1628334156771},{"_id":"source/friends/jzq.webp","hash":"fae8f6b343442de6aeb79430bf29934420465904","modified":1628334424513},{"_id":"source/friends/luojinyao.webp","hash":"9ae9d8cde9f67499450509aadc049c5b17aa5139","modified":1628334424647},{"_id":"source/friends/lxy.webp","hash":"8034022a028e1097aab6c962541a02da728bba2a","modified":1628334443984},{"_id":"source/friends/md.webp","hash":"a0b6dc82d60e0314306cb00acc8dde5a0988bcd6","modified":1628334122557},{"_id":"source/friends/mq.webp","hash":"dacca0fed153fc8042181586f9293466e6c16f27","modified":1628334424557},{"_id":"source/friends/mxdh.webp","hash":"a373fdde67e5dbf3e8c27f790fc05c55ef3559ac","modified":1628334423947},{"_id":"source/friends/nbc.webp","hash":"9f7ed88d977a0122c6d62e4102c06d922a4a36b4","modified":1628334424287},{"_id":"source/friends/nn.webp","hash":"621ac6c3a104c84a838bd26fdc4cd3f78e09695c","modified":1628334424460},{"_id":"source/friends/sxd666.webp","hash":"43dbd1281cb78a3efc312d3c58d794562b9a00bb","modified":1628334204819},{"_id":"source/friends/sxyugao.webp","hash":"22c2c45aa0ce6fe419f40c1dee5d29997e49db2f","modified":1628334251787},{"_id":"source/friends/szb.webp","hash":"8cde1dddd95a80c1417fc1a672925d8eddcd35d0","modified":1628334424600},{"_id":"source/friends/uyom.webp","hash":"3dd9029c4eed5663ed6297c1714cc19b57a6c2e0","modified":1628334443884},{"_id":"source/friends/wzp.webp","hash":"3b1de453d92116b656e0bdcaf764e8c8252aa0b3","modified":1628334235533},{"_id":"source/friends/xzy.webp","hash":"e6ff78c9ef42010abbafb7d854b03231c23f26ec","modified":1628334424373},{"_id":"source/friends/yangjie.webp","hash":"62d23710ccbbe385a5d3abbb96b038812f1581fb","modified":1628334262240},{"_id":"source/friends/zhoudong.webp","hash":"31f0efd58398eafc73121ef74524824d5ae9c026","modified":1628333820034},{"_id":"source/friends/zhouyuyang.webp","hash":"6279ed227b97c7bf6a66c0b0a9669dadb6b11be0","modified":1628334424417},{"_id":"source/friends/zhzh.webp","hash":"7eac3dc66b2eae92d2933b19fe007c226cf75de7","modified":1628334071333},{"_id":"source/schedule/index.md","hash":"f4b70f9e4038356da5ebe953b93b345c7f214766","modified":1580194255531},{"_id":"source/sitemap/index.md","hash":"120eff25924c21950f261474adda38d20385d92f","modified":1580194303786},{"_id":"source/tags/index.md","hash":"e76c013e2b6411d237dd9734b2ce760e639504d2","modified":1580259546430},{"_id":"themes/volantis/languages/en.yml","hash":"809cbd1198ff45440e2997a22be34ae94367f92d","modified":1585202829215},{"_id":"themes/volantis/languages/zh-CN.yml","hash":"2735c9942ba1ece0124cf65cbc2101a54eb3e0d6","modified":1585534758652},{"_id":"themes/volantis/languages/zh-TW.yml","hash":"99962c8d9b941b85395dc73d581aaf927b19275b","modified":1585202829216},{"_id":"themes/volantis/layout/404.ejs","hash":"805804c27fcdb07201d38162361c606a167b44e9","modified":1585202829217},{"_id":"themes/volantis/layout/_pre.ejs","hash":"bdbcf68e3f71df73bc59ffa5007d8fe800c5cdc1","modified":1585202829229},{"_id":"themes/volantis/layout/archive.ejs","hash":"eca3275301019d11d81de6e4f25f438735629905","modified":1585202829240},{"_id":"themes/volantis/layout/category.ejs","hash":"552c289263727e09320c6a839e74a8dcaef7378d","modified":1585202829240},{"_id":"themes/volantis/layout/index.ejs","hash":"6fee00696b3de0b7440cf1b4c2c099f19c2580f8","modified":1585202829241},{"_id":"themes/volantis/layout/layout.ejs","hash":"79530d0c30159a53139c6259a70daea375ca5153","modified":1585351264753},{"_id":"themes/volantis/layout/links.ejs","hash":"e557eae1450b1cd295eaae29b4863279ea4a813e","modified":1585202829242},{"_id":"themes/volantis/layout/list.ejs","hash":"5d1efdee83a9979996b34fc743ac957517be5bb4","modified":1585202829242},{"_id":"themes/volantis/layout/page.ejs","hash":"e1285b47ace87cbcf0ab459ab2d51567e3d43bba","modified":1585202829242},{"_id":"themes/volantis/layout/post.ejs","hash":"e1285b47ace87cbcf0ab459ab2d51567e3d43bba","modified":1585202829243},{"_id":"themes/volantis/layout/tag.ejs","hash":"7cdf58c7483138f4456264a5b02bd5f934ecb851","modified":1585202829243},{"_id":"themes/volantis/source/404.html","hash":"6afa9bdb4bf3e383e71c114fc0858be97b22e509","modified":1585444962511},{"_id":"themes/volantis/source/googled264010a11e453ae.html","hash":"bb68a557b7acf970fa2f5d9f6d9e474821c49916","modified":1580188713759},{"_id":"source/_posts/AGC024 A-E题解/举例1.png","hash":"5cd8adc3c85a1199e2b8d996712fe030686b563a","modified":1630154891872},{"_id":"source/_posts/BZOJ1043 [HAOI2008]下落的圆盘/W.png","hash":"af6f0ff7e795cc76ed93df843db9fcf2bd562659","modified":1630154891875},{"_id":"source/_posts/BZOJ3438 小M的作物/反例.png","hash":"eef37a4d65f4d45872c514171d6f14e4c0ace038","modified":1630154891879},{"_id":"source/_posts/HDU4372&&codeforces960G/HDU4372 Count the Buildings.cpp","hash":"9d36a1d063211cf0d120daffd7f1fdc7519c2249","modified":1630154891879},{"_id":"source/_posts/HDU4372&&codeforces960G/倍增FFT(CF960G).cpp","hash":"2404e9694dab3232a63ea213a48daebb93d762c3","modified":1630154891879},{"_id":"source/_posts/HDU4372&&codeforces960G/分治FFT(CF960G).cpp","hash":"b756a8e30642a7bf79b5ada1500b46bc629bd687","modified":1630154891879},{"_id":"source/_posts/HDU4372&&codeforces960G/无标题.png","hash":"b65c593979d9e866b04007084877717ca67be0e6","modified":1630154891879},{"_id":"source/_posts/HDU4685 Prince and Princess/TIM截图20180107211229.png","hash":"6341eeb99d81fbc5abea4028b22245c1b791e6f7","modified":1630154891879},{"_id":"source/_posts/HDU4685 Prince and Princess/TIM截图20180107211419.png","hash":"f107140a8fc36a1d911b6b38d8c7a3b5217f5c12","modified":1630154891882},{"_id":"source/_posts/HDU4685 Prince and Princess/TIM截图20180107224255.png","hash":"2a94bf3c1ea8affe91af5be6317a613d94217cd8","modified":1630154891882},{"_id":"source/_posts/UOJ349 [WC2018]即时战略/配图1.png","hash":"c086ef5b088850d997acbfdcf3f1d42571f32814","modified":1630154891882},{"_id":"source/_posts/hihoCoder1252 Kejin Game/hihoCoder1252 Kejin Game.cpp","hash":"4e52f5b8a5ed30dd8aceece7781d14654998b595","modified":1630154891882},{"_id":"source/_posts/hihoCoder1252 Kejin Game/hihoCoder1252 Kejin Game.md","hash":"6330fbb86b009900aeb14d5dd5e9825fe89a5d01","modified":1630154891882},{"_id":"source/_posts/一些想写下的东西/prob1.md","hash":"d31dc964e1a5e00e12e14134c36d30428e9e589f","modified":1630154891882},{"_id":"source/_posts/学习笔记/Generating-function-notes.md","hash":"a8dc0779593bd0696e361edc6ab96d3032353d7e","modified":1630154891882},{"_id":"source/_posts/学习笔记/Suffix-automaton-notes.md","hash":"99b25d50b23424489ff810cc1cbcf9bafc347fa6","modified":1630154891882},{"_id":"source/_posts/学习笔记/dsu on tree.md","hash":"1d409bb22376a5d152e9159cf69d53f3a9aade1f","modified":1630154891905},{"_id":"source/_posts/滚粗记/NOI2018同步赛体验记.md","hash":"eb42e2bf2333282abccde23175493413acbbc3c8","modified":1630154891905},{"_id":"source/_posts/滚粗记/NOIP2017滚粗记.md","hash":"57807621ab0347ab076d1adabbb41e57d9c4267d","modified":1630154891905},{"_id":"source/_posts/滚粗记/ZJOI2018 Day1.md","hash":"02d23c57c57acb9a0b47acaf3cb989a3fd28b394","modified":1630154891905},{"_id":"source/_posts/滚粗记/ZJOI2019赛后感.md","hash":"7fc35e642e435d1977c2a3d1639ed19497253497","modified":1630154891905},{"_id":"themes/volantis/.github/ISSUE_TEMPLATE/feature-request.md","hash":"9ef467807ebe2bc138db9b605281a8bf942ea771","modified":1585202829210},{"_id":"themes/volantis/.github/ISSUE_TEMPLATE/other-issue.md","hash":"8682fd100026b04c69ed49f4794409897e6a54bf","modified":1585202829211},{"_id":"themes/volantis/.github/ISSUE_TEMPLATE/question-report.md","hash":"2270fa3a61fe80b486575a231941ead5d1e4bfd4","modified":1585202829212},{"_id":"themes/volantis/.github/workflows/auto-close-issues.yml","hash":"b3314545d69c397273c8aa5b9c6984018259ea60","modified":1585202829212},{"_id":"themes/volantis/layout/_cover/index.ejs","hash":"a96d29c7e468fd81ecbeb3f758730ce412bee6f5","modified":1585625069335},{"_id":"themes/volantis/layout/_meta/author.ejs","hash":"6abae4a1e188d2f059b841d6f466c8b77918ab66","modified":1585202829218},{"_id":"themes/volantis/layout/_meta/btns.ejs","hash":"e4004bbb7a2bf46dfc95cd610822c0d58e7af6b7","modified":1585202829219},{"_id":"themes/volantis/layout/_meta/category.ejs","hash":"d94a7de74bb93f391fe7e591066d71ce236e4215","modified":1585202829219},{"_id":"themes/volantis/layout/_meta/counter.ejs","hash":"dd34316f50826687fd19baef341f8c2a92ea3dd3","modified":1585202829219},{"_id":"themes/volantis/layout/_meta/date.ejs","hash":"e18dd6f5ea703ebd7afe50d4e94fdce8e33e71b3","modified":1585202829220},{"_id":"themes/volantis/layout/_meta/music.ejs","hash":"32e95a5ad95bf799b58ca9f4d595c201d64e372e","modified":1585202829220},{"_id":"themes/volantis/layout/_meta/share.ejs","hash":"d1aca13ece4278daf470e801b23b7546959a5b4e","modified":1585202829221},{"_id":"themes/volantis/layout/_meta/tags.ejs","hash":"111c399d6b90e2cda99d9d846c60e0a65bcd7e2d","modified":1585202829221},{"_id":"themes/volantis/layout/_meta/thumbnail.ejs","hash":"8afd94949e88f7c0373974234c6f80ed858705c7","modified":1585202829222},{"_id":"themes/volantis/layout/_meta/title.ejs","hash":"0f21bda3c7ed44ab26c22818114ed875f5718018","modified":1585202829222},{"_id":"themes/volantis/layout/_meta/top.ejs","hash":"4e7f1b980942b15eb5b15e43d969c4a0d3ad921f","modified":1585202829222},{"_id":"themes/volantis/layout/_meta/updated.ejs","hash":"4e6ed816c7ff181c820d1976e4557bcfb1486bc2","modified":1585202829223},{"_id":"themes/volantis/layout/_meta/wordcount.ejs","hash":"754543490319855a6884ff297024b7949845aa2c","modified":1585534850708},{"_id":"themes/volantis/layout/_partial/archive.ejs","hash":"4f3ec993e4498d0a9cd6e3f9aa796cbf6e659571","modified":1585202829224},{"_id":"themes/volantis/layout/_partial/article.ejs","hash":"4318610e9a074dad6d5d9d6c7f4d8f93ce3a69bb","modified":1585213021497},{"_id":"themes/volantis/layout/_partial/categories.ejs","hash":"7c7b6cc39e1aa8d01cc2e94d1195bb7620bb68ea","modified":1585202829225},{"_id":"themes/volantis/layout/_partial/cover.ejs","hash":"5beb8271519bccc1297381effd5de7f6cbf3cd7d","modified":1585202829225},{"_id":"themes/volantis/layout/_partial/footer.ejs","hash":"ce43c6edb523dde3bcc793f5bccba56bfdbeb814","modified":1585202829226},{"_id":"themes/volantis/layout/_partial/head.ejs","hash":"f1656a5be0950810061dac4eb28eb1f457f92921","modified":1585207133154},{"_id":"themes/volantis/layout/_partial/header.ejs","hash":"46e571e765ebbbeb7ea31f27112c1ca33ecc5fe4","modified":1585624802202},{"_id":"themes/volantis/layout/_partial/meta.ejs","hash":"fd93839b9da09824374ac8e81bde1634038abda4","modified":1585202829227},{"_id":"themes/volantis/layout/_partial/post.ejs","hash":"134a038070f78741937539da8660bf554cc020af","modified":1585202829228},{"_id":"themes/volantis/layout/_partial/scripts.ejs","hash":"abe3725ece20cbd6fa7d80bd250bebb10ac6f31b","modified":1585783895576},{"_id":"themes/volantis/layout/_partial/side.ejs","hash":"8fcd8edfaa77a9f2b8ec93268c9448e515b46254","modified":1585202829229},{"_id":"themes/volantis/layout/_third-party/aplayer.ejs","hash":"e520ca71b9c5a8b9eb383d82ca741efcc753ee47","modified":1585202829230},{"_id":"themes/volantis/layout/_third-party/clipboard.ejs","hash":"80a0e30c2dc724a9ed39ee91d1ba8853dcff6051","modified":1585202829231},{"_id":"themes/volantis/layout/_third-party/comments.ejs","hash":"c42df925082fa527252e335b4e68b0ac5b8087c6","modified":1585202829232},{"_id":"themes/volantis/layout/_third-party/fancybox.ejs","hash":"4a80eea4b5766aac8ee72fff1ec976ca0ac037d9","modified":1585202829232},{"_id":"themes/volantis/layout/_third-party/mathjax.ejs","hash":"02977d9817e1897bde3f79d7006651930c4a6788","modified":1585202829233},{"_id":"themes/volantis/layout/_third-party/share.ejs","hash":"ad2265cf2001b5428e7ddbe038cdc31b0a54279b","modified":1585202829233},{"_id":"themes/volantis/layout/_widget/_pre.ejs","hash":"be59b18c8816d469e2d24fa644d7dc105ed2f850","modified":1585202829234},{"_id":"themes/volantis/layout/_widget/blogger.ejs","hash":"f0acbdc107cb67423d7117c7dcbac1f49c9deb19","modified":1585202829234},{"_id":"themes/volantis/layout/_widget/category.ejs","hash":"7295c87e3e095018d07af7941232b12970f0fcc5","modified":1585202829235},{"_id":"themes/volantis/layout/_widget/copyright.ejs","hash":"de6870c3cc658c054012c0c700d3e0342de99251","modified":1585202829235},{"_id":"themes/volantis/layout/_widget/grid.ejs","hash":"6ceb91ad7fecbfaf86342a99656767c76bca357d","modified":1585202829236},{"_id":"themes/volantis/layout/_widget/header.ejs","hash":"b54a04af22efd55585af6e76ddbb7e856c5e9601","modified":1585202829236},{"_id":"themes/volantis/layout/_widget/list.ejs","hash":"a2a9270d05e26dcccc846b289b5406e166afc58f","modified":1585202829237},{"_id":"themes/volantis/layout/_widget/load.ejs","hash":"bd5bd5bedcfd535fd1b774b26f944df4f6319ea7","modified":1585202829237},{"_id":"themes/volantis/layout/_widget/music.ejs","hash":"92f156ef87392f7842c72540367ae452d85b2d63","modified":1585202829237},{"_id":"themes/volantis/layout/_widget/page.ejs","hash":"49ee453f2694a978dc159a39667e74d6b5b139e5","modified":1585202829238},{"_id":"themes/volantis/layout/_widget/qrcode.ejs","hash":"0209fc678cf2e7d0bf35be6a4b572598c150515d","modified":1585202829238},{"_id":"themes/volantis/layout/_widget/related_posts.ejs","hash":"92754a4f747299709cda4e32a1eecb6ec54265ef","modified":1585212935098},{"_id":"themes/volantis/layout/_widget/tagcloud.ejs","hash":"e58c16a7671a3575cfec7093a24267d97f84646f","modified":1585202829239},{"_id":"themes/volantis/layout/_widget/text.ejs","hash":"a6e2d9e52008b548e1863355d319504abb59fabb","modified":1585202829239},{"_id":"themes/volantis/layout/_widget/toc.ejs","hash":"14e2078fcee0dabc10f37be53a065a8d1932dcfc","modified":1585202829240},{"_id":"themes/volantis/layout/gzw/index.ejs","hash":"6488bc3ccef340e6859cc10da41c12191618c383","modified":1629980674703},{"_id":"themes/volantis/scripts/tags/btns.js","hash":"16f9243708b131745059c1349dfebe3988e32570","modified":1585202829244},{"_id":"themes/volantis/scripts/tags/fancybox.js","hash":"1114a4814ee7fc9ce9aaa64fe12cd333d7b9596d","modified":1585202829244},{"_id":"themes/volantis/scripts/tags/folding.js","hash":"e40105f4650fb7aff5fe81676e5b3379c0c29a02","modified":1585202829245},{"_id":"themes/volantis/scripts/tags/gallery.js","hash":"1fff288f686859458226ba1fb3789b8575ea7ddb","modified":1585202829245},{"_id":"themes/volantis/scripts/tags/hide.js","hash":"87dd8af711545ac79ef386f1aa6dcc8e4516ebc1","modified":1585202829246},{"_id":"themes/volantis/scripts/tags/mermaid.js","hash":"0257868bd269a577f0d139a2ecfac2605750820f","modified":1585202829246},{"_id":"themes/volantis/scripts/tags/note.js","hash":"d3e50e577e805f890ba823f367d33b2f21954b4a","modified":1585202829246},{"_id":"themes/volantis/scripts/tags/tabs.js","hash":"ee78854c09a3c67bd5512c69b6ccd3c19c6e08fb","modified":1585202829247},{"_id":"themes/volantis/source/404/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1565480137351},{"_id":"themes/volantis/source/css/style.styl","hash":"1495c9f380ef3767b77251dfbb30d2cefe78ca4d","modified":1585711934240},{"_id":"themes/volantis/source/fonts/Monaco.ttf","hash":"d4de9305ce9e916ece179c3ab3b1faf80cc52bbb","modified":1585202829267},{"_id":"themes/volantis/source/images/1.svg","hash":"b888887298ed7f7b7f52fea12d1c1677e063cb44","modified":1580169733351},{"_id":"themes/volantis/source/images/2.svg","hash":"1d6e6d2c903f4fa83aa584f7a181042e60b09318","modified":1580169760043},{"_id":"source/_posts/随笔/pre_noi2020.md","hash":"a6be7b9b5d6f8ce3bc6190abb1a250f4b0db2e33","modified":1630154891905},{"_id":"source/_posts/滚粗记/ZJOI2020退役录.md","hash":"ec423935b79a2c3d2f99a2a97b330c50b737ff63","modified":1630154891905},{"_id":"themes/volantis/.github/ISSUE_TEMPLATE/bug-report.md","hash":"6255b54f0e23a95a13bc6d8f73046e18f167f86d","modified":1585202829210},{"_id":"themes/volantis/source/images/3.svg","hash":"43903ee18306db08f2bfd00957c93c5d8460b18d","modified":1580169774490},{"_id":"themes/volantis/source/images/4.svg","hash":"a56a53e28763b3d7a56c7e57bf14ac8584d0b39f","modified":1580169783645},{"_id":"themes/volantis/source/images/5.jpg","hash":"5037deee78a7a10d1aebf3c8c7b4342302f18041","modified":1582111726500},{"_id":"themes/volantis/source/images/6.png","hash":"924037489b1da69670933436c095768e86a91fc5","modified":1582859136664},{"_id":"themes/volantis/source/images/index.html","hash":"4ff4a49dd595b9a7c6ede57fe19555eab5b9df39","modified":1580172296419},{"_id":"themes/volantis/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1585202829274},{"_id":"themes/volantis/source/img/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1552177891913},{"_id":"themes/volantis/source/img/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1552177891915},{"_id":"themes/volantis/source/img/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1552177892017},{"_id":"themes/volantis/source/img/avatar.jpg","hash":"ec78b1b0ee739a5815a3e497baf0d1c27b6bfa70","modified":1528983317007},{"_id":"themes/volantis/source/img/avatar.webp","hash":"de207d2a7df45ed01a1fcb46719175e90e43c967","modified":1628335146816},{"_id":"themes/volantis/source/img/avatar_very_small.jpg","hash":"cdd1871cb6f1854edefdc791a71c9dda89bbf604","modified":1585212111113},{"_id":"themes/volantis/source/img/avatar_very_small.webp","hash":"9b80a657acd9f9c0e62d0b82619837a0277dd1a4","modified":1628412739373},{"_id":"themes/volantis/source/img/azure.svg","hash":"41c280a682166dafb8db7e89de26adf4b8d99f7a","modified":1585202829274},{"_id":"themes/volantis/source/img/background.webp","hash":"c98721b2ad9130214d676b34e518815729a881a2","modified":1628336535322},{"_id":"themes/volantis/source/img/baidu.svg","hash":"ff743cdc95d3cb42a0e4ad8d8c3582a939fce771","modified":1585202829275},{"_id":"themes/volantis/source/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1565480146922},{"_id":"themes/volantis/source/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1565480483695},{"_id":"themes/volantis/source/img/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1552177892021},{"_id":"themes/volantis/source/img/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1552177892041},{"_id":"themes/volantis/source/img/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1552177892043},{"_id":"themes/volantis/source/img/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1552177892043},{"_id":"themes/volantis/source/img/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1552177892044},{"_id":"themes/volantis/source/img/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1552177892069},{"_id":"themes/volantis/source/img/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1552177892070},{"_id":"themes/volantis/source/img/favicon.ico","hash":"fb22a663e91d006c863c5de196850d7049c5003a","modified":1552177889623},{"_id":"themes/volantis/source/img/favicon_small.ico","hash":"9bd3d815764f74e91fbf44d9cefc72b6b4926875","modified":1552177889627},{"_id":"themes/volantis/source/img/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1552177892070},{"_id":"themes/volantis/source/img/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1552177892070},{"_id":"themes/volantis/source/img/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1552177892097},{"_id":"themes/volantis/source/img/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1552177892097},{"_id":"themes/volantis/source/img/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1552177892099},{"_id":"themes/volantis/source/img/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1552177892101},{"_id":"themes/volantis/source/img/sitebar-avatar.jpg","hash":"87aa111901ded43cedf486fd71539129f9cda538","modified":1552177892121},{"_id":"themes/volantis/source/img/sitebar-avatar.webp","hash":"f4182ac02e7255eb4dedc8b273c2a5e0454d3351","modified":1628335176609},{"_id":"themes/volantis/source/js/search.js","hash":"f350aa35ddd23a9ccfed7b43043dbb1f5b53964f","modified":1585202829276},{"_id":"themes/volantis/source/404/jquery.min.js","hash":"c72c1735b4d903d90dd51225ebefb8c74ebbc51f","modified":1565480125142},{"_id":"themes/volantis/source/css/_base/index.styl","hash":"24e3314e3ac6e6e3f12dadff91676d6dd7324bee","modified":1585715470390},{"_id":"themes/volantis/source/css/_defines/color.styl","hash":"978978bc45e6ad2b936a3cc998cecce80e15a2f3","modified":1585202829250},{"_id":"themes/volantis/source/css/_defines/effect.styl","hash":"08129644c09950f527a9c13380442b01802d3a98","modified":1585202829250},{"_id":"themes/volantis/source/css/_defines/fonts.styl","hash":"22dcfb47973a48f2cff51a30ba63a0bcb8d4e357","modified":1585375430666},{"_id":"themes/volantis/source/css/_defines/func.styl","hash":"443d128c9ecf7d78236072c15ad85485e5a8aa92","modified":1585202829252},{"_id":"themes/volantis/source/css/_defines/layout.styl","hash":"936a9c51e85139b28d9887be7d8a56c9bb2faf9d","modified":1585202829253},{"_id":"themes/volantis/source/css/_highlight/diff.styl","hash":"bb83b379954dc2e7f5a9915e5ed50da7223e3efa","modified":1585202829253},{"_id":"themes/volantis/source/css/_highlight/index.styl","hash":"6ceac38689739cd796f740d5102b475dac4b1784","modified":1585282101855},{"_id":"themes/volantis/source/css/_highlight/theme.styl","hash":"32b94940c8288020bb4245941ca587c8aad7c14c","modified":1585202829255},{"_id":"themes/volantis/source/css/_layout/archive.styl","hash":"67056065d1281bdd176aae97fef87f197d2e407d","modified":1585202829255},{"_id":"themes/volantis/source/css/_layout/article.styl","hash":"89b5be80cb6aea5b1b73c99dc9e2131e86453209","modified":1585284414101},{"_id":"themes/volantis/source/css/_layout/cover.styl","hash":"07b3313bb9fd70cafef5b88f3918d694d130aa8d","modified":1585445673075},{"_id":"themes/volantis/source/css/_layout/footer.styl","hash":"e53b7e98cf364551ef3510259cb1c6ba12d5513f","modified":1585202829257},{"_id":"themes/volantis/source/css/_layout/friends.styl","hash":"8f5cc4d8ca1caec43fc9d257a1901322ab66e8a5","modified":1585202829257},{"_id":"themes/volantis/source/css/_layout/main.styl","hash":"2bdae087d7ef90424ee67122f0781c1ada250e10","modified":1585202829258},{"_id":"themes/volantis/source/css/_layout/navbar.styl","hash":"1dd5ac576b22fdff168b9fb7da80dfc755ca4c2f","modified":1585202829258},{"_id":"themes/volantis/source/css/_layout/pagination.styl","hash":"5df45501c8daadf3b21b48ec49fed11d2894b86d","modified":1585202829259},{"_id":"themes/volantis/source/css/_layout/search.styl","hash":"212ba9ef00040b2ac1f53d2fc555e1e84123700f","modified":1585202829259},{"_id":"themes/volantis/source/css/_layout/sidebar.styl","hash":"c7504a0938dcd06c588ecafa9d17979ea5d565df","modified":1585202829260},{"_id":"themes/volantis/source/css/_layout/toc.styl","hash":"de9f3bb2a77a86737b71f37ef3532ebc8ab440f0","modified":1585283429120},{"_id":"themes/volantis/source/css/_tag-plugins/btns.styl","hash":"311f9c6914667204aaf84947f01f47e941addd17","modified":1585283428664},{"_id":"themes/volantis/source/css/_tag-plugins/folding.styl","hash":"c51ca92c4571cc289e6ea46c7ed6f3140ea8db59","modified":1585202829262},{"_id":"themes/volantis/source/css/_tag-plugins/note.styl","hash":"90975264a58a4033a74fb89d417fdd29f6d9cbf8","modified":1585202829262},{"_id":"themes/volantis/source/css/_tag-plugins/p.styl","hash":"04b87a0da949536d2c295a60d04e729b045a9831","modified":1585202829263},{"_id":"themes/volantis/source/css/_tag-plugins/tabs.styl","hash":"e5e9558b5c4ed2ffd81a306678f9ca80418f6de0","modified":1585202829263},{"_id":"themes/volantis/source/css/_third-party/alert.styl","hash":"399672bd4b3e6931c5fc59576ba4cc30edd76113","modified":1585202829264},{"_id":"themes/volantis/source/css/_third-party/clipboard.styl","hash":"852e65c0a0f70afee169f06ee95b015986f183c2","modified":1585202829264},{"_id":"themes/volantis/source/css/_third-party/fancybox.styl","hash":"f778d5f6c5343bfdaab3587032e623d6650fee37","modified":1585202829265},{"_id":"themes/volantis/source/css/_third-party/valine.styl","hash":"8a321ffe9d7a539f81f60c1e78c7076c5426f74b","modified":1585202829265},{"_id":"themes/volantis/source/js/valine.js","hash":"107bceecab03a864536ebfdbe79acbabbe952c7d","modified":1585202829277},{"_id":"source/_posts/学习笔记/Suffix-automaton-notes/WF.png","hash":"78598bcf6ec1a8045ea395af3c22d2e9a67a2e4d","modified":1630154891885},{"_id":"source/_posts/学习笔记/Suffix-automaton-notes/构造1.jpg","hash":"c330385d8ba6d1d2d96e4cad74925778f30b1dda","modified":1630154891885},{"_id":"themes/volantis/source/fonts/Skranji-Regular.ttf","hash":"485dc033e34a5a92a45ffe5839514f0471b18208","modified":1585202829269},{"_id":"themes/volantis/source/fonts/Ubuntu-Regular.ttf","hash":"b100b2ed912a91e4d0a7c5f5309fe8ad7b3a2dd8","modified":1585202829273},{"_id":"themes/volantis/source/fonts/euler.otf","hash":"b5441ea703d4b5b35d7a193fcb21b3e94b4f3cd6","modified":1461357832000},{"_id":"source/_posts/学习笔记/Suffix-automaton-notes/构造2.jpg","hash":"221fd23939e6bcfa8ca6e46aa340b3e70858eda7","modified":1630154891889},{"_id":"source/_posts/学习笔记/Suffix-automaton-notes/构造3.jpg","hash":"a573a163cd66cf216f6791c56127239a0e91f643","modified":1630154891895},{"_id":"source/_posts/学习笔记/Suffix-automaton-notes/构造4.jpg","hash":"06c186bb5a45d05dedd5f9f57ccbd0137f3c4ccd","modified":1630154891899},{"_id":"source/_posts/学习笔记/Suffix-automaton-notes/构造5.jpg","hash":"cd1d610cba6ef740685d5b0a53790aa0298d94ae","modified":1630154891905},{"_id":"source/_posts/BZOJ1045 [HAOI2008]糖果传递.md","hash":"bd473a114cdfede9879cd8d29db7557a289f577f","modified":1630154891875},{"_id":"source/_posts/BZOJ1046 [HAOI2007]上升序列.md","hash":"dde1ef633307775da93e1e0403b8430d07776048","modified":1630154891875},{"_id":"source/_posts/BZOJ1048 [HAOI2007]分割矩阵.md","hash":"260384e106a740b1101390a2ed7266854c152366","modified":1630154891875},{"_id":"source/_posts/BZOJ1050 [HAOI2006]旅行comf.md","hash":"de409a3a391f8e23551e2c7c8ed4afb17b031f78","modified":1630154891875},{"_id":"source/_posts/BZOJ1061 [Noi2008]志愿者招募.md","hash":"f53232266086cfed0c7fddf7823f434b786bf9f7","modified":1630154891875},{"_id":"source/_posts/BZOJ1095[ZJOI2007]Hide 捉迷藏.md","hash":"9e5939c15d8809a8a259b1828ebcedf4c9e810ac","modified":1630154891875},{"_id":"source/_posts/BZOJ1337 最小圆覆盖.md","hash":"096684b36c3f5c6189a3c3d1f63133f158e70cfb","modified":1630154891875},{"_id":"source/_posts/BZOj1049 [HAOI2006]数字序列.md","hash":"bf0e01e7d254394f3354a11e328e84db222d0ded","modified":1630154891879}],"Category":[],"Data":[],"Page":[{"_content":"[pufanyi.github.io](//pufanyi.github.io)","source":"README.md","raw":"[pufanyi.github.io](//pufanyi.github.io)","date":"2021-08-28T12:58:35.985Z","updated":"2021-08-28T12:58:35.985Z","path":"README.html","title":"","comments":1,"layout":"page","_id":"cksvso2yo0000vfnu0tpm16ys","content":"<p><a href=\"//pufanyi.github.io\" target=\"_blank\" rel=\"noopener\">pufanyi.github.io</a></p>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"//pufanyi.github.io\" target=\"_blank\" rel=\"noopener\">pufanyi.github.io</a></p>"},{"title":"关于我","type":"about","_content":"\n一只 ZJ 小蒟蒻 qaq。\n\n老年退役选手。\n\nqq: 1980270322\n","source":"about/index.md","raw":"---\ntitle: 关于我\ntype: \"about\"\n---\n\n一只 ZJ 小蒟蒻 qaq。\n\n老年退役选手。\n\nqq: 1980270322\n","date":"2021-08-28T12:58:36.939Z","updated":"2021-08-28T12:58:36.939Z","path":"about/index.html","comments":1,"layout":"page","_id":"cksvso31w0002vfnuh6ea2xko","content":"<p> 一只 ZJ 小蒟蒻 qaq。</p><p> 老年退役选手。</p><p>qq: 1980270322</p>","site":{"data":{}},"excerpt":"","more":"<p>一只 ZJ 小蒟蒻 qaq。</p><p>老年退役选手。</p><p>qq: 1980270322</p>"},{"layout":"archieves","index":true,"title":"归档","_content":"","source":"archives/index.md","raw":"---\nlayout: archieves\nindex: true\ntitle: 归档\n---","date":"2021-08-28T12:58:36.925Z","updated":"2021-08-28T12:58:36.925Z","path":"archives/index.html","comments":1,"_id":"cksvso3210004vfnuhteq6fnq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"所有分类","layout":"category","index":true,"_content":"","source":"categories/index.md","raw":"---\ntitle: 所有分类\nlayout: category\nindex: true\n---","date":"2021-08-28T12:58:36.925Z","updated":"2021-08-28T12:58:36.925Z","path":"categories/index.html","comments":1,"_id":"cksvso3270007vfnu7e35dcj9","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"links","title":"朋友们","links":[{"group":"同学们","icon":"fas fa-user-tie","items":[{"name":"daifucong","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/dfc.webp","url":"https://www.luogu.com.cn/blog/daifucong/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"sxd666","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/sxd666.webp","url":"https://sxd666.github.io/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"gaojunonly1","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/gaojunonly1.webp","url":"http://www.cnblogs.com/gaojunonly1","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"ysgh","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/wzp.webp","url":"https://www.luogu.com.cn/blog/zyyorz/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"sxyugao","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/sxyugao.webp","url":"https://sxyugao.top/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"yangjie","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/yangjie.webp","url":"https://blog.csdn.net/qq_41893580/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"zhoudong","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/zhoudong.webp","url":"https://www.cnblogs.com/zdzdzd/","backgroundColor":"#3E74C9","textColor":"#fff"}]},{"group":"同校的神仙们","icon":"fas fa-user-tie","items":[{"name":"AutumnKite","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/AutumnKite.webp","url":"https://autumnkite.github.io/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"Froggy","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/Froggy.webp","url":"https://www.luogu.com.cn/blog/froggy/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"uyom","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/uyom.webp","url":"https://zykykyk.github.io/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"xumingyang","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/dky.webp","url":"https://cnt27.github.io/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"zhouyuyang","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/zhouyuyang.webp","url":"https://blog.csdn.net/zhouyuyang233/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"q234rty","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/nbc.webp","url":"https://q234rty.top/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"swwind","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/jiang.webp","url":"https://blog.swwind.me/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"zhzh2001","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/zhzh.webp","url":"https://zhzh2001.gitee.io/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"萌呆","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/md.webp","url":"https://blog.csdn.net/mdnd1234/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"Chentiancai_nn","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/nn.webp","url":"https://blog.csdn.net/mdnd1234/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"Black_Moon","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/bkmn.webp","url":"https://littleredstar.github.io/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"巨型方块","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/cube.webp","url":"https://blog.csdn.net/largecub233/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"xujiahao","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/mq.webp","url":"https://xuxuxuxuxuxjh.github.io/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"面向大海","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/mxdh.webp","url":"https://mxdh.github.io/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"heartlessly","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/heartlessly.webp","url":"https://heartlessly.github.io/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"CSJ","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/CSJ.webp","url":"https://csj111.github.io/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"Cesare","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/xzy.webp","url":"https://cesarelg.github.io/","backgroundColor":"#3E74C9","textColor":"#fff"},{"name":"heyuanjie","avatar":"https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/hyj.webp","url":"https://heyuanjie.github.io/","backgroundColor":"#3E74C9","textColor":"#fff"}]}],"_content":"","source":"friends/index.md","raw":"---\nlayout: links     # 必须\ntitle: 朋友们   # 可选，这是友链页的标题\nlinks:\n  - group: 同学们\n    icon: fas fa-user-tie\n    items:\n    - name: daifucong\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/dfc.webp\n      url: https://www.luogu.com.cn/blog/daifucong/\n      backgroundColor: '#3E74C9' # 卡片背景颜色\n      textColor: '#fff'  # 卡片文字颜色\n    - name: sxd666\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/sxd666.webp\n      url: https://sxd666.github.io/\n      backgroundColor: '#3E74C9' # 卡片背景颜色\n      textColor: '#fff'  # 卡片文字颜色\n    - name: gaojunonly1\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/gaojunonly1.webp\n      url: http://www.cnblogs.com/gaojunonly1\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n    - name: ysgh\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/wzp.webp\n      url: https://www.luogu.com.cn/blog/zyyorz/\n      backgroundColor: '#3E74C9' # 卡片背景颜色\n      textColor: '#fff'  # 卡片文字颜色\n    - name: sxyugao\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/sxyugao.webp\n      url: https://sxyugao.top/\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n    - name: yangjie\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/yangjie.webp\n      url: https://blog.csdn.net/qq_41893580/\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n    # - name: luojinyao\n    #   avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/luojinyao.webp\n    #   url: https://blog.luojinyao.top/\n    #   backgroundColor: '#3E74C9'\n    #   textColor: '#fff'\n    # - name: emoairx\n    #   avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/emoairx.webp\n    #   url: http://emoairx.top/\n    #   backgroundColor: '#3E74C9'\n    #   textColor: '#fff'\n    - name: zhoudong\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/zhoudong.webp\n      url: https://www.cnblogs.com/zdzdzd/\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n  - group: 同校的神仙们\n    icon: fas fa-user-tie\n    items:\n    - name: AutumnKite\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/AutumnKite.webp\n      url: https://autumnkite.github.io/\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n    - name: Froggy\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/Froggy.webp\n      url: https://www.luogu.com.cn/blog/froggy/\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n    - name: uyom\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/uyom.webp\n      url: https://zykykyk.github.io/\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n    - name: xumingyang\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/dky.webp\n      url: https://cnt27.github.io/\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n    - name: zhouyuyang\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/zhouyuyang.webp\n      url: https://blog.csdn.net/zhouyuyang233/\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n    # - name: SHENZHEBEI\n    #   avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/szb.webp\n    #   url: https://shenzhebei.github.io/\n    #   backgroundColor: '#3E74C9'\n    #   textColor: '#fff'\n    - name: q234rty\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/nbc.webp\n      url: https://q234rty.top/\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n    # - name: jzqjzq\n    #   avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/jzq.webp\n    #   url: https://jzqjzq.coding.me/\n    #   backgroundColor: '#3E74C9'\n    #   textColor: '#fff'\n    - name: swwind\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/jiang.webp\n      url: https://blog.swwind.me/\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n    - name: zhzh2001\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/zhzh.webp\n      url: https://zhzh2001.gitee.io/\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n    - name: 萌呆\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/md.webp\n      url: https://blog.csdn.net/mdnd1234/\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n    - name: Chentiancai_nn\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/nn.webp\n      url: https://blog.csdn.net/mdnd1234/\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n    # - name: cogito\n    #   avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/dt.webp\n    #   url: https://cogito.coding.me/\n    #   backgroundColor: '#3E74C9'\n    #   textColor: '#fff'\n    - name: Black_Moon\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/bkmn.webp\n      url: https://littleredstar.github.io/\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n    - name: 巨型方块\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/cube.webp\n      url: https://blog.csdn.net/largecub233/\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n    - name: xujiahao\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/mq.webp\n      url: https://xuxuxuxuxuxjh.github.io/\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n    - name: 面向大海\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/mxdh.webp\n      url: https://mxdh.github.io/\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n    # - name: lxy\n    #   avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/lxy.webp\n    #   url: https://lxy-tql.github.io/\n    #   backgroundColor: '#3E74C9'\n    #   textColor: '#fff'\n    - name: heartlessly\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/heartlessly.webp\n      url: https://heartlessly.github.io/\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n    - name: CSJ\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/CSJ.webp\n      url: https://csj111.github.io/\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n    - name: Cesare\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/xzy.webp\n      url: https://cesarelg.github.io/\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n    - name: heyuanjie\n      avatar: https://cdn.jsdelivr.net/gh/pufanyi/CDN/img/friends_avatar/hyj.webp\n      url: https://heyuanjie.github.io/\n      backgroundColor: '#3E74C9'\n      textColor: '#fff'\n---","date":"2021-08-28T12:58:36.932Z","updated":"2021-08-28T12:58:36.932Z","path":"friends/index.html","comments":1,"_id":"cksvso32b0009vfnudfsldtb0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"schedule","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\n---\n","date":"2021-08-28T12:58:36.925Z","updated":"2021-08-28T12:58:36.925Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"cksvso32f000cvfnu34vt03hl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"sitemap","_content":"","source":"sitemap/index.md","raw":"---\ntitle: sitemap\n---\n","date":"2021-08-28T12:58:36.939Z","updated":"2021-08-28T12:58:36.939Z","path":"sitemap/index.html","comments":1,"layout":"page","_id":"cksvso32j000evfnu5f3g08ip","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"所有标签","layout":"tag","index":true,"_content":"","source":"tags/index.md","raw":"---\ntitle: 所有标签\nlayout: tag\nindex: true\n---","date":"2021-08-28T12:58:36.925Z","updated":"2021-08-28T12:58:36.925Z","path":"tags/index.html","comments":1,"_id":"cksvso32o000gvfnudei8fat2","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"BZOJ1001 [BeiJing2006] 狼抓兔子","_content":"\n把每一个三角形看作一个顶点，最大流转最短路，可以较快，当然也可以跑最大流。\n\n<!--more-->\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\nusing namespace std;\nconst int maxv = 1005*1005*2;\nint first[maxv],nume;\nint N,M,x;\nstruct Edge{\n\tint to,nxt,dist;\n}edge[maxv*3];\nint q[maxv],front,rear,dist[maxv];\nbool vis[maxv];\nint spfa(int s,int t){\n\tint u,v;\n\tmemset(dist,0x3f,sizeof(dist));\n\tmemset(vis,false,sizeof(vis));\n\tfront = rear = 0;\n\tq[rear++] = s;\n\tdist[s] = 0;vis[s] = true;\n\twhile (front!=rear){\n\t\tu = q[front++];\n\t\tif (front == maxv-1) front = 0;\n\t\tfor (int e = first[u];~e;e=edge[e].nxt) {\n\t\t\tv = edge[e].to;\n\t\t\tif (dist[v]>dist[u]+edge[e].dist){\n\t\t\t\tdist[v] = dist[u]+edge[e].dist;\n\t\t\t\tif (!vis[v]){\n\t\t\t\t\tvis[v] = true;\n\t\t\t\t\tq[rear++] = v;\n\t\t\t\t\tif (rear == maxv-1) rear = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvis[u] = false;\n\t}\n\treturn dist[t];\n}\nvoid add_edge(int a,int b,int c){\n\tedge[nume] . to = b;\n\tedge[nume] . nxt = first[a];\n\tedge[nume] . dist = c;\n\tfirst[a] = nume++;\n\tedge[nume] . to = a;\n\tedge[nume] . nxt = first[b];\n\tedge[nume] . dist = c;\n\tfirst[b] = nume++;\n}\nint main(){\n\tscanf(\"%d%d\",&N,&M);\n\tif (N==1||M==1){\n\t\tint ans = 0x3fffffff;\n\t\tfor (int i=1;i<=max(N,M);i++){\n\t\t\tscanf(\"%d\",&x);\n\t\t\tans = min(ans,x);\n\t\t}\n\t\tprintf(\"%d\\n\",ans);\n\t\treturn 0;\n\t}\n\tnume = 0;\n\tmemset(first,-1,sizeof(first));\n\tfor (int j=1;j<=M-1;j++){\n\t\tscanf(\"%d\",&x);\n\t\tadd_edge(0,j,x);\n\t}\n\tfor (int i=1;i<=N-2;i++){\n\t\tfor (int j=1;j<=M-1;j++){\n\t\t\tscanf(\"%d\",&x);\n\t\t\tadd_edge(2*(i-1)*(M-1)+M-1+j,2*i*(M-1)+j,x);\n\t\t}\n\t}\n\tfor (int j=1;j<=M-1;j++){\n\t\tscanf(\"%d\",&x);\n\t\tadd_edge(2*(N-2)*(M-1)+M-1+j,2*(N-1)*(M-1)+1,x);\n\t}\n\tfor (int i=1;i<=N-1;i++){\n\t\tscanf(\"%d\",&x);\n\t\tadd_edge(2*(i-1)*(M-1)+M-1+1,2*(N-1)*(M-1)+1,x);\n\t\tfor (int j=2;j<=M-1;j++){\n\t\t\tscanf(\"%d\",&x);\n\t\t\tadd_edge(2*(i-1)*(M-1)+j-1,2*(i-1)*(M-1)+M-1+j,x);\n\t\t}\n\t\tscanf(\"%d\",&x);\n\t\tadd_edge(0,2*(i-1)*(M-1)+M-1,x);\n\t}\n\tfor (int i=1;i<=(N-1);i++){\n\t\tfor (int j=1;j<=M-1;j++){\n\t\t\tscanf(\"%d\",&x);\n\t\t\tadd_edge(2*(i-1)*(M-1)+j,2*(i-1)*(M-1)+(M-1)+j,x);\n\t\t}\n\t}\n\tprintf(\"%d\\n\",spfa(0,2*(N-1)*(M-1)+1));\n\treturn 0;\n}\n \n```\n\n","source":"_posts/1001 [BeiJing2006]狼抓兔子.md","raw":"---\ntitle: BZOJ1001 [BeiJing2006]狼抓兔子\ntags:\n - 最短路\n - 网络流\n - BZOJ\n---\n\n把每一个三角形看作一个顶点，最大流转最短路，可以较快，当然也可以跑最大流。\n\n<!--more-->\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\nusing namespace std;\nconst int maxv = 1005*1005*2;\nint first[maxv],nume;\nint N,M,x;\nstruct Edge{\n\tint to,nxt,dist;\n}edge[maxv*3];\nint q[maxv],front,rear,dist[maxv];\nbool vis[maxv];\nint spfa(int s,int t){\n\tint u,v;\n\tmemset(dist,0x3f,sizeof(dist));\n\tmemset(vis,false,sizeof(vis));\n\tfront = rear = 0;\n\tq[rear++] = s;\n\tdist[s] = 0;vis[s] = true;\n\twhile (front!=rear){\n\t\tu = q[front++];\n\t\tif (front == maxv-1) front = 0;\n\t\tfor (int e = first[u];~e;e=edge[e].nxt) {\n\t\t\tv = edge[e].to;\n\t\t\tif (dist[v]>dist[u]+edge[e].dist){\n\t\t\t\tdist[v] = dist[u]+edge[e].dist;\n\t\t\t\tif (!vis[v]){\n\t\t\t\t\tvis[v] = true;\n\t\t\t\t\tq[rear++] = v;\n\t\t\t\t\tif (rear == maxv-1) rear = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvis[u] = false;\n\t}\n\treturn dist[t];\n}\nvoid add_edge(int a,int b,int c){\n\tedge[nume] . to = b;\n\tedge[nume] . nxt = first[a];\n\tedge[nume] . dist = c;\n\tfirst[a] = nume++;\n\tedge[nume] . to = a;\n\tedge[nume] . nxt = first[b];\n\tedge[nume] . dist = c;\n\tfirst[b] = nume++;\n}\nint main(){\n\tscanf(\"%d%d\",&N,&M);\n\tif (N==1||M==1){\n\t\tint ans = 0x3fffffff;\n\t\tfor (int i=1;i<=max(N,M);i++){\n\t\t\tscanf(\"%d\",&x);\n\t\t\tans = min(ans,x);\n\t\t}\n\t\tprintf(\"%d\\n\",ans);\n\t\treturn 0;\n\t}\n\tnume = 0;\n\tmemset(first,-1,sizeof(first));\n\tfor (int j=1;j<=M-1;j++){\n\t\tscanf(\"%d\",&x);\n\t\tadd_edge(0,j,x);\n\t}\n\tfor (int i=1;i<=N-2;i++){\n\t\tfor (int j=1;j<=M-1;j++){\n\t\t\tscanf(\"%d\",&x);\n\t\t\tadd_edge(2*(i-1)*(M-1)+M-1+j,2*i*(M-1)+j,x);\n\t\t}\n\t}\n\tfor (int j=1;j<=M-1;j++){\n\t\tscanf(\"%d\",&x);\n\t\tadd_edge(2*(N-2)*(M-1)+M-1+j,2*(N-1)*(M-1)+1,x);\n\t}\n\tfor (int i=1;i<=N-1;i++){\n\t\tscanf(\"%d\",&x);\n\t\tadd_edge(2*(i-1)*(M-1)+M-1+1,2*(N-1)*(M-1)+1,x);\n\t\tfor (int j=2;j<=M-1;j++){\n\t\t\tscanf(\"%d\",&x);\n\t\t\tadd_edge(2*(i-1)*(M-1)+j-1,2*(i-1)*(M-1)+M-1+j,x);\n\t\t}\n\t\tscanf(\"%d\",&x);\n\t\tadd_edge(0,2*(i-1)*(M-1)+M-1,x);\n\t}\n\tfor (int i=1;i<=(N-1);i++){\n\t\tfor (int j=1;j<=M-1;j++){\n\t\t\tscanf(\"%d\",&x);\n\t\t\tadd_edge(2*(i-1)*(M-1)+j,2*(i-1)*(M-1)+(M-1)+j,x);\n\t\t}\n\t}\n\tprintf(\"%d\\n\",spfa(0,2*(N-1)*(M-1)+1));\n\treturn 0;\n}\n \n```\n\n","slug":"1001 [BeiJing2006]狼抓兔子","published":1,"date":"2021-08-28T13:02:49.989Z","updated":"2021-08-28T13:02:49.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvso31r0001vfnu2kbhf9tz","content":"<p> 把每一个三角形看作一个顶点，最大流转最短路，可以较快，当然也可以跑最大流。</p><a id=\"more\"></a><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxv = <span class=\"number\">1005</span>*<span class=\"number\">1005</span>*<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> first[maxv],nume;</span><br><span class=\"line\"><span class=\"keyword\">int</span> N,M,x;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,nxt,dist;</span><br><span class=\"line\">&#125;edge[maxv*<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> q[maxv],front,rear,dist[maxv];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxv];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">spfa</span><span class=\"params\">(<span class=\"keyword\">int</span> s,<span class=\"keyword\">int</span> t)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u,v;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dist,<span class=\"number\">0x3f</span>,<span class=\"keyword\">sizeof</span>(dist));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis,<span class=\"literal\">false</span>,<span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    front = rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">    q[rear++] = s;</span><br><span class=\"line\">    dist[s] = <span class=\"number\">0</span>;vis[s] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (front!=rear)&#123;</span><br><span class=\"line\">        u = q[front++];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (front == maxv<span class=\"number\">-1</span>) front = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e = first[u];~e;e=edge[e].nxt) &#123;</span><br><span class=\"line\">            v = edge[e].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dist[v]&gt;dist[u]+edge[e].dist)&#123;</span><br><span class=\"line\">                dist[v] = dist[u]+edge[e].dist;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!vis[v])&#123;</span><br><span class=\"line\">                    vis[v] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    q[rear++] = v;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (rear == maxv<span class=\"number\">-1</span>) rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vis[u] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dist[t];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    edge[nume] . to = b;</span><br><span class=\"line\">    edge[nume] . nxt = first[a];</span><br><span class=\"line\">    edge[nume] . dist = c;</span><br><span class=\"line\">    first[a] = nume++;</span><br><span class=\"line\">    edge[nume] . to = a;</span><br><span class=\"line\">    edge[nume] . nxt = first[b];</span><br><span class=\"line\">    edge[nume] . dist = c;</span><br><span class=\"line\">    first[b] = nume++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;N,&amp;M);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (N==<span class=\"number\">1</span>||M==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0x3fffffff</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"built_in\">max</span>(N,M);i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x);</span><br><span class=\"line\">            ans = <span class=\"built_in\">min</span>(ans,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(first,<span class=\"number\">-1</span>,<span class=\"keyword\">sizeof</span>(first));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=M<span class=\"number\">-1</span>;j++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x);</span><br><span class=\"line\">        add_edge(<span class=\"number\">0</span>,j,x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N<span class=\"number\">-2</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=M<span class=\"number\">-1</span>;j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x);</span><br><span class=\"line\">            add_edge(<span class=\"number\">2</span>*(i<span class=\"number\">-1</span>)*(M<span class=\"number\">-1</span>)+M<span class=\"number\">-1</span>+j,<span class=\"number\">2</span>*i*(M<span class=\"number\">-1</span>)+j,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=M<span class=\"number\">-1</span>;j++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x);</span><br><span class=\"line\">        add_edge(<span class=\"number\">2</span>*(N<span class=\"number\">-2</span>)*(M<span class=\"number\">-1</span>)+M<span class=\"number\">-1</span>+j,<span class=\"number\">2</span>*(N<span class=\"number\">-1</span>)*(M<span class=\"number\">-1</span>)+<span class=\"number\">1</span>,x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x);</span><br><span class=\"line\">        add_edge(<span class=\"number\">2</span>*(i<span class=\"number\">-1</span>)*(M<span class=\"number\">-1</span>)+M<span class=\"number\">-1</span>+<span class=\"number\">1</span>,<span class=\"number\">2</span>*(N<span class=\"number\">-1</span>)*(M<span class=\"number\">-1</span>)+<span class=\"number\">1</span>,x);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">2</span>;j&lt;=M<span class=\"number\">-1</span>;j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x);</span><br><span class=\"line\">            add_edge(<span class=\"number\">2</span>*(i<span class=\"number\">-1</span>)*(M<span class=\"number\">-1</span>)+j<span class=\"number\">-1</span>,<span class=\"number\">2</span>*(i<span class=\"number\">-1</span>)*(M<span class=\"number\">-1</span>)+M<span class=\"number\">-1</span>+j,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x);</span><br><span class=\"line\">        add_edge(<span class=\"number\">0</span>,<span class=\"number\">2</span>*(i<span class=\"number\">-1</span>)*(M<span class=\"number\">-1</span>)+M<span class=\"number\">-1</span>,x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=(N<span class=\"number\">-1</span>);i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=M<span class=\"number\">-1</span>;j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x);</span><br><span class=\"line\">            add_edge(<span class=\"number\">2</span>*(i<span class=\"number\">-1</span>)*(M<span class=\"number\">-1</span>)+j,<span class=\"number\">2</span>*(i<span class=\"number\">-1</span>)*(M<span class=\"number\">-1</span>)+(M<span class=\"number\">-1</span>)+j,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,spfa(<span class=\"number\">0</span>,<span class=\"number\">2</span>*(N<span class=\"number\">-1</span>)*(M<span class=\"number\">-1</span>)+<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>把每一个三角形看作一个顶点，最大流转最短路，可以较快，当然也可以跑最大流。</p>","more":"<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxv = <span class=\"number\">1005</span>*<span class=\"number\">1005</span>*<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> first[maxv],nume;</span><br><span class=\"line\"><span class=\"keyword\">int</span> N,M,x;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,nxt,dist;</span><br><span class=\"line\">&#125;edge[maxv*<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> q[maxv],front,rear,dist[maxv];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxv];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">spfa</span><span class=\"params\">(<span class=\"keyword\">int</span> s,<span class=\"keyword\">int</span> t)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u,v;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dist,<span class=\"number\">0x3f</span>,<span class=\"keyword\">sizeof</span>(dist));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis,<span class=\"literal\">false</span>,<span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    front = rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">    q[rear++] = s;</span><br><span class=\"line\">    dist[s] = <span class=\"number\">0</span>;vis[s] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (front!=rear)&#123;</span><br><span class=\"line\">        u = q[front++];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (front == maxv<span class=\"number\">-1</span>) front = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e = first[u];~e;e=edge[e].nxt) &#123;</span><br><span class=\"line\">            v = edge[e].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dist[v]&gt;dist[u]+edge[e].dist)&#123;</span><br><span class=\"line\">                dist[v] = dist[u]+edge[e].dist;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!vis[v])&#123;</span><br><span class=\"line\">                    vis[v] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    q[rear++] = v;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (rear == maxv<span class=\"number\">-1</span>) rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vis[u] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dist[t];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    edge[nume] . to = b;</span><br><span class=\"line\">    edge[nume] . nxt = first[a];</span><br><span class=\"line\">    edge[nume] . dist = c;</span><br><span class=\"line\">    first[a] = nume++;</span><br><span class=\"line\">    edge[nume] . to = a;</span><br><span class=\"line\">    edge[nume] . nxt = first[b];</span><br><span class=\"line\">    edge[nume] . dist = c;</span><br><span class=\"line\">    first[b] = nume++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;N,&amp;M);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (N==<span class=\"number\">1</span>||M==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0x3fffffff</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"built_in\">max</span>(N,M);i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x);</span><br><span class=\"line\">            ans = <span class=\"built_in\">min</span>(ans,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(first,<span class=\"number\">-1</span>,<span class=\"keyword\">sizeof</span>(first));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=M<span class=\"number\">-1</span>;j++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x);</span><br><span class=\"line\">        add_edge(<span class=\"number\">0</span>,j,x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N<span class=\"number\">-2</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=M<span class=\"number\">-1</span>;j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x);</span><br><span class=\"line\">            add_edge(<span class=\"number\">2</span>*(i<span class=\"number\">-1</span>)*(M<span class=\"number\">-1</span>)+M<span class=\"number\">-1</span>+j,<span class=\"number\">2</span>*i*(M<span class=\"number\">-1</span>)+j,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=M<span class=\"number\">-1</span>;j++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x);</span><br><span class=\"line\">        add_edge(<span class=\"number\">2</span>*(N<span class=\"number\">-2</span>)*(M<span class=\"number\">-1</span>)+M<span class=\"number\">-1</span>+j,<span class=\"number\">2</span>*(N<span class=\"number\">-1</span>)*(M<span class=\"number\">-1</span>)+<span class=\"number\">1</span>,x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x);</span><br><span class=\"line\">        add_edge(<span class=\"number\">2</span>*(i<span class=\"number\">-1</span>)*(M<span class=\"number\">-1</span>)+M<span class=\"number\">-1</span>+<span class=\"number\">1</span>,<span class=\"number\">2</span>*(N<span class=\"number\">-1</span>)*(M<span class=\"number\">-1</span>)+<span class=\"number\">1</span>,x);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">2</span>;j&lt;=M<span class=\"number\">-1</span>;j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x);</span><br><span class=\"line\">            add_edge(<span class=\"number\">2</span>*(i<span class=\"number\">-1</span>)*(M<span class=\"number\">-1</span>)+j<span class=\"number\">-1</span>,<span class=\"number\">2</span>*(i<span class=\"number\">-1</span>)*(M<span class=\"number\">-1</span>)+M<span class=\"number\">-1</span>+j,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x);</span><br><span class=\"line\">        add_edge(<span class=\"number\">0</span>,<span class=\"number\">2</span>*(i<span class=\"number\">-1</span>)*(M<span class=\"number\">-1</span>)+M<span class=\"number\">-1</span>,x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=(N<span class=\"number\">-1</span>);i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=M<span class=\"number\">-1</span>;j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x);</span><br><span class=\"line\">            add_edge(<span class=\"number\">2</span>*(i<span class=\"number\">-1</span>)*(M<span class=\"number\">-1</span>)+j,<span class=\"number\">2</span>*(i<span class=\"number\">-1</span>)*(M<span class=\"number\">-1</span>)+(M<span class=\"number\">-1</span>)+j,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,spfa(<span class=\"number\">0</span>,<span class=\"number\">2</span>*(N<span class=\"number\">-1</span>)*(M<span class=\"number\">-1</span>)+<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"BZOj1010 [HNOI2008] 玩具装箱 toy","_content":"\n$dp[i]=min(dp[j]+(sum[i]-sum[j]+i-j-1-L)^2)$\n\n<!--more-->\n\n$dp[i]=min(dp[j]+(A[i]-A[j]-c)^2)$\n$(A[i]-(A[j]+c))^2 = A[i]^2 + (A[j]+c)^2 - 2*A[i]*(A[j]+c)$\n得到\n$dp[i] = min(dp[j]+A[i]^2 + (A[j]+c)^2 - 2*A[i]*(A[j]+c))$\n\n其中c > 0\nA满足单调递增 \n\n决策j比k优，且j在k的右边 \n则\n$dp[j] + A[i]^2 + (A[j]+c)^2 - 2*A[i]*(A[j]+c) < dp[k] + A[i]^2 + (A[k]+c)^2 - 2*A[i]*(A[k]+c)$\n$dp[j] + (A[j]+c)^2 - 2*A[i]*(A[j]+c) < dp[k] + (A[k]+c)^2 - 2*A[i]*(A[k]+c)$\n$2*A[i]*(A[k]+c-A[j]-c) < dp[k]-dp[j] + (A[k]+c)^2 - (A[j]+c)^2$\n其中$A[i]>0 ,A[k]-A[j]<0$\n$2*A[i]*(A[k]-A[j]) < dp[k]-dp[j] + (A[k]+c)^2 - (A[j]+c)^2$\n$A[i]>((dp[k]+ (A[k]+c)^2 - (dp[j]+(A[j]+c)^2)) / (A[k]*2-A[j]*2)$\n\n设$y[i] = dp[i] + (A[i]+c)^2$\n设$x[i] = A[i] * 2 $\n则 \n$A[i]>((y[k] - y[j]) / (x[k]-x[i])$\n设$g[k,j] =  (y[k]-y[l]) / (x[k]-x[l])（其分母大于0）$\n\n如果存在$k < j$且$g[k,j] <= A[i] $，那么$k$不如$j$优\n\n相当于如果存在$j,k$\n如果对于决策$i$\n满足$i > j > k$\n如果存在$g[k,j] <= A[i] $\n若$g[j,i]<=A[i]$\n则$i$比$j$优秀，$j$比$k$优秀，$k$无用。\n若$g[j,i]>A[i] $\n即$g[i,j]<=A[i] $\n则$i$不如$j$优秀，又k不如j优秀，所以k无用。\n故如果存在$k < j$且$g[k,j] <= A[i]$ ，那么k无用\n另外\n如果$g[i,j]>g[j,k]$\n如果$g[j,k]<=A[i]$，那么j无用\n如果$g[j,k]>A[i]$，那么\n$g[i,j] <g[j,k]>A[i]$，$j$无用。 \n因此，单调队列还需要维护队尾 \n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cstdlib>\n#include<cmath>\n#define sqr(x) ((x)*(x))\nconst int maxn = 50050;\nusing namespace std;\ntypedef long long LL;\nLL N,L,c,dp[maxn],A[maxn];\ndouble g(LL j,LL k){\n\tdouble yj,yk,xj,xk;\n\t//满足j<j \n\tyj = dp[j] + sqr(A[j]+c);\n\tyk = dp[k] + sqr(A[k]+c);\n\txj = A[j] * 2;\n\txk = A[k] * 2 ;\n\treturn 1.0*(yj-yk)/(xj-xk);\n}\nLL front,rear,q[maxn];\nint main(){\n\tscanf(\"%lld%lld\",&N,&L);\n\tc = 1+L;\n\tA[0] = 0;\n\tfor (int i=1;i<=N;i++){\n\t\tint c;\n\t\tscanf(\"%lld\",&c);\n\t\tA[i] = A[i-1] + c;\n\t}\n\tfor (int i=0;i<=N;i++)A[i] += i;\n\tmemset(dp,0x3f,sizeof(dp));\n\tdp[0] = 0;\n\tfront = rear = 0;\n\tq[rear++] = 0;\n\tfor (int i=1;i<=N;i++){\n\t\twhile (rear-front>=2 && g(q[front],q[front+1]) <= A[i]) front++;\n\t\tint j = q[front];\n\t\tdp[i] = dp[j]+sqr(A[i]-A[j] - c);\n\t\twhile (rear-front>=2 && g(q[rear-2],q[rear-1])>g(q[rear-1],i)) rear--;\n\t\tq[rear++] = i;\n\t}\n\tprintf(\"%lld\\n\",dp[N]);\n}\n```\n\n","source":"_posts/1010 [HNOI2008]玩具装箱toy.md","raw":"---\ntitle: BZOj1010 [HNOI2008]玩具装箱toy\ntags:\n - DP\n - 斜率优化\n - BZOJ\n---\n\n$dp[i]=min(dp[j]+(sum[i]-sum[j]+i-j-1-L)^2)$\n\n<!--more-->\n\n$dp[i]=min(dp[j]+(A[i]-A[j]-c)^2)$\n$(A[i]-(A[j]+c))^2 = A[i]^2 + (A[j]+c)^2 - 2*A[i]*(A[j]+c)$\n得到\n$dp[i] = min(dp[j]+A[i]^2 + (A[j]+c)^2 - 2*A[i]*(A[j]+c))$\n\n其中c > 0\nA满足单调递增 \n\n决策j比k优，且j在k的右边 \n则\n$dp[j] + A[i]^2 + (A[j]+c)^2 - 2*A[i]*(A[j]+c) < dp[k] + A[i]^2 + (A[k]+c)^2 - 2*A[i]*(A[k]+c)$\n$dp[j] + (A[j]+c)^2 - 2*A[i]*(A[j]+c) < dp[k] + (A[k]+c)^2 - 2*A[i]*(A[k]+c)$\n$2*A[i]*(A[k]+c-A[j]-c) < dp[k]-dp[j] + (A[k]+c)^2 - (A[j]+c)^2$\n其中$A[i]>0 ,A[k]-A[j]<0$\n$2*A[i]*(A[k]-A[j]) < dp[k]-dp[j] + (A[k]+c)^2 - (A[j]+c)^2$\n$A[i]>((dp[k]+ (A[k]+c)^2 - (dp[j]+(A[j]+c)^2)) / (A[k]*2-A[j]*2)$\n\n设$y[i] = dp[i] + (A[i]+c)^2$\n设$x[i] = A[i] * 2 $\n则 \n$A[i]>((y[k] - y[j]) / (x[k]-x[i])$\n设$g[k,j] =  (y[k]-y[l]) / (x[k]-x[l])（其分母大于0）$\n\n如果存在$k < j$且$g[k,j] <= A[i] $，那么$k$不如$j$优\n\n相当于如果存在$j,k$\n如果对于决策$i$\n满足$i > j > k$\n如果存在$g[k,j] <= A[i] $\n若$g[j,i]<=A[i]$\n则$i$比$j$优秀，$j$比$k$优秀，$k$无用。\n若$g[j,i]>A[i] $\n即$g[i,j]<=A[i] $\n则$i$不如$j$优秀，又k不如j优秀，所以k无用。\n故如果存在$k < j$且$g[k,j] <= A[i]$ ，那么k无用\n另外\n如果$g[i,j]>g[j,k]$\n如果$g[j,k]<=A[i]$，那么j无用\n如果$g[j,k]>A[i]$，那么\n$g[i,j] <g[j,k]>A[i]$，$j$无用。 \n因此，单调队列还需要维护队尾 \n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cstdlib>\n#include<cmath>\n#define sqr(x) ((x)*(x))\nconst int maxn = 50050;\nusing namespace std;\ntypedef long long LL;\nLL N,L,c,dp[maxn],A[maxn];\ndouble g(LL j,LL k){\n\tdouble yj,yk,xj,xk;\n\t//满足j<j \n\tyj = dp[j] + sqr(A[j]+c);\n\tyk = dp[k] + sqr(A[k]+c);\n\txj = A[j] * 2;\n\txk = A[k] * 2 ;\n\treturn 1.0*(yj-yk)/(xj-xk);\n}\nLL front,rear,q[maxn];\nint main(){\n\tscanf(\"%lld%lld\",&N,&L);\n\tc = 1+L;\n\tA[0] = 0;\n\tfor (int i=1;i<=N;i++){\n\t\tint c;\n\t\tscanf(\"%lld\",&c);\n\t\tA[i] = A[i-1] + c;\n\t}\n\tfor (int i=0;i<=N;i++)A[i] += i;\n\tmemset(dp,0x3f,sizeof(dp));\n\tdp[0] = 0;\n\tfront = rear = 0;\n\tq[rear++] = 0;\n\tfor (int i=1;i<=N;i++){\n\t\twhile (rear-front>=2 && g(q[front],q[front+1]) <= A[i]) front++;\n\t\tint j = q[front];\n\t\tdp[i] = dp[j]+sqr(A[i]-A[j] - c);\n\t\twhile (rear-front>=2 && g(q[rear-2],q[rear-1])>g(q[rear-1],i)) rear--;\n\t\tq[rear++] = i;\n\t}\n\tprintf(\"%lld\\n\",dp[N]);\n}\n```\n\n","slug":"1010 [HNOI2008]玩具装箱toy","published":1,"date":"2021-08-28T13:02:49.989Z","updated":"2021-08-28T13:02:49.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvso31y0003vfnu66ql2evs","content":"<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>i</mi><mo>−</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo>−</mo><mi>L</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dp[i]=min(dp[j]+(sum[i]-sum[j]+i-j-1-L)^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">m</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">m</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.74285em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">L</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p><a id=\"more\"></a><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dp[i]=min(dp[j]+(A[i]-A[j]-c)^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span><br><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>=</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><msup><mo stretchy=\"false\">]</mo><mn>2</mn></msup><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>−</mo><mn>2</mn><mo>∗</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(A[i]-(A[j]+c))^2 = A[i]^2 + (A[j]+c)^2 - 2*A[i]*(A[j]+c)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span></span></span></span><br>得到 <br><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><msup><mo stretchy=\"false\">]</mo><mn>2</mn></msup><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>−</mo><mn>2</mn><mo>∗</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dp[i] = min(dp[j]+A[i]^2 + (A[j]+c)^2 - 2*A[i]*(A[j]+c))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></p><p> 其中 c &gt; 0<br>A 满足单调递增 </p><p> 决策 j 比 k 优，且 j 在 k 的右边 <br> 则<br><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><msup><mo stretchy=\"false\">]</mo><mn>2</mn></msup><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>−</mo><mn>2</mn><mo>∗</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><msup><mo stretchy=\"false\">]</mo><mn>2</mn></msup><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>−</mo><mn>2</mn><mo>∗</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dp[j] + A[i]^2 + (A[j]+c)^2 - 2*A[i]*(A[j]+c) &lt; dp[k] + A[i]^2 + (A[k]+c)^2 - 2*A[i]*(A[k]+c)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span></span></span></span><br><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>−</mo><mn>2</mn><mo>∗</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>−</mo><mn>2</mn><mo>∗</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dp[j] + (A[j]+c)^2 - 2*A[i]*(A[j]+c) &lt; dp[k] + (A[k]+c)^2 - 2*A[i]*(A[k]+c)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span></span></span></span><br><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><mo>−</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>−</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">2*A[i]*(A[k]+c-A[j]-c) &lt; dp[k]-dp[j] + (A[k]+c)^2 - (A[j]+c)^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><br>其中 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mn>0</mn><mo separator=\"true\">,</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">A[i]&gt;0 ,A[k]-A[j]&lt;0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">0</span></span></span></span><br><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>−</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">2*A[i]*(A[k]-A[j]) &lt; dp[k]-dp[j] + (A[k]+c)^2 - (A[j]+c)^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><br><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>−</mo><mo stretchy=\"false\">(</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>∗</mo><mn>2</mn><mo>−</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>∗</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A[i]&gt;((dp[k]+ (A[k]+c)^2 - (dp[j]+(A[j]+c)^2)) / (A[k]*2-A[j]*2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span></p><p> 设<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">y[i] = dp[i] + (A[i]+c)^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><br>设 $x[i] = A[i] * 2 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">则 </mi></mrow><annotation encoding=\"application/x-tex\"> 则</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">则 </span></span></span></span>A[i]&gt;((y[k] - y[j]) / (x[k]-x[i])<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\"> 设</mi></mrow><annotation encoding=\"application/x-tex\">设 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\"> 设</span></span></span></span>g[k,j] = (y[k]-y[l]) / (x[k]-x[l])（其分母大于 0）$</p><p>如果存在 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi><mo>&lt;</mo><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">k &lt; j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.73354em;vertical-align:-.0391em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span></span></span></span> 且 $g[k,j] &lt;= A[i] <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">，</mi><mi mathvariant=\"normal\">那 </mi><mi mathvariant=\"normal\"> 么</mi></mrow><annotation encoding=\"application/x-tex\">，那么 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\"> 那</span><span class=\"mord cjk_fallback\">么 </span></span></span></span>k<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\"> 不</mi><mi mathvariant=\"normal\">如 </mi></mrow><annotation encoding=\"application/x-tex\"> 不如 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\"> 不</span><span class=\"mord cjk_fallback\">如 </span></span></span></span>j$ 优</p><p> 相当于如果存在 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi><mo separator=\"true\">,</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">j,k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span></span></span></span><br> 如果对于决策 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span><br> 满足 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo>&gt;</mo><mi>j</mi><mo>&gt;</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">i &gt; j &gt; k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.69862em;vertical-align:-.0391em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span></span></span></span><br> 如果存在 $g[k,j] &lt;= A[i] <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">若 </mi></mrow><annotation encoding=\"application/x-tex\"> 若</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">若 </span></span></span></span>g[j,i]&lt;=A[i]<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\"> 则</mi></mrow><annotation encoding=\"application/x-tex\">则 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\"> 则</span></span></span></span>i<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">比 </mi></mrow><annotation encoding=\"application/x-tex\"> 比</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">比 </span></span></span></span>j<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\"> 优</mi><mi mathvariant=\"normal\">秀 </mi><mi mathvariant=\"normal\">，</mi></mrow><annotation encoding=\"application/x-tex\"> 优秀，</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">优 </span><span class=\"mord cjk_fallback\"> 秀</span><span class=\"mord cjk_fallback\">，</span></span></span></span>j<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">比 </mi></mrow><annotation encoding=\"application/x-tex\"> 比</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">比 </span></span></span></span>k<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\"> 优</mi><mi mathvariant=\"normal\">秀 </mi><mi mathvariant=\"normal\">，</mi></mrow><annotation encoding=\"application/x-tex\"> 优秀，</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">优 </span><span class=\"mord cjk_fallback\"> 秀</span><span class=\"mord cjk_fallback\">，</span></span></span></span>k<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">无 </mi><mi mathvariant=\"normal\"> 用</mi><mi mathvariant=\"normal\">。</mi><mi mathvariant=\"normal\">若 </mi></mrow><annotation encoding=\"application/x-tex\"> 无用。 若 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\"> 无</span><span class=\"mord cjk_fallback\">用 </span><span class=\"mord cjk_fallback\">。</span><span class=\"mord cjk_fallback\"> 若</span></span></span></span>g[j,i]&gt;A[i] <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">即 </mi></mrow><annotation encoding=\"application/x-tex\"> 即</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">即 </span></span></span></span>g[i,j]&lt;=A[i] <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\"> 则</mi></mrow><annotation encoding=\"application/x-tex\">则 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\"> 则</span></span></span></span>i<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">不 </mi><mi mathvariant=\"normal\"> 如</mi></mrow><annotation encoding=\"application/x-tex\">不如 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\"> 不</span><span class=\"mord cjk_fallback\">如 </span></span></span></span>j<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\"> 优</mi><mi mathvariant=\"normal\">秀 </mi><mi mathvariant=\"normal\">，</mi><mi mathvariant=\"normal\"> 又</mi><mi>k</mi><mi mathvariant=\"normal\">不 </mi><mi mathvariant=\"normal\"> 如</mi><mi>j</mi><mi mathvariant=\"normal\">优 </mi><mi mathvariant=\"normal\"> 秀</mi><mi mathvariant=\"normal\">，</mi><mi mathvariant=\"normal\">所 </mi><mi mathvariant=\"normal\"> 以</mi><mi>k</mi><mi mathvariant=\"normal\">无 </mi><mi mathvariant=\"normal\"> 用</mi><mi mathvariant=\"normal\">。</mi><mi mathvariant=\"normal\">故 </mi><mi mathvariant=\"normal\"> 如</mi><mi mathvariant=\"normal\">果 </mi><mi mathvariant=\"normal\"> 存</mi><mi mathvariant=\"normal\">在 </mi></mrow><annotation encoding=\"application/x-tex\"> 优秀，又 k 不如 j 优秀，所以 k 无用。 故如果存在 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord cjk_fallback\"> 优</span><span class=\"mord cjk_fallback\">秀 </span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\"> 又</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mord cjk_fallback\">不 </span><span class=\"mord cjk_fallback\"> 如</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mord cjk_fallback\">优 </span><span class=\"mord cjk_fallback\"> 秀</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">所 </span><span class=\"mord cjk_fallback\"> 以</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mord cjk_fallback\">无 </span><span class=\"mord cjk_fallback\"> 用</span><span class=\"mord cjk_fallback\">。</span><span class=\"mord cjk_fallback\">故 </span><span class=\"mord cjk_fallback\"> 如</span><span class=\"mord cjk_fallback\">果 </span><span class=\"mord cjk_fallback\"> 存</span><span class=\"mord cjk_fallback\">在 </span></span></span></span>k &lt; j<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\"> 且</mi></mrow><annotation encoding=\"application/x-tex\">且 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\"> 且</span></span></span></span>g[k,j] &lt;= A[i]$ ，那么 k 无用 <br> 另外 <br> 如果 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>g</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo separator=\"true\">,</mo><mi>k</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">g[i,j]&gt;g[j,k]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span></span></span></span><br> 如果 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo separator=\"true\">,</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>&lt;</mo><mo>=</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">g[j,k]&lt;=A[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>，那么 j 无用<br> 如果 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo separator=\"true\">,</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">g[j,k]&gt;A[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>，那么<br><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&lt;</mo><mi>g</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo separator=\"true\">,</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">g[i,j] &lt;g[j,k]&gt;A[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span></span></span></span> 无用。<br>因此，单调队列还需要维护队尾</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sqr(x) ((x)*(x))</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">50050</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\">LL N,L,c,dp[maxn],A[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">g</span><span class=\"params\">(LL j,LL k)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> yj,yk,xj,xk;</span><br><span class=\"line\">    <span class=\"comment\">// 满足 j&lt;j </span></span><br><span class=\"line\">    yj = dp[j] + sqr(A[j]+c);</span><br><span class=\"line\">    yk = dp[k] + sqr(A[k]+c);</span><br><span class=\"line\">    xj = A[j] * <span class=\"number\">2</span>;</span><br><span class=\"line\">    xk = A[k] * <span class=\"number\">2</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1.0</span>*(yj-yk)/(xj-xk);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">LL front,rear,q[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld\"</span>,&amp;N,&amp;L);</span><br><span class=\"line\">    c = <span class=\"number\">1</span>+L;</span><br><span class=\"line\">    A[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>,&amp;c);</span><br><span class=\"line\">        A[i] = A[i<span class=\"number\">-1</span>] + c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=N;i++)A[i] += i;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dp,<span class=\"number\">0x3f</span>,<span class=\"keyword\">sizeof</span>(dp));</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    front = rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">    q[rear++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (rear-front&gt;=<span class=\"number\">2</span> &amp;&amp; g(q[front],q[front+<span class=\"number\">1</span>]) &lt;= A[i]) front++;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = q[front];</span><br><span class=\"line\">        dp[i] = dp[j]+sqr(A[i]-A[j] - c);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (rear-front&gt;=<span class=\"number\">2</span> &amp;&amp; g(q[rear<span class=\"number\">-2</span>],q[rear<span class=\"number\">-1</span>])&gt;g(q[rear<span class=\"number\">-1</span>],i)) rear--;</span><br><span class=\"line\">        q[rear++] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,dp[N]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>i</mi><mo>−</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo>−</mo><mi>L</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dp[i]=min(dp[j]+(sum[i]-sum[j]+i-j-1-L)^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">m</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">m</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.74285em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">L</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>","more":"<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dp[i]=min(dp[j]+(A[i]-A[j]-c)^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span><br><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>=</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><msup><mo stretchy=\"false\">]</mo><mn>2</mn></msup><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>−</mo><mn>2</mn><mo>∗</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(A[i]-(A[j]+c))^2 = A[i]^2 + (A[j]+c)^2 - 2*A[i]*(A[j]+c)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span></span></span></span><br>得到<br><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><msup><mo stretchy=\"false\">]</mo><mn>2</mn></msup><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>−</mo><mn>2</mn><mo>∗</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dp[i] = min(dp[j]+A[i]^2 + (A[j]+c)^2 - 2*A[i]*(A[j]+c))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></p><p>其中c &gt; 0<br>A满足单调递增</p><p>决策j比k优，且j在k的右边<br>则<br><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><msup><mo stretchy=\"false\">]</mo><mn>2</mn></msup><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>−</mo><mn>2</mn><mo>∗</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><msup><mo stretchy=\"false\">]</mo><mn>2</mn></msup><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>−</mo><mn>2</mn><mo>∗</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dp[j] + A[i]^2 + (A[j]+c)^2 - 2*A[i]*(A[j]+c) &lt; dp[k] + A[i]^2 + (A[k]+c)^2 - 2*A[i]*(A[k]+c)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span></span></span></span><br><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>−</mo><mn>2</mn><mo>∗</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>−</mo><mn>2</mn><mo>∗</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dp[j] + (A[j]+c)^2 - 2*A[i]*(A[j]+c) &lt; dp[k] + (A[k]+c)^2 - 2*A[i]*(A[k]+c)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span></span></span></span><br><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><mo>−</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>−</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">2*A[i]*(A[k]+c-A[j]-c) &lt; dp[k]-dp[j] + (A[k]+c)^2 - (A[j]+c)^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><br>其中<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mn>0</mn><mo separator=\"true\">,</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">A[i]&gt;0 ,A[k]-A[j]&lt;0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">0</span></span></span></span><br><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>−</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">2*A[i]*(A[k]-A[j]) &lt; dp[k]-dp[j] + (A[k]+c)^2 - (A[j]+c)^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><br><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>−</mo><mo stretchy=\"false\">(</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>∗</mo><mn>2</mn><mo>−</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>∗</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A[i]&gt;((dp[k]+ (A[k]+c)^2 - (dp[j]+(A[j]+c)^2)) / (A[k]*2-A[j]*2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span></p><p>设<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">y[i] = dp[i] + (A[i]+c)^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><br>设$x[i] = A[i] * 2 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">则</mi></mrow><annotation encoding=\"application/x-tex\">则</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">则</span></span></span></span>A[i]&gt;((y[k] - y[j]) / (x[k]-x[i])<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">设</mi></mrow><annotation encoding=\"application/x-tex\">设</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">设</span></span></span></span>g[k,j] = (y[k]-y[l]) / (x[k]-x[l])（其分母大于0）$</p><p>如果存在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi><mo>&lt;</mo><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">k &lt; j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.73354em;vertical-align:-.0391em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span></span></span></span>且$g[k,j] &lt;= A[i] <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">，</mi><mi mathvariant=\"normal\">那</mi><mi mathvariant=\"normal\">么</mi></mrow><annotation encoding=\"application/x-tex\">，那么</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">那</span><span class=\"mord cjk_fallback\">么</span></span></span></span>k<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">不</mi><mi mathvariant=\"normal\">如</mi></mrow><annotation encoding=\"application/x-tex\">不如</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">不</span><span class=\"mord cjk_fallback\">如</span></span></span></span>j$优</p><p>相当于如果存在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi><mo separator=\"true\">,</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">j,k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span></span></span></span><br>如果对于决策<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span><br>满足<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo>&gt;</mo><mi>j</mi><mo>&gt;</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">i &gt; j &gt; k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.69862em;vertical-align:-.0391em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span></span></span></span><br>如果存在$g[k,j] &lt;= A[i] <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">若</mi></mrow><annotation encoding=\"application/x-tex\">若</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">若</span></span></span></span>g[j,i]&lt;=A[i]<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">则</mi></mrow><annotation encoding=\"application/x-tex\">则</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">则</span></span></span></span>i<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">比</mi></mrow><annotation encoding=\"application/x-tex\">比</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">比</span></span></span></span>j<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">优</mi><mi mathvariant=\"normal\">秀</mi><mi mathvariant=\"normal\">，</mi></mrow><annotation encoding=\"application/x-tex\">优秀，</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">优</span><span class=\"mord cjk_fallback\">秀</span><span class=\"mord cjk_fallback\">，</span></span></span></span>j<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">比</mi></mrow><annotation encoding=\"application/x-tex\">比</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">比</span></span></span></span>k<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">优</mi><mi mathvariant=\"normal\">秀</mi><mi mathvariant=\"normal\">，</mi></mrow><annotation encoding=\"application/x-tex\">优秀，</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">优</span><span class=\"mord cjk_fallback\">秀</span><span class=\"mord cjk_fallback\">，</span></span></span></span>k<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">无</mi><mi mathvariant=\"normal\">用</mi><mi mathvariant=\"normal\">。</mi><mi mathvariant=\"normal\">若</mi></mrow><annotation encoding=\"application/x-tex\">无用。 若</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">无</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord cjk_fallback\">。</span><span class=\"mord cjk_fallback\">若</span></span></span></span>g[j,i]&gt;A[i] <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">即</mi></mrow><annotation encoding=\"application/x-tex\">即</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">即</span></span></span></span>g[i,j]&lt;=A[i] <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">则</mi></mrow><annotation encoding=\"application/x-tex\">则</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">则</span></span></span></span>i<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">不</mi><mi mathvariant=\"normal\">如</mi></mrow><annotation encoding=\"application/x-tex\">不如</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">不</span><span class=\"mord cjk_fallback\">如</span></span></span></span>j<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">优</mi><mi mathvariant=\"normal\">秀</mi><mi mathvariant=\"normal\">，</mi><mi mathvariant=\"normal\">又</mi><mi>k</mi><mi mathvariant=\"normal\">不</mi><mi mathvariant=\"normal\">如</mi><mi>j</mi><mi mathvariant=\"normal\">优</mi><mi mathvariant=\"normal\">秀</mi><mi mathvariant=\"normal\">，</mi><mi mathvariant=\"normal\">所</mi><mi mathvariant=\"normal\">以</mi><mi>k</mi><mi mathvariant=\"normal\">无</mi><mi mathvariant=\"normal\">用</mi><mi mathvariant=\"normal\">。</mi><mi mathvariant=\"normal\">故</mi><mi mathvariant=\"normal\">如</mi><mi mathvariant=\"normal\">果</mi><mi mathvariant=\"normal\">存</mi><mi mathvariant=\"normal\">在</mi></mrow><annotation encoding=\"application/x-tex\">优秀，又k不如j优秀，所以k无用。 故如果存在</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord cjk_fallback\">优</span><span class=\"mord cjk_fallback\">秀</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">又</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mord cjk_fallback\">不</span><span class=\"mord cjk_fallback\">如</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mord cjk_fallback\">优</span><span class=\"mord cjk_fallback\">秀</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">所</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mord cjk_fallback\">无</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord cjk_fallback\">。</span><span class=\"mord cjk_fallback\">故</span><span class=\"mord cjk_fallback\">如</span><span class=\"mord cjk_fallback\">果</span><span class=\"mord cjk_fallback\">存</span><span class=\"mord cjk_fallback\">在</span></span></span></span>k &lt; j<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">且</mi></mrow><annotation encoding=\"application/x-tex\">且</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0;vertical-align:0\"></span><span class=\"mord cjk_fallback\">且</span></span></span></span>g[k,j] &lt;= A[i]$ ，那么k无用<br>另外<br>如果<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>g</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo separator=\"true\">,</mo><mi>k</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">g[i,j]&gt;g[j,k]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span></span></span></span><br>如果<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo separator=\"true\">,</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>&lt;</mo><mo>=</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">g[j,k]&lt;=A[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>，那么j无用<br>如果<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo separator=\"true\">,</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">g[j,k]&gt;A[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>，那么<br><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&lt;</mo><mi>g</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo separator=\"true\">,</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">g[i,j] &lt;g[j,k]&gt;A[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span></span></span></span>无用。<br>因此，单调队列还需要维护队尾</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sqr(x) ((x)*(x))</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">50050</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\">LL N,L,c,dp[maxn],A[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">g</span><span class=\"params\">(LL j,LL k)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> yj,yk,xj,xk;</span><br><span class=\"line\">    <span class=\"comment\">//满足j&lt;j </span></span><br><span class=\"line\">    yj = dp[j] + sqr(A[j]+c);</span><br><span class=\"line\">    yk = dp[k] + sqr(A[k]+c);</span><br><span class=\"line\">    xj = A[j] * <span class=\"number\">2</span>;</span><br><span class=\"line\">    xk = A[k] * <span class=\"number\">2</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1.0</span>*(yj-yk)/(xj-xk);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">LL front,rear,q[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld\"</span>,&amp;N,&amp;L);</span><br><span class=\"line\">    c = <span class=\"number\">1</span>+L;</span><br><span class=\"line\">    A[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>,&amp;c);</span><br><span class=\"line\">        A[i] = A[i<span class=\"number\">-1</span>] + c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=N;i++)A[i] += i;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dp,<span class=\"number\">0x3f</span>,<span class=\"keyword\">sizeof</span>(dp));</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    front = rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">    q[rear++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (rear-front&gt;=<span class=\"number\">2</span> &amp;&amp; g(q[front],q[front+<span class=\"number\">1</span>]) &lt;= A[i]) front++;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = q[front];</span><br><span class=\"line\">        dp[i] = dp[j]+sqr(A[i]-A[j] - c);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (rear-front&gt;=<span class=\"number\">2</span> &amp;&amp; g(q[rear<span class=\"number\">-2</span>],q[rear<span class=\"number\">-1</span>])&gt;g(q[rear<span class=\"number\">-1</span>],i)) rear--;</span><br><span class=\"line\">        q[rear++] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,dp[N]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"AGC024 A-E 题解","_content":"\n[比赛链接](https://agc024.contest.atcoder.jp)\n\nA题想太慢，B题看错题目，被C题续了好久，D题看错范围，不会做E题，天天被wzp吊打。\n\n<!--more-->\n\n### [A - Fairness](https://agc024.contest.atcoder.jp/tasks/agc024_a) \n\n应该还是比较simple的。\n\n```c++\nll a,b,c,k;\nint main(){\n\ta=rd(),b=rd(),c=rd(),k=rd();\n\twriteln(!(k&1)?(a-b):(b-a));\n\treturn 0;\n}\n```\n\n\n\n### [B - Backfront](https://agc024.contest.atcoder.jp/tasks/agc024_b) \n\n​\t显然是一段前缀和一段后缀被使用，相当于用n减去最长的连续的一段，比如说\n\n`43125`里面最长的连续一段是`12`，或者`45`,`35`，而`41253`里面最长的连续的一段是`123`\n\n```C++\nint a[200005],pos[200005],ans = 0,n;\nint f[200005];\nint main(){\n\tn = rd();\n\tRep(i,1,n) a[i] = rd(),pos[a[i]]=i;\n\tint x = n-1;\n\tf[1] = 1;\n\tRep(i,2,n){\n\t\tif(pos[i] > pos[i-1]) f[i] = f[i-1] + 1; else f[i] = 1;\n\t\tx = min(x,n-f[i]);\n\t}\n\twriteln(x);\n\treturn 0;\n}\n```\n\n\n\n### [C - Sequence Growing Easy](https://agc024.contest.atcoder.jp/tasks/agc024_c) \n\n有一个显然的贪心，就是如果连续的直接加上去，否则重置再加上去。\n\n这里要注意判掉无解，给一组数据大家体会一下`01133`，无解还是比较坑的……\n\n\n\n```C++\n//贴一份贝爷%%%的代码表敬意（已删去大量头文件）\n#include<bits/stdc++.h>//%%%\n#define SZb int\nusing namespace std;/*%%%*///%%%\n#define ll long long\n#define For(i,x,y)  for(SZb i=SZb(x);/*%%%*/i<=SZb(y);/*%%%*/++i)\n#define FOr(i,x,y)  for(SZb i=SZb(x);/*%%%*/i>=SZb(y);/*%%%*/--i)\n#define pi acos(-1) \n#define lf else if\n#define Max(x,y)    ((x)=((x)<(y)?(y):(x)))\n#define Min(x,y)    ((x)=((x)>(y)?(y):(x)))\ntypedef complex<double> E;/*%%%*/\nnamespace _SHENZHEBEI_{\n    static const SZb GYN=2333333;/*%%%*/\n    char SZB[GYN],*S=SZB,*T=SZB;/*%%%*/\n    inline char gc(){   if (S==T){  T=(S=SZB)+fread(SZB,1,GYN,stdin);/*%%%*/ if (S==T) return '\\n';/*%%%*/  }   return *S++;/*%%%*/    }\n    inline ll read(){    ll x=0,g=1;/*%%%*/ char ch=gc();/*%%%*/   for (;/*%%%*/!isdigit(ch);/*%%%*/ch=gc()) if (ch=='-') g=-1;/*%%%*/  for (;/*%%%*/isdigit(ch);/*%%%*/ch=gc())  x=x*10-48+ch;/*%%%*/   return x*g;/*%%%*/ }\n    inline void write(ll x){    if (x<0) putchar('-'),x=-x;/*%%%*/  if (x>=10)   write(x/10);/*%%%*/    putchar(x%10+'0');/*%%%*/  }\n\tvoid writeln(ll x){write(x);/*%%%*/puts(\"\");/*%%%*/}\n}using namespace _SHENZHEBEI_;/*%%%*/\nconst ll N=200010;/*%%%*/\nll SZBorz[N],del[N],q[N],cur[N],SzB,answ,_sZb,n,Szb_=0;/*%%%*/\nSZb main(){\n\tn=read();/*%%%*/\n\tFor(i,1,n)SZBorz[i]=read();/*%%%*/\n\tFor(i,1,n)if (i-SZBorz[i]<=0)return puts(\"-1\"),0;/*%%%*/\n\tFOr(i,n,1){\n\t\tfor(;/*%%%*/(Szb_<_sZb)&&(q[Szb_+1]>=i);/*%%%*/++Szb_);/*%%%*/\n\t\tfor(;/*%%%*/_sZb&&(q[_sZb]>=i);/*%%%*/--_sZb);/*%%%*/\n//\t\tFor(j,1,_sZb)write(q[j]),putchar('\t');/*%%%*/puts(\"\");/*%%%*/\n\t\tMin(Szb_,_sZb);/*%%%*/\n\t\tif ((Szb_<_sZb)&&Szb_+1<cur[i])return puts(\"-1\"),0;/*%%%*/\n\t\tif (!SZBorz[i]){if (_sZb)return writeln(-1),0;/*%%%*/}\n\t\tlf (!_sZb||(q[_sZb]!=i-SZBorz[i])){q[++_sZb]=i-SZBorz[i];/*%%%*/del[i-SZBorz[i]]++;/*%%%*/++SzB;/*%%%*/\n\t\t\t\t\t\t\t\t\tMax(cur[i-SZBorz[i]],_sZb);/*%%%*/}\n\t\tSzB-=del[i];/*%%%*/\t\tansw+=SzB;/*%%%*/\n\t}writeln(answ);/*%%%*/\n}\n```\n\n正常版请查看[Link](https://agc024.contest.atcoder.jp/submissions/2539648)\n\n\n\n### [D - Isomorphism Freak](https://agc024.contest.atcoder.jp/tasks/agc024_d) \n\n​\t容易发现第一个答案是直径的一半（允许微小的偏差）。\n\n​\t那么第二个答案是多少呢?\n\n分两种情况讨论\n\n​\t**如果直径的中间是一条边。**\n\n​\t因为要使得同构，我们要使得每一层都一样。\n\n![举例1.png](举例1.png)\n\n​\t看上面这个图，黑色是原来的树，中间那一条是直径的中央。\n\n​\t我们发现，红色是要新加的。那么叶子是什么呢?\n\n​\t把树分层，第一个是第一层，答案是\t$\\large \\prod _{i=1}^{maxdeep} maxdeg(j|deep[j]=i)$\n\n​\t这个直接dfs即可。\n\n​\t**如果直径是一个点呢**\n\n​\t首先以点为重心直接遍历一遍，是必要的。\n\n​\t但是有可能在加了一个点之后直径长度会加一……\n\n​\t因此你只需要遍历所有相邻的边，然后同上面的情况即可。\n\n​\t然后我以为n是1e5范围的……\n\n\n\nn比较小，所以最是$2^_{50}$数量级的（允许小范围的偏差），不会爆$long long$\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\nconst int inf = 0x3f3f3f3f,oo = inf;\n#define pi 3.14159265358979323846\n#define IL inline\n#define RG register\n#define rep(i,a,b) for(RG int i=(a);i<(b);++i)\n#define Rep(i,a,b) for(RG int i=(a);i<=(b);++i)\n#define Dep(i,a,b) for(RG int i=(a);i>=(b);--i)\n#define pc putchar\n#define gc getchar\nIL ll read(){\n    RG ll x=0;char f=0;RG char c=gc();\n    for(;!isdigit(c);c=gc())f|=(c=='-');\n    for(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n    return f?-x:x;\n}\nIL double readdb(){\n    RG double x=0,p=0.1;RG char f=0,c=gc();\n    for(;!isdigit(c);c=gc())f|=(c=='-');\n    for(;isdigit(c);c=gc())x=x*10+(c^48);\n    if(c=='.')for(c=gc();isdigit(c);c=gc(),p/=10)x=x+(c^48)*p;\n    return f?-x:x;\n}\nIL void write(ll x){if(x<0)x=-x,pc('-');if(x>=10)write(x/10);pc(x%10+'0');}\nIL void writeln(ll x){write(x);puts(\"\");}\nIL void writeln(ll x,char c,ll y){write(x);pc(c);writeln(y);}\nIL void writeln(ll x,char c,ll y,char d,ll z){write(x);pc(c);write(y);pc(d);writeln(z);}\n#define debug(x) printf(#x\" = %d\\n\",x);\n#define rd() read()\n#define rdb() readdb()\n#define mem(x,v) memset(x,v,sizeof(x))\n#define pb push_back\n#define mp make_pair\n#define sqr(x) ((x)*(x))\n#define lowbit(x) ((x)&(-(x)))\n#define fin(x) freopen(#x\".in\",\"r\",stdin)\n#define fout(x) freopen(#x\".out\",\"w\",stdout)\n#define y1 ____y1\n#define hash __hash\n#define union _union\n#define int ll\nll Ans = 0;\nint n;\nvector<int> edge[105];\nint ans[105],fa[105],deep[105];\nvoid dfs(int u){\n\tans[deep[u]] = max(ans[deep[u]],(ll)edge[u].size()-1);\n\tfor(unsigned i=0;i<edge[u].size();++i){\n\t\tint v = edge[u][i];\n\t\tif(v == fa[u]) continue;\n\t\tfa[v] = u;\n\t\tdeep[v] = deep[u] + 1;\n\t\tdfs(v);\n\t}\n}\nvoid solve(int u,int v){\n\t//u -> v这条边\n\tmem(ans,0);\n\tdeep[u]=1;fa[u]=v;dfs(u);\n\tdeep[v]=1;fa[v]=u;dfs(v);\n\tint answ = 1;\n\tfor(int i=1;i<=n;i++){\n\t\tif(ans[i]) answ = answ * ans[i];\n\t}\n\tAns = min(Ans,answ*2);\n}\nsigned main(){\n\tAns = 1e18;\n\tn = rd();\n\trep(i,1,n){\n\t\tint a = rd(),b = rd();\n\t\tedge[a] . push_back(b);\n\t\tedge[b] . push_back(a);\n\t}\n\tdeep[1] = 1;fa[1]=0;dfs(1);\n\tint u = 1;\n\tRep(i,1,n){\n\t\tif(deep[i] > deep[u]) u = i;\n\t\tfa[i] = 0;\n\t}\n\tdeep[u] = 1;fa[u]=0;dfs(u);\n\tint v = u;\n\tRep(i,1,n){\n\t\tif(deep[i] > deep[v]) v = i;\n\t}\n\tprintf(\"%d \",(deep[v]+1)/2);\n\tif(deep[v] & 1){\n\t\tint need = deep[v] / 2;\n\t\twhile(need--){\n\t\t\tv = fa[v];\n\t\t}\n\t\t//v是中间那个点\n\t\tfor(unsigned i=0;i<edge[v].size();++i){\n\t\t\tsolve(v,edge[v][i]);\n\t\t}\n\t\tmem(ans,0);\n\t\tdeep[v]=1;fa[v]=0;dfs(v);\n\t\tans[1] = edge[v].size();\n\t\tint answ = 1;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tif(ans[i]) answ = answ * ans[i];\n\t\t}\t\n\t\tAns=min(Ans,answ);\n\t}//中间那个是个点\n\telse{\n\t \tint need = deep[v] / 2;\n\t \tu = v;\n\t \twhile(need--){\n\t \t\tv = u;\n\t \t\tu = fa[v];\n\t\t}\n\t\tsolve(u,v);\n\t}//中间那个是一条边 \n\twriteln(Ans);\n\treturn 0;\n}\n```\n\n\n\n\n\nE....先留坑吧，自己太菜。","source":"_posts/AGC024 A-E题解.md","raw":"---\ntitle: AGC024 A-E题解\ntags:\n - atcoder\n - 树\n - 贪心\n---\n\n[比赛链接](https://agc024.contest.atcoder.jp)\n\nA题想太慢，B题看错题目，被C题续了好久，D题看错范围，不会做E题，天天被wzp吊打。\n\n<!--more-->\n\n### [A - Fairness](https://agc024.contest.atcoder.jp/tasks/agc024_a) \n\n应该还是比较simple的。\n\n```c++\nll a,b,c,k;\nint main(){\n\ta=rd(),b=rd(),c=rd(),k=rd();\n\twriteln(!(k&1)?(a-b):(b-a));\n\treturn 0;\n}\n```\n\n\n\n### [B - Backfront](https://agc024.contest.atcoder.jp/tasks/agc024_b) \n\n​\t显然是一段前缀和一段后缀被使用，相当于用n减去最长的连续的一段，比如说\n\n`43125`里面最长的连续一段是`12`，或者`45`,`35`，而`41253`里面最长的连续的一段是`123`\n\n```C++\nint a[200005],pos[200005],ans = 0,n;\nint f[200005];\nint main(){\n\tn = rd();\n\tRep(i,1,n) a[i] = rd(),pos[a[i]]=i;\n\tint x = n-1;\n\tf[1] = 1;\n\tRep(i,2,n){\n\t\tif(pos[i] > pos[i-1]) f[i] = f[i-1] + 1; else f[i] = 1;\n\t\tx = min(x,n-f[i]);\n\t}\n\twriteln(x);\n\treturn 0;\n}\n```\n\n\n\n### [C - Sequence Growing Easy](https://agc024.contest.atcoder.jp/tasks/agc024_c) \n\n有一个显然的贪心，就是如果连续的直接加上去，否则重置再加上去。\n\n这里要注意判掉无解，给一组数据大家体会一下`01133`，无解还是比较坑的……\n\n\n\n```C++\n//贴一份贝爷%%%的代码表敬意（已删去大量头文件）\n#include<bits/stdc++.h>//%%%\n#define SZb int\nusing namespace std;/*%%%*///%%%\n#define ll long long\n#define For(i,x,y)  for(SZb i=SZb(x);/*%%%*/i<=SZb(y);/*%%%*/++i)\n#define FOr(i,x,y)  for(SZb i=SZb(x);/*%%%*/i>=SZb(y);/*%%%*/--i)\n#define pi acos(-1) \n#define lf else if\n#define Max(x,y)    ((x)=((x)<(y)?(y):(x)))\n#define Min(x,y)    ((x)=((x)>(y)?(y):(x)))\ntypedef complex<double> E;/*%%%*/\nnamespace _SHENZHEBEI_{\n    static const SZb GYN=2333333;/*%%%*/\n    char SZB[GYN],*S=SZB,*T=SZB;/*%%%*/\n    inline char gc(){   if (S==T){  T=(S=SZB)+fread(SZB,1,GYN,stdin);/*%%%*/ if (S==T) return '\\n';/*%%%*/  }   return *S++;/*%%%*/    }\n    inline ll read(){    ll x=0,g=1;/*%%%*/ char ch=gc();/*%%%*/   for (;/*%%%*/!isdigit(ch);/*%%%*/ch=gc()) if (ch=='-') g=-1;/*%%%*/  for (;/*%%%*/isdigit(ch);/*%%%*/ch=gc())  x=x*10-48+ch;/*%%%*/   return x*g;/*%%%*/ }\n    inline void write(ll x){    if (x<0) putchar('-'),x=-x;/*%%%*/  if (x>=10)   write(x/10);/*%%%*/    putchar(x%10+'0');/*%%%*/  }\n\tvoid writeln(ll x){write(x);/*%%%*/puts(\"\");/*%%%*/}\n}using namespace _SHENZHEBEI_;/*%%%*/\nconst ll N=200010;/*%%%*/\nll SZBorz[N],del[N],q[N],cur[N],SzB,answ,_sZb,n,Szb_=0;/*%%%*/\nSZb main(){\n\tn=read();/*%%%*/\n\tFor(i,1,n)SZBorz[i]=read();/*%%%*/\n\tFor(i,1,n)if (i-SZBorz[i]<=0)return puts(\"-1\"),0;/*%%%*/\n\tFOr(i,n,1){\n\t\tfor(;/*%%%*/(Szb_<_sZb)&&(q[Szb_+1]>=i);/*%%%*/++Szb_);/*%%%*/\n\t\tfor(;/*%%%*/_sZb&&(q[_sZb]>=i);/*%%%*/--_sZb);/*%%%*/\n//\t\tFor(j,1,_sZb)write(q[j]),putchar('\t');/*%%%*/puts(\"\");/*%%%*/\n\t\tMin(Szb_,_sZb);/*%%%*/\n\t\tif ((Szb_<_sZb)&&Szb_+1<cur[i])return puts(\"-1\"),0;/*%%%*/\n\t\tif (!SZBorz[i]){if (_sZb)return writeln(-1),0;/*%%%*/}\n\t\tlf (!_sZb||(q[_sZb]!=i-SZBorz[i])){q[++_sZb]=i-SZBorz[i];/*%%%*/del[i-SZBorz[i]]++;/*%%%*/++SzB;/*%%%*/\n\t\t\t\t\t\t\t\t\tMax(cur[i-SZBorz[i]],_sZb);/*%%%*/}\n\t\tSzB-=del[i];/*%%%*/\t\tansw+=SzB;/*%%%*/\n\t}writeln(answ);/*%%%*/\n}\n```\n\n正常版请查看[Link](https://agc024.contest.atcoder.jp/submissions/2539648)\n\n\n\n### [D - Isomorphism Freak](https://agc024.contest.atcoder.jp/tasks/agc024_d) \n\n​\t容易发现第一个答案是直径的一半（允许微小的偏差）。\n\n​\t那么第二个答案是多少呢?\n\n分两种情况讨论\n\n​\t**如果直径的中间是一条边。**\n\n​\t因为要使得同构，我们要使得每一层都一样。\n\n![举例1.png](举例1.png)\n\n​\t看上面这个图，黑色是原来的树，中间那一条是直径的中央。\n\n​\t我们发现，红色是要新加的。那么叶子是什么呢?\n\n​\t把树分层，第一个是第一层，答案是\t$\\large \\prod _{i=1}^{maxdeep} maxdeg(j|deep[j]=i)$\n\n​\t这个直接dfs即可。\n\n​\t**如果直径是一个点呢**\n\n​\t首先以点为重心直接遍历一遍，是必要的。\n\n​\t但是有可能在加了一个点之后直径长度会加一……\n\n​\t因此你只需要遍历所有相邻的边，然后同上面的情况即可。\n\n​\t然后我以为n是1e5范围的……\n\n\n\nn比较小，所以最是$2^_{50}$数量级的（允许小范围的偏差），不会爆$long long$\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\nconst int inf = 0x3f3f3f3f,oo = inf;\n#define pi 3.14159265358979323846\n#define IL inline\n#define RG register\n#define rep(i,a,b) for(RG int i=(a);i<(b);++i)\n#define Rep(i,a,b) for(RG int i=(a);i<=(b);++i)\n#define Dep(i,a,b) for(RG int i=(a);i>=(b);--i)\n#define pc putchar\n#define gc getchar\nIL ll read(){\n    RG ll x=0;char f=0;RG char c=gc();\n    for(;!isdigit(c);c=gc())f|=(c=='-');\n    for(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n    return f?-x:x;\n}\nIL double readdb(){\n    RG double x=0,p=0.1;RG char f=0,c=gc();\n    for(;!isdigit(c);c=gc())f|=(c=='-');\n    for(;isdigit(c);c=gc())x=x*10+(c^48);\n    if(c=='.')for(c=gc();isdigit(c);c=gc(),p/=10)x=x+(c^48)*p;\n    return f?-x:x;\n}\nIL void write(ll x){if(x<0)x=-x,pc('-');if(x>=10)write(x/10);pc(x%10+'0');}\nIL void writeln(ll x){write(x);puts(\"\");}\nIL void writeln(ll x,char c,ll y){write(x);pc(c);writeln(y);}\nIL void writeln(ll x,char c,ll y,char d,ll z){write(x);pc(c);write(y);pc(d);writeln(z);}\n#define debug(x) printf(#x\" = %d\\n\",x);\n#define rd() read()\n#define rdb() readdb()\n#define mem(x,v) memset(x,v,sizeof(x))\n#define pb push_back\n#define mp make_pair\n#define sqr(x) ((x)*(x))\n#define lowbit(x) ((x)&(-(x)))\n#define fin(x) freopen(#x\".in\",\"r\",stdin)\n#define fout(x) freopen(#x\".out\",\"w\",stdout)\n#define y1 ____y1\n#define hash __hash\n#define union _union\n#define int ll\nll Ans = 0;\nint n;\nvector<int> edge[105];\nint ans[105],fa[105],deep[105];\nvoid dfs(int u){\n\tans[deep[u]] = max(ans[deep[u]],(ll)edge[u].size()-1);\n\tfor(unsigned i=0;i<edge[u].size();++i){\n\t\tint v = edge[u][i];\n\t\tif(v == fa[u]) continue;\n\t\tfa[v] = u;\n\t\tdeep[v] = deep[u] + 1;\n\t\tdfs(v);\n\t}\n}\nvoid solve(int u,int v){\n\t//u -> v这条边\n\tmem(ans,0);\n\tdeep[u]=1;fa[u]=v;dfs(u);\n\tdeep[v]=1;fa[v]=u;dfs(v);\n\tint answ = 1;\n\tfor(int i=1;i<=n;i++){\n\t\tif(ans[i]) answ = answ * ans[i];\n\t}\n\tAns = min(Ans,answ*2);\n}\nsigned main(){\n\tAns = 1e18;\n\tn = rd();\n\trep(i,1,n){\n\t\tint a = rd(),b = rd();\n\t\tedge[a] . push_back(b);\n\t\tedge[b] . push_back(a);\n\t}\n\tdeep[1] = 1;fa[1]=0;dfs(1);\n\tint u = 1;\n\tRep(i,1,n){\n\t\tif(deep[i] > deep[u]) u = i;\n\t\tfa[i] = 0;\n\t}\n\tdeep[u] = 1;fa[u]=0;dfs(u);\n\tint v = u;\n\tRep(i,1,n){\n\t\tif(deep[i] > deep[v]) v = i;\n\t}\n\tprintf(\"%d \",(deep[v]+1)/2);\n\tif(deep[v] & 1){\n\t\tint need = deep[v] / 2;\n\t\twhile(need--){\n\t\t\tv = fa[v];\n\t\t}\n\t\t//v是中间那个点\n\t\tfor(unsigned i=0;i<edge[v].size();++i){\n\t\t\tsolve(v,edge[v][i]);\n\t\t}\n\t\tmem(ans,0);\n\t\tdeep[v]=1;fa[v]=0;dfs(v);\n\t\tans[1] = edge[v].size();\n\t\tint answ = 1;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tif(ans[i]) answ = answ * ans[i];\n\t\t}\t\n\t\tAns=min(Ans,answ);\n\t}//中间那个是个点\n\telse{\n\t \tint need = deep[v] / 2;\n\t \tu = v;\n\t \twhile(need--){\n\t \t\tv = u;\n\t \t\tu = fa[v];\n\t\t}\n\t\tsolve(u,v);\n\t}//中间那个是一条边 \n\twriteln(Ans);\n\treturn 0;\n}\n```\n\n\n\n\n\nE....先留坑吧，自己太菜。","slug":"AGC024 A-E题解","published":1,"date":"2021-08-28T13:02:49.989Z","updated":"2021-08-28T13:02:49.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvso3260006vfnufknphfy7","content":"<p><a href=\"https://agc024.contest.atcoder.jp\" target=\"_blank\" rel=\"noopener\">比赛链接 </a></p><p>A 题想太慢，B 题看错题目，被 C 题续了好久，D 题看错范围，不会做 E 题，天天被 wzp 吊打。</p><a id=\"more\"></a><h3 id=\"a-fairness\"><a class=\"markdownIt-Anchor\" href=\"#a-fairness\"></a> <a href=\"https://agc024.contest.atcoder.jp/tasks/agc024_a\" target=\"_blank\" rel=\"noopener\">A - Fairness</a></h3><p> 应该还是比较 simple 的。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll a,b,c,k;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    a=rd(),b=rd(),c=rd(),k=rd();</span><br><span class=\"line\">    writeln(!(k&amp;<span class=\"number\">1</span>)?(a-b):(b-a));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"b-backfront\"><a class=\"markdownIt-Anchor\" href=\"#b-backfront\"></a> <a href=\"https://agc024.contest.atcoder.jp/tasks/agc024_b\" target=\"_blank\" rel=\"noopener\">B - Backfront</a></h3><p>​\t显然是一段前缀和一段后缀被使用，相当于用 n 减去最长的连续的一段，比如说 </p><p><code>43125</code> 里面最长的连续一段是 <code>12</code>，或者<code>45</code>,<code>35</code>，而<code>41253</code> 里面最长的连续的一段是 <code>123</code></p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">200005</span>],pos[<span class=\"number\">200005</span>],ans = <span class=\"number\">0</span>,n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[<span class=\"number\">200005</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = rd();</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n) a[i] = rd(),pos[a[i]]=i;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = n<span class=\"number\">-1</span>;</span><br><span class=\"line\">    f[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">2</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos[i] &gt; pos[i<span class=\"number\">-1</span>]) f[i] = f[i<span class=\"number\">-1</span>] + <span class=\"number\">1</span>; <span class=\"keyword\">else</span> f[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        x = <span class=\"built_in\">min</span>(x,n-f[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    writeln(x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"c-sequence-growing-easy\"><a class=\"markdownIt-Anchor\" href=\"#c-sequence-growing-easy\"></a> <a href=\"https://agc024.contest.atcoder.jp/tasks/agc024_c\" target=\"_blank\" rel=\"noopener\">C - Sequence Growing Easy</a></h3><p> 有一个显然的贪心，就是如果连续的直接加上去，否则重置再加上去。</p><p>这里要注意判掉无解，给一组数据大家体会一下 <code>01133</code>，无解还是比较坑的……</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 贴一份贝爷 %%% 的代码表敬意（已删去大量头文件）</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;//%%%</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZb int</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;<span class=\"comment\">/*%%%*/</span><span class=\"comment\">//%%%</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i,x,y)  for(SZb i=SZb(x);<span class=\"comment\">/*%%%*/</span>i&lt;=SZb(y);<span class=\"comment\">/*%%%*/</span>++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOr(i,x,y)  for(SZb i=SZb(x);<span class=\"comment\">/*%%%*/</span>i&gt;=SZb(y);<span class=\"comment\">/*%%%*/</span>--i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pi acos(-1) </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lf <span class=\"meta-keyword\">else</span> <span class=\"meta-keyword\">if</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Max(x,y)    ((x)=((x)&lt;(y)?(y):(x)))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Min(x,y)    ((x)=((x)&gt;(y)?(y):(x)))</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; E;<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> _SHENZHEBEI_&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> SZb GYN=<span class=\"number\">2333333</span>;<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> SZB[GYN],*S=SZB,*T=SZB;<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">char</span> <span class=\"title\">gc</span><span class=\"params\">()</span></span>&#123;   <span class=\"keyword\">if</span> (S==T)&#123;  T=(S=SZB)+fread(SZB,<span class=\"number\">1</span>,GYN,<span class=\"built_in\">stdin</span>);<span class=\"comment\">/*%%%*/</span> <span class=\"keyword\">if</span> (S==T) <span class=\"keyword\">return</span> <span class=\"string\">'\\n'</span>;<span class=\"comment\">/*%%%*/</span>  &#125;   <span class=\"keyword\">return</span> *S++;<span class=\"comment\">/*%%%*/</span>    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;    ll x=<span class=\"number\">0</span>,g=<span class=\"number\">1</span>;<span class=\"comment\">/*%%%*/</span> <span class=\"keyword\">char</span> ch=gc();<span class=\"comment\">/*%%%*/</span>   <span class=\"keyword\">for</span> (;<span class=\"comment\">/*%%%*/</span>!<span class=\"built_in\">isdigit</span>(ch);<span class=\"comment\">/*%%%*/</span>ch=gc()) <span class=\"keyword\">if</span> (ch==<span class=\"string\">'-'</span>) g=<span class=\"number\">-1</span>;<span class=\"comment\">/*%%%*/</span>  <span class=\"keyword\">for</span> (;<span class=\"comment\">/*%%%*/</span><span class=\"built_in\">isdigit</span>(ch);<span class=\"comment\">/*%%%*/</span>ch=gc())  x=x*<span class=\"number\">10</span><span class=\"number\">-48</span>+ch;<span class=\"comment\">/*%%%*/</span>   <span class=\"keyword\">return</span> x*g;<span class=\"comment\">/*%%%*/</span> &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ll x)</span></span>&#123;    <span class=\"keyword\">if</span> (x&lt;<span class=\"number\">0</span>) <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>),x=-x;<span class=\"comment\">/*%%%*/</span>  <span class=\"keyword\">if</span> (x&gt;=<span class=\"number\">10</span>)   <span class=\"built_in\">write</span>(x/<span class=\"number\">10</span>);<span class=\"comment\">/*%%%*/</span>    <span class=\"built_in\">putchar</span>(x%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);<span class=\"comment\">/*%%%*/</span>  &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"comment\">/*%%%*/</span><span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);<span class=\"comment\">/*%%%*/</span>&#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> _SHENZHEBEI_;<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ll N=<span class=\"number\">200010</span>;<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">ll SZBorz[N],del[N],q[N],cur[N],SzB,answ,_sZb,n,Szb_=<span class=\"number\">0</span>;<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\"><span class=\"function\">SZb <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n=<span class=\"built_in\">read</span>();<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">    For(i,<span class=\"number\">1</span>,n)SZBorz[i]=<span class=\"built_in\">read</span>();<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">    For(i,<span class=\"number\">1</span>,n)<span class=\"keyword\">if</span> (i-SZBorz[i]&lt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"-1\"</span>),<span class=\"number\">0</span>;<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">    FOr(i,n,<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;<span class=\"comment\">/*%%%*/</span>(Szb_&lt;_sZb)&amp;&amp;(q[Szb_+<span class=\"number\">1</span>]&gt;=i);<span class=\"comment\">/*%%%*/</span>++Szb_);<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;<span class=\"comment\">/*%%%*/</span>_sZb&amp;&amp;(q[_sZb]&gt;=i);<span class=\"comment\">/*%%%*/</span>--_sZb);<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tFor(j,1,_sZb)write(q[j]),putchar('\t');/*%%%*/puts(\"\");/*%%%*/</span></span><br><span class=\"line\">        Min(Szb_,_sZb);<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((Szb_&lt;_sZb)&amp;&amp;Szb_+<span class=\"number\">1</span>&lt;cur[i])<span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"-1\"</span>),<span class=\"number\">0</span>;<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!SZBorz[i])&#123;<span class=\"keyword\">if</span> (_sZb)<span class=\"keyword\">return</span> writeln(<span class=\"number\">-1</span>),<span class=\"number\">0</span>;<span class=\"comment\">/*%%%*/</span>&#125;</span><br><span class=\"line\">        lf (!_sZb||(q[_sZb]!=i-SZBorz[i]))&#123;q[++_sZb]=i-SZBorz[i];<span class=\"comment\">/*%%%*/</span>del[i-SZBorz[i]]++;<span class=\"comment\">/*%%%*/</span>++SzB;<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">                                    Max(cur[i-SZBorz[i]],_sZb);<span class=\"comment\">/*%%%*/</span>&#125;</span><br><span class=\"line\">        SzB-=del[i];<span class=\"comment\">/*%%%*/</span>\t\tansw+=SzB;<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">    &#125;writeln(answ);<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p> 正常版请查看 <a href=\"https://agc024.contest.atcoder.jp/submissions/2539648\" target=\"_blank\" rel=\"noopener\">Link</a></p><h3 id=\"d-isomorphism-freak\"><a class=\"markdownIt-Anchor\" href=\"#d-isomorphism-freak\"></a> <a href=\"https://agc024.contest.atcoder.jp/tasks/agc024_d\" target=\"_blank\" rel=\"noopener\">D - Isomorphism Freak</a></h3><p>​\t容易发现第一个答案是直径的一半（允许微小的偏差）。</p><p>​\t那么第二个答案是多少呢?</p><p> 分两种情况讨论 </p><p>​\t<strong> 如果直径的中间是一条边。</strong></p><p>​\t因为要使得同构，我们要使得每一层都一样。</p><p><img src=\"%E4%B8%BE%E4%BE%8B1.png\" alt=\"举例 1.png\"></p><p>​\t看上面这个图，黑色是原来的树，中间那一条是直径的中央。</p><p>​\t我们发现，红色是要新加的。那么叶子是什么呢?</p><p>​\t把树分层，第一个是第一层，答案是\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mstyle mathsize=\"1.2em\"><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi>d</mi><mi>e</mi><mi>e</mi><mi>p</mi></mrow></msubsup><mi>m</mi><mi>a</mi><mi>x</mi><mi>d</mi><mi>e</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>j</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mi>e</mi><mi>e</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\large \\prod _{i=1}^{maxdeep} maxdeg(j|deep[j]=i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.529964em;vertical-align:-.356812em\"></span><span class=\"mop sizing reset-size6 size7\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.9776266666666666em\"><span style=\"top:-2.5026566666666663em;margin-left:0;margin-right:.04166666666666667em\"><span class=\"pstrut\" style=\"height:2.8em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.3146666666666667em;margin-right:.04166666666666667em\"><span class=\"pstrut\" style=\"height:2.8em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">e</span><span class=\"mord mathdefault mtight\">e</span><span class=\"mord mathdefault mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29734333333333335em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault sizing reset-size6 size7\">m</span><span class=\"mord mathdefault sizing reset-size6 size7\">a</span><span class=\"mord mathdefault sizing reset-size6 size7\">x</span><span class=\"mord mathdefault sizing reset-size6 size7\">d</span><span class=\"mord mathdefault sizing reset-size6 size7\">e</span><span class=\"mord mathdefault sizing reset-size6 size7\" style=\"margin-right:.03588em\">g</span><span class=\"mopen sizing reset-size6 size7\">(</span><span class=\"mord mathdefault sizing reset-size6 size7\" style=\"margin-right:.05724em\">j</span><span class=\"mord sizing reset-size6 size7\">∣</span><span class=\"mord mathdefault sizing reset-size6 size7\">d</span><span class=\"mord mathdefault sizing reset-size6 size7\">e</span><span class=\"mord mathdefault sizing reset-size6 size7\">e</span><span class=\"mord mathdefault sizing reset-size6 size7\">p</span><span class=\"mopen sizing reset-size6 size7\">[</span><span class=\"mord mathdefault sizing reset-size6 size7\" style=\"margin-right:.05724em\">j</span><span class=\"mclose sizing reset-size6 size7\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel sizing reset-size6 size7\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-.3em\"></span><span class=\"mord mathdefault sizing reset-size6 size7\">i</span><span class=\"mclose sizing reset-size6 size7\">)</span></span></span></span></p><p>​\t这个直接 dfs 即可。</p><p>​\t<strong>如果直径是一个点呢 </strong></p><p>​\t首先以点为重心直接遍历一遍，是必要的。</p><p>​\t但是有可能在加了一个点之后直径长度会加一……</p><p>​\t因此你只需要遍历所有相邻的边，然后同上面的情况即可。</p><p>​\t然后我以为 n 是 1e5 范围的……</p><p>n 比较小，所以最是<span class=\"katex-error\" title=\"ParseError: KaTeX parse error: Expected group after &#039;^&#039; at position 2: 2^̲_{50}\">2^_{50}</span> 数量级的（允许小范围的偏差），不会爆<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>n</mi><mi>g</mi><mi>l</mi><mi>o</mi><mi>n</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">long long</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span></span></span></span></p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x3f3f3f3f</span>,oo = inf;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pi 3.14159265358979323846</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IL inline</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RG register</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(RG int i=(a);i&lt;(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Rep(i,a,b) for(RG int i=(a);i&lt;=(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Dep(i,a,b) for(RG int i=(a);i&gt;=(b);--i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc getchar</span></span><br><span class=\"line\"><span class=\"function\">IL ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RG ll x=<span class=\"number\">0</span>;<span class=\"keyword\">char</span> f=<span class=\"number\">0</span>;RG <span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())f|=(c==<span class=\"string\">'-'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f?-x:x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"keyword\">double</span> <span class=\"title\">readdb</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RG <span class=\"keyword\">double</span> x=<span class=\"number\">0</span>,p=<span class=\"number\">0.1</span>;RG <span class=\"keyword\">char</span> f=<span class=\"number\">0</span>,c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())f|=(c==<span class=\"string\">'-'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=x*<span class=\"number\">10</span>+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c==<span class=\"string\">'.'</span>)<span class=\"keyword\">for</span>(c=gc();<span class=\"built_in\">isdigit</span>(c);c=gc(),p/=<span class=\"number\">10</span>)x=x+(c^<span class=\"number\">48</span>)*p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f?-x:x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)x=-x,pc(<span class=\"string\">'-'</span>);<span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">10</span>)<span class=\"built_in\">write</span>(x/<span class=\"number\">10</span>);pc(x%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x,<span class=\"keyword\">char</span> c,ll y)</span></span>&#123;<span class=\"built_in\">write</span>(x);pc(c);writeln(y);&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x,<span class=\"keyword\">char</span> c,ll y,<span class=\"keyword\">char</span> d,ll z)</span></span>&#123;<span class=\"built_in\">write</span>(x);pc(c);<span class=\"built_in\">write</span>(y);pc(d);writeln(z);&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) printf(#x<span class=\"meta-string\">\" = %d\\n\"</span>,x);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rd() read()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rdb() readdb()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mp make_pair</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sqr(x) ((x)*(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fin(x) freopen(#x<span class=\"meta-string\">\".in\"</span>,<span class=\"meta-string\">\"r\"</span>,stdin)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fout(x) freopen(#x<span class=\"meta-string\">\".out\"</span>,<span class=\"meta-string\">\"w\"</span>,stdout)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y1 ____y1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> hash __hash</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> union _union</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int ll</span></span><br><span class=\"line\">ll Ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; edge[<span class=\"number\">105</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans[<span class=\"number\">105</span>],fa[<span class=\"number\">105</span>],deep[<span class=\"number\">105</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">    ans[deep[u]] = <span class=\"built_in\">max</span>(ans[deep[u]],(ll)edge[u].<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>;i&lt;edge[u].<span class=\"built_in\">size</span>();++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = edge[u][i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == fa[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        fa[v] = u;</span><br><span class=\"line\">        deep[v] = deep[u] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        dfs(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//u -&gt; v 这条边</span></span><br><span class=\"line\">    mem(ans,<span class=\"number\">0</span>);</span><br><span class=\"line\">    deep[u]=<span class=\"number\">1</span>;fa[u]=v;dfs(u);</span><br><span class=\"line\">    deep[v]=<span class=\"number\">1</span>;fa[v]=u;dfs(v);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> answ = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[i]) answ = answ * ans[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Ans = <span class=\"built_in\">min</span>(Ans,answ*<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Ans = <span class=\"number\">1e18</span>;</span><br><span class=\"line\">    n = rd();</span><br><span class=\"line\">    rep(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = rd(),b = rd();</span><br><span class=\"line\">        edge[a] . push_back(b);</span><br><span class=\"line\">        edge[b] . push_back(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deep[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;fa[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;dfs(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u = <span class=\"number\">1</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(deep[i] &gt; deep[u]) u = i;</span><br><span class=\"line\">        fa[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deep[u] = <span class=\"number\">1</span>;fa[u]=<span class=\"number\">0</span>;dfs(u);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v = u;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(deep[i] &gt; deep[v]) v = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,(deep[v]+<span class=\"number\">1</span>)/<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(deep[v] &amp; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> need = deep[v] / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(need--)&#123;</span><br><span class=\"line\">            v = fa[v];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//v 是中间那个点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>;i&lt;edge[v].<span class=\"built_in\">size</span>();++i)&#123;</span><br><span class=\"line\">            solve(v,edge[v][i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mem(ans,<span class=\"number\">0</span>);</span><br><span class=\"line\">        deep[v]=<span class=\"number\">1</span>;fa[v]=<span class=\"number\">0</span>;dfs(v);</span><br><span class=\"line\">        ans[<span class=\"number\">1</span>] = edge[v].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> answ = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ans[i]) answ = answ * ans[i];</span><br><span class=\"line\">        &#125;\t</span><br><span class=\"line\">        Ans=<span class=\"built_in\">min</span>(Ans,answ);</span><br><span class=\"line\">    &#125;<span class=\"comment\">// 中间那个是个点</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     \t<span class=\"keyword\">int</span> need = deep[v] / <span class=\"number\">2</span>;</span><br><span class=\"line\">     \tu = v;</span><br><span class=\"line\">     \t<span class=\"keyword\">while</span>(need--)&#123;</span><br><span class=\"line\">     \t\tv = u;</span><br><span class=\"line\">     \t\tu = fa[v];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        solve(u,v);</span><br><span class=\"line\">    &#125;<span class=\"comment\">// 中间那个是一条边 </span></span><br><span class=\"line\">    writeln(Ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>E…先留坑吧，自己太菜。</p>","site":{"data":{}},"excerpt":"<p><a href=\"https://agc024.contest.atcoder.jp\" target=\"_blank\" rel=\"noopener\">比赛链接</a></p><p>A题想太慢，B题看错题目，被C题续了好久，D题看错范围，不会做E题，天天被wzp吊打。</p>","more":"<h3 id=\"a-fairness\"><a class=\"markdownIt-Anchor\" href=\"#a-fairness\"></a> <a href=\"https://agc024.contest.atcoder.jp/tasks/agc024_a\" target=\"_blank\" rel=\"noopener\">A - Fairness</a></h3><p>应该还是比较simple的。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll a,b,c,k;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    a=rd(),b=rd(),c=rd(),k=rd();</span><br><span class=\"line\">    writeln(!(k&amp;<span class=\"number\">1</span>)?(a-b):(b-a));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"b-backfront\"><a class=\"markdownIt-Anchor\" href=\"#b-backfront\"></a> <a href=\"https://agc024.contest.atcoder.jp/tasks/agc024_b\" target=\"_blank\" rel=\"noopener\">B - Backfront</a></h3><p>​\t显然是一段前缀和一段后缀被使用，相当于用n减去最长的连续的一段，比如说</p><p><code>43125</code>里面最长的连续一段是<code>12</code>，或者<code>45</code>,<code>35</code>，而<code>41253</code>里面最长的连续的一段是<code>123</code></p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">200005</span>],pos[<span class=\"number\">200005</span>],ans = <span class=\"number\">0</span>,n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[<span class=\"number\">200005</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = rd();</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n) a[i] = rd(),pos[a[i]]=i;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = n<span class=\"number\">-1</span>;</span><br><span class=\"line\">    f[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">2</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos[i] &gt; pos[i<span class=\"number\">-1</span>]) f[i] = f[i<span class=\"number\">-1</span>] + <span class=\"number\">1</span>; <span class=\"keyword\">else</span> f[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        x = <span class=\"built_in\">min</span>(x,n-f[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    writeln(x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"c-sequence-growing-easy\"><a class=\"markdownIt-Anchor\" href=\"#c-sequence-growing-easy\"></a> <a href=\"https://agc024.contest.atcoder.jp/tasks/agc024_c\" target=\"_blank\" rel=\"noopener\">C - Sequence Growing Easy</a></h3><p>有一个显然的贪心，就是如果连续的直接加上去，否则重置再加上去。</p><p>这里要注意判掉无解，给一组数据大家体会一下<code>01133</code>，无解还是比较坑的……</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//贴一份贝爷%%%的代码表敬意（已删去大量头文件）</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;//%%%</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZb int</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;<span class=\"comment\">/*%%%*/</span><span class=\"comment\">//%%%</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i,x,y)  for(SZb i=SZb(x);<span class=\"comment\">/*%%%*/</span>i&lt;=SZb(y);<span class=\"comment\">/*%%%*/</span>++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOr(i,x,y)  for(SZb i=SZb(x);<span class=\"comment\">/*%%%*/</span>i&gt;=SZb(y);<span class=\"comment\">/*%%%*/</span>--i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pi acos(-1) </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lf <span class=\"meta-keyword\">else</span> <span class=\"meta-keyword\">if</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Max(x,y)    ((x)=((x)&lt;(y)?(y):(x)))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Min(x,y)    ((x)=((x)&gt;(y)?(y):(x)))</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; E;<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> _SHENZHEBEI_&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> SZb GYN=<span class=\"number\">2333333</span>;<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> SZB[GYN],*S=SZB,*T=SZB;<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">char</span> <span class=\"title\">gc</span><span class=\"params\">()</span></span>&#123;   <span class=\"keyword\">if</span> (S==T)&#123;  T=(S=SZB)+fread(SZB,<span class=\"number\">1</span>,GYN,<span class=\"built_in\">stdin</span>);<span class=\"comment\">/*%%%*/</span> <span class=\"keyword\">if</span> (S==T) <span class=\"keyword\">return</span> <span class=\"string\">'\\n'</span>;<span class=\"comment\">/*%%%*/</span>  &#125;   <span class=\"keyword\">return</span> *S++;<span class=\"comment\">/*%%%*/</span>    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;    ll x=<span class=\"number\">0</span>,g=<span class=\"number\">1</span>;<span class=\"comment\">/*%%%*/</span> <span class=\"keyword\">char</span> ch=gc();<span class=\"comment\">/*%%%*/</span>   <span class=\"keyword\">for</span> (;<span class=\"comment\">/*%%%*/</span>!<span class=\"built_in\">isdigit</span>(ch);<span class=\"comment\">/*%%%*/</span>ch=gc()) <span class=\"keyword\">if</span> (ch==<span class=\"string\">'-'</span>) g=<span class=\"number\">-1</span>;<span class=\"comment\">/*%%%*/</span>  <span class=\"keyword\">for</span> (;<span class=\"comment\">/*%%%*/</span><span class=\"built_in\">isdigit</span>(ch);<span class=\"comment\">/*%%%*/</span>ch=gc())  x=x*<span class=\"number\">10</span><span class=\"number\">-48</span>+ch;<span class=\"comment\">/*%%%*/</span>   <span class=\"keyword\">return</span> x*g;<span class=\"comment\">/*%%%*/</span> &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ll x)</span></span>&#123;    <span class=\"keyword\">if</span> (x&lt;<span class=\"number\">0</span>) <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>),x=-x;<span class=\"comment\">/*%%%*/</span>  <span class=\"keyword\">if</span> (x&gt;=<span class=\"number\">10</span>)   <span class=\"built_in\">write</span>(x/<span class=\"number\">10</span>);<span class=\"comment\">/*%%%*/</span>    <span class=\"built_in\">putchar</span>(x%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);<span class=\"comment\">/*%%%*/</span>  &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"comment\">/*%%%*/</span><span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);<span class=\"comment\">/*%%%*/</span>&#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> _SHENZHEBEI_;<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ll N=<span class=\"number\">200010</span>;<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">ll SZBorz[N],del[N],q[N],cur[N],SzB,answ,_sZb,n,Szb_=<span class=\"number\">0</span>;<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\"><span class=\"function\">SZb <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n=<span class=\"built_in\">read</span>();<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">    For(i,<span class=\"number\">1</span>,n)SZBorz[i]=<span class=\"built_in\">read</span>();<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">    For(i,<span class=\"number\">1</span>,n)<span class=\"keyword\">if</span> (i-SZBorz[i]&lt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"-1\"</span>),<span class=\"number\">0</span>;<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">    FOr(i,n,<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;<span class=\"comment\">/*%%%*/</span>(Szb_&lt;_sZb)&amp;&amp;(q[Szb_+<span class=\"number\">1</span>]&gt;=i);<span class=\"comment\">/*%%%*/</span>++Szb_);<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;<span class=\"comment\">/*%%%*/</span>_sZb&amp;&amp;(q[_sZb]&gt;=i);<span class=\"comment\">/*%%%*/</span>--_sZb);<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tFor(j,1,_sZb)write(q[j]),putchar('\t');/*%%%*/puts(\"\");/*%%%*/</span></span><br><span class=\"line\">        Min(Szb_,_sZb);<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((Szb_&lt;_sZb)&amp;&amp;Szb_+<span class=\"number\">1</span>&lt;cur[i])<span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"-1\"</span>),<span class=\"number\">0</span>;<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!SZBorz[i])&#123;<span class=\"keyword\">if</span> (_sZb)<span class=\"keyword\">return</span> writeln(<span class=\"number\">-1</span>),<span class=\"number\">0</span>;<span class=\"comment\">/*%%%*/</span>&#125;</span><br><span class=\"line\">        lf (!_sZb||(q[_sZb]!=i-SZBorz[i]))&#123;q[++_sZb]=i-SZBorz[i];<span class=\"comment\">/*%%%*/</span>del[i-SZBorz[i]]++;<span class=\"comment\">/*%%%*/</span>++SzB;<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">                                    Max(cur[i-SZBorz[i]],_sZb);<span class=\"comment\">/*%%%*/</span>&#125;</span><br><span class=\"line\">        SzB-=del[i];<span class=\"comment\">/*%%%*/</span>\t\tansw+=SzB;<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">    &#125;writeln(answ);<span class=\"comment\">/*%%%*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>正常版请查看<a href=\"https://agc024.contest.atcoder.jp/submissions/2539648\" target=\"_blank\" rel=\"noopener\">Link</a></p><h3 id=\"d-isomorphism-freak\"><a class=\"markdownIt-Anchor\" href=\"#d-isomorphism-freak\"></a> <a href=\"https://agc024.contest.atcoder.jp/tasks/agc024_d\" target=\"_blank\" rel=\"noopener\">D - Isomorphism Freak</a></h3><p>​\t容易发现第一个答案是直径的一半（允许微小的偏差）。</p><p>​\t那么第二个答案是多少呢?</p><p>分两种情况讨论</p><p>​\t<strong>如果直径的中间是一条边。</strong></p><p>​\t因为要使得同构，我们要使得每一层都一样。</p><p><img src=\"%E4%B8%BE%E4%BE%8B1.png\" alt=\"举例1.png\"></p><p>​\t看上面这个图，黑色是原来的树，中间那一条是直径的中央。</p><p>​\t我们发现，红色是要新加的。那么叶子是什么呢?</p><p>​\t把树分层，第一个是第一层，答案是\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mstyle mathsize=\"1.2em\"><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi>d</mi><mi>e</mi><mi>e</mi><mi>p</mi></mrow></msubsup><mi>m</mi><mi>a</mi><mi>x</mi><mi>d</mi><mi>e</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>j</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mi>e</mi><mi>e</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\large \\prod _{i=1}^{maxdeep} maxdeg(j|deep[j]=i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.529964em;vertical-align:-.356812em\"></span><span class=\"mop sizing reset-size6 size7\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.9776266666666666em\"><span style=\"top:-2.5026566666666663em;margin-left:0;margin-right:.04166666666666667em\"><span class=\"pstrut\" style=\"height:2.8em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.3146666666666667em;margin-right:.04166666666666667em\"><span class=\"pstrut\" style=\"height:2.8em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">e</span><span class=\"mord mathdefault mtight\">e</span><span class=\"mord mathdefault mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29734333333333335em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault sizing reset-size6 size7\">m</span><span class=\"mord mathdefault sizing reset-size6 size7\">a</span><span class=\"mord mathdefault sizing reset-size6 size7\">x</span><span class=\"mord mathdefault sizing reset-size6 size7\">d</span><span class=\"mord mathdefault sizing reset-size6 size7\">e</span><span class=\"mord mathdefault sizing reset-size6 size7\" style=\"margin-right:.03588em\">g</span><span class=\"mopen sizing reset-size6 size7\">(</span><span class=\"mord mathdefault sizing reset-size6 size7\" style=\"margin-right:.05724em\">j</span><span class=\"mord sizing reset-size6 size7\">∣</span><span class=\"mord mathdefault sizing reset-size6 size7\">d</span><span class=\"mord mathdefault sizing reset-size6 size7\">e</span><span class=\"mord mathdefault sizing reset-size6 size7\">e</span><span class=\"mord mathdefault sizing reset-size6 size7\">p</span><span class=\"mopen sizing reset-size6 size7\">[</span><span class=\"mord mathdefault sizing reset-size6 size7\" style=\"margin-right:.05724em\">j</span><span class=\"mclose sizing reset-size6 size7\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel sizing reset-size6 size7\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-.3em\"></span><span class=\"mord mathdefault sizing reset-size6 size7\">i</span><span class=\"mclose sizing reset-size6 size7\">)</span></span></span></span></p><p>​\t这个直接dfs即可。</p><p>​\t<strong>如果直径是一个点呢</strong></p><p>​\t首先以点为重心直接遍历一遍，是必要的。</p><p>​\t但是有可能在加了一个点之后直径长度会加一……</p><p>​\t因此你只需要遍历所有相邻的边，然后同上面的情况即可。</p><p>​\t然后我以为n是1e5范围的……</p><p>n比较小，所以最是<span class=\"katex-error\" title=\"ParseError: KaTeX parse error: Expected group after &#039;^&#039; at position 2: 2^̲_{50}\">2^_{50}</span>数量级的（允许小范围的偏差），不会爆<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>n</mi><mi>g</mi><mi>l</mi><mi>o</mi><mi>n</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">long long</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span></span></span></span></p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x3f3f3f3f</span>,oo = inf;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pi 3.14159265358979323846</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IL inline</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RG register</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(RG int i=(a);i&lt;(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Rep(i,a,b) for(RG int i=(a);i&lt;=(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Dep(i,a,b) for(RG int i=(a);i&gt;=(b);--i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc getchar</span></span><br><span class=\"line\"><span class=\"function\">IL ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RG ll x=<span class=\"number\">0</span>;<span class=\"keyword\">char</span> f=<span class=\"number\">0</span>;RG <span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())f|=(c==<span class=\"string\">'-'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f?-x:x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"keyword\">double</span> <span class=\"title\">readdb</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RG <span class=\"keyword\">double</span> x=<span class=\"number\">0</span>,p=<span class=\"number\">0.1</span>;RG <span class=\"keyword\">char</span> f=<span class=\"number\">0</span>,c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())f|=(c==<span class=\"string\">'-'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=x*<span class=\"number\">10</span>+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c==<span class=\"string\">'.'</span>)<span class=\"keyword\">for</span>(c=gc();<span class=\"built_in\">isdigit</span>(c);c=gc(),p/=<span class=\"number\">10</span>)x=x+(c^<span class=\"number\">48</span>)*p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f?-x:x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)x=-x,pc(<span class=\"string\">'-'</span>);<span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">10</span>)<span class=\"built_in\">write</span>(x/<span class=\"number\">10</span>);pc(x%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x,<span class=\"keyword\">char</span> c,ll y)</span></span>&#123;<span class=\"built_in\">write</span>(x);pc(c);writeln(y);&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x,<span class=\"keyword\">char</span> c,ll y,<span class=\"keyword\">char</span> d,ll z)</span></span>&#123;<span class=\"built_in\">write</span>(x);pc(c);<span class=\"built_in\">write</span>(y);pc(d);writeln(z);&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) printf(#x<span class=\"meta-string\">\" = %d\\n\"</span>,x);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rd() read()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rdb() readdb()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mp make_pair</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sqr(x) ((x)*(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fin(x) freopen(#x<span class=\"meta-string\">\".in\"</span>,<span class=\"meta-string\">\"r\"</span>,stdin)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fout(x) freopen(#x<span class=\"meta-string\">\".out\"</span>,<span class=\"meta-string\">\"w\"</span>,stdout)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y1 ____y1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> hash __hash</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> union _union</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int ll</span></span><br><span class=\"line\">ll Ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; edge[<span class=\"number\">105</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans[<span class=\"number\">105</span>],fa[<span class=\"number\">105</span>],deep[<span class=\"number\">105</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">    ans[deep[u]] = <span class=\"built_in\">max</span>(ans[deep[u]],(ll)edge[u].<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>;i&lt;edge[u].<span class=\"built_in\">size</span>();++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = edge[u][i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == fa[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        fa[v] = u;</span><br><span class=\"line\">        deep[v] = deep[u] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        dfs(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//u -&gt; v这条边</span></span><br><span class=\"line\">    mem(ans,<span class=\"number\">0</span>);</span><br><span class=\"line\">    deep[u]=<span class=\"number\">1</span>;fa[u]=v;dfs(u);</span><br><span class=\"line\">    deep[v]=<span class=\"number\">1</span>;fa[v]=u;dfs(v);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> answ = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[i]) answ = answ * ans[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Ans = <span class=\"built_in\">min</span>(Ans,answ*<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Ans = <span class=\"number\">1e18</span>;</span><br><span class=\"line\">    n = rd();</span><br><span class=\"line\">    rep(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = rd(),b = rd();</span><br><span class=\"line\">        edge[a] . push_back(b);</span><br><span class=\"line\">        edge[b] . push_back(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deep[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;fa[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;dfs(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u = <span class=\"number\">1</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(deep[i] &gt; deep[u]) u = i;</span><br><span class=\"line\">        fa[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deep[u] = <span class=\"number\">1</span>;fa[u]=<span class=\"number\">0</span>;dfs(u);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v = u;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(deep[i] &gt; deep[v]) v = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,(deep[v]+<span class=\"number\">1</span>)/<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(deep[v] &amp; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> need = deep[v] / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(need--)&#123;</span><br><span class=\"line\">            v = fa[v];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//v是中间那个点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>;i&lt;edge[v].<span class=\"built_in\">size</span>();++i)&#123;</span><br><span class=\"line\">            solve(v,edge[v][i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mem(ans,<span class=\"number\">0</span>);</span><br><span class=\"line\">        deep[v]=<span class=\"number\">1</span>;fa[v]=<span class=\"number\">0</span>;dfs(v);</span><br><span class=\"line\">        ans[<span class=\"number\">1</span>] = edge[v].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> answ = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ans[i]) answ = answ * ans[i];</span><br><span class=\"line\">        &#125;\t</span><br><span class=\"line\">        Ans=<span class=\"built_in\">min</span>(Ans,answ);</span><br><span class=\"line\">    &#125;<span class=\"comment\">//中间那个是个点</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     \t<span class=\"keyword\">int</span> need = deep[v] / <span class=\"number\">2</span>;</span><br><span class=\"line\">     \tu = v;</span><br><span class=\"line\">     \t<span class=\"keyword\">while</span>(need--)&#123;</span><br><span class=\"line\">     \t\tv = u;</span><br><span class=\"line\">     \t\tu = fa[v];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        solve(u,v);</span><br><span class=\"line\">    &#125;<span class=\"comment\">//中间那个是一条边 </span></span><br><span class=\"line\">    writeln(Ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>E…先留坑吧，自己太菜。</p>"},{"title":"BZOJ1040 [ZJOI2008] 骑士","_content":"\n#### 题意\n\n​\t给你一个由许多个(树加上一条边（可能叫环套树）)组成的类似森林的东西。然后你可以选择一些点，要求这些点两两之间没有连边$N <= 1000000$\n\n<!--more-->\n\n#### 题解\n\n​\t我们考虑如果是树怎么做？\n\n​\t显然这是一个无向的，先随便找一个root，然后我们可以用树形DP，每一棵树单独处理\n\n​\t用$f[i]$表示第i个点选，$g[i]$表示第i个点不选，这样能得到的最大价值。\n\n​\t大家应该都会吧。\n\n​\t那么有环呢？\n\n​\t我们可以一遍DFS找出环，记录环上多出来的一条边。\n\n​\t我们强制断开这条边，对于这条边两端的两个点强行跑一遍DP，得到两个$g[i]$中大的一个，这就是这个图的答案。\n\n​\t为什么？显然两个点不能同时选，所以一个点不选，另一个点就有几率选。\n\n​\t具体证明我不会，大家自行$yy$\n\n附上代码\n\n```c++\n//Hello Wolrd\n//There is Special Pig Jiong in the world.\n#pragma GCC optimize(\"O3\")\n#include<cstdio>\n#include<cstring> \n#include<cstdlib> \n#include<algorithm>\nusing namespace std;\n#define gc getchar\n#define pc putchar\ninline int read(){int x=0,f=1;char c=gc();for(;c<'0'||c>'9';c=gc())if(c=='-')f=-1;for(;c>='0'&&c<='9';c=gc())x=x*10+c-48;return x*f;}\ninline void write(int x){if(x < 0) putchar('-'),x = -x;if (x>=10) write(x / 10);putchar((x % 10)+'0');}\ninline void writeln(int x){write(x);puts(\"\");}\nconst int oo = 0x3f3f3f3f;const int inf = oo;\n#define mem(x,v) memset(x,v,sizeof(x))\ntypedef pair<int,int> pii;\n#define mp make_pair\ntypedef unsigned long long ull;\ntypedef long long ll;\n#define rep(i,a,b) for(register int i=(a);i<(b);++i)\n#define file(x) {freopen(#x\".in\",\"r\",stdin);freopen(#x\".out\",\"w\",stdout);}\n#define N 1000005\nstruct Edge{\n\tint to,nxt;\n\tEdge(){}\n\tEdge(int to,int nxt):to(to),nxt(nxt){}\n}edge[N*2];\nint first[N],nume;\nvoid Addedge(int a,int b){\n\tedge[nume] = Edge(b,first[a]);\n\tfirst[a] = nume++;\n}\npii x; \nint tmp;//保存应该断的边 \nbool vis[N];\nvoid find(int u,int fa){\n\tvis[u]=true;\n\tfor (int e=first[u];~e;e=edge[e].nxt){\n\t\tint v = edge[e].to;\n\t\tif(v == fa) continue;\n\t\tif(vis[v]){\n\t\t\tx.first=u,x.second=v;\n\t\t\ttmp = e/2;\n\t\t\tcontinue;\n\t\t}\n\t\tfind(v,u);\n\t}\n}\nll f[N],g[N],res,ans;\nint a[N];\nint flag;\nvoid DP(int u,int fa){\n\tf[u] = a[u],g[u] = 0;\n\tfor (int e=first[u];~e;e=edge[e].nxt){\n\t\tint v = edge[e].to;\n\t\tif(v==fa)continue;\n\t\tif(tmp==e/2) continue;\n\t\tDP(v,u);\n\t\tf[u]+=g[v];\n\t\tg[u]+=max(f[v],g[v]);\n\t}\n}\nint n;\nint main(){\n\tn = read();\n\tmem(first,-1);nume = 0;\n\trep(i,0,n){\n\t\tint x;\n\t\ta[i] = read(),x = read()-1;\n\t\tAddedge(x,i);\n\t\tAddedge(i,x);\n\t}\n\tmem(vis,false);\n\tans = 0;\n\trep(i,0,n){\n\t\tif(vis[i]) continue;\n\t\tfind(i,-1);\n\t\tflag = 0;DP(x.first,-1);\n\t\tres = g[x.first];\n\t\tflag = 1;DP(x.second,-1);\n\t\tres = max(res,g[x.second]);\n\t\tans += res;\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n/*\n4\n10 2\n5 1\n10 4\n5 3\n*/\n```\n\n","source":"_posts/BZOJ1040 [ZJOI2008]骑士.md","raw":"---\ntitle: BZOJ1040 [ZJOI2008]骑士\ntags:\n - DP\n - BZOJ\n - 树\n - 图论\n---\n\n#### 题意\n\n​\t给你一个由许多个(树加上一条边（可能叫环套树）)组成的类似森林的东西。然后你可以选择一些点，要求这些点两两之间没有连边$N <= 1000000$\n\n<!--more-->\n\n#### 题解\n\n​\t我们考虑如果是树怎么做？\n\n​\t显然这是一个无向的，先随便找一个root，然后我们可以用树形DP，每一棵树单独处理\n\n​\t用$f[i]$表示第i个点选，$g[i]$表示第i个点不选，这样能得到的最大价值。\n\n​\t大家应该都会吧。\n\n​\t那么有环呢？\n\n​\t我们可以一遍DFS找出环，记录环上多出来的一条边。\n\n​\t我们强制断开这条边，对于这条边两端的两个点强行跑一遍DP，得到两个$g[i]$中大的一个，这就是这个图的答案。\n\n​\t为什么？显然两个点不能同时选，所以一个点不选，另一个点就有几率选。\n\n​\t具体证明我不会，大家自行$yy$\n\n附上代码\n\n```c++\n//Hello Wolrd\n//There is Special Pig Jiong in the world.\n#pragma GCC optimize(\"O3\")\n#include<cstdio>\n#include<cstring> \n#include<cstdlib> \n#include<algorithm>\nusing namespace std;\n#define gc getchar\n#define pc putchar\ninline int read(){int x=0,f=1;char c=gc();for(;c<'0'||c>'9';c=gc())if(c=='-')f=-1;for(;c>='0'&&c<='9';c=gc())x=x*10+c-48;return x*f;}\ninline void write(int x){if(x < 0) putchar('-'),x = -x;if (x>=10) write(x / 10);putchar((x % 10)+'0');}\ninline void writeln(int x){write(x);puts(\"\");}\nconst int oo = 0x3f3f3f3f;const int inf = oo;\n#define mem(x,v) memset(x,v,sizeof(x))\ntypedef pair<int,int> pii;\n#define mp make_pair\ntypedef unsigned long long ull;\ntypedef long long ll;\n#define rep(i,a,b) for(register int i=(a);i<(b);++i)\n#define file(x) {freopen(#x\".in\",\"r\",stdin);freopen(#x\".out\",\"w\",stdout);}\n#define N 1000005\nstruct Edge{\n\tint to,nxt;\n\tEdge(){}\n\tEdge(int to,int nxt):to(to),nxt(nxt){}\n}edge[N*2];\nint first[N],nume;\nvoid Addedge(int a,int b){\n\tedge[nume] = Edge(b,first[a]);\n\tfirst[a] = nume++;\n}\npii x; \nint tmp;//保存应该断的边 \nbool vis[N];\nvoid find(int u,int fa){\n\tvis[u]=true;\n\tfor (int e=first[u];~e;e=edge[e].nxt){\n\t\tint v = edge[e].to;\n\t\tif(v == fa) continue;\n\t\tif(vis[v]){\n\t\t\tx.first=u,x.second=v;\n\t\t\ttmp = e/2;\n\t\t\tcontinue;\n\t\t}\n\t\tfind(v,u);\n\t}\n}\nll f[N],g[N],res,ans;\nint a[N];\nint flag;\nvoid DP(int u,int fa){\n\tf[u] = a[u],g[u] = 0;\n\tfor (int e=first[u];~e;e=edge[e].nxt){\n\t\tint v = edge[e].to;\n\t\tif(v==fa)continue;\n\t\tif(tmp==e/2) continue;\n\t\tDP(v,u);\n\t\tf[u]+=g[v];\n\t\tg[u]+=max(f[v],g[v]);\n\t}\n}\nint n;\nint main(){\n\tn = read();\n\tmem(first,-1);nume = 0;\n\trep(i,0,n){\n\t\tint x;\n\t\ta[i] = read(),x = read()-1;\n\t\tAddedge(x,i);\n\t\tAddedge(i,x);\n\t}\n\tmem(vis,false);\n\tans = 0;\n\trep(i,0,n){\n\t\tif(vis[i]) continue;\n\t\tfind(i,-1);\n\t\tflag = 0;DP(x.first,-1);\n\t\tres = g[x.first];\n\t\tflag = 1;DP(x.second,-1);\n\t\tres = max(res,g[x.second]);\n\t\tans += res;\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n/*\n4\n10 2\n5 1\n10 4\n5 3\n*/\n```\n\n","slug":"BZOJ1040 [ZJOI2008]骑士","published":1,"date":"2021-08-28T13:02:49.992Z","updated":"2021-08-28T13:02:49.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvso3290008vfnu4wks1zx2","content":"<h4 id=\"题意\"><a class=\"markdownIt-Anchor\" href=\"# 题意\"></a> 题意 </h4><p>​\t给你一个由许多个(树加上一条边（可能叫环套树）) 组成的类似森林的东西。然后你可以选择一些点，要求这些点两两之间没有连边 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo>&lt;</mo><mo>=</mo><mn>1000000</mn></mrow><annotation encoding=\"application/x-tex\">N &lt;= 1000000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.72243em;vertical-align:-.0391em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10903em\">N</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></p><a id=\"more\"></a><h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"# 题解\"></a> 题解</h4><p>​\t我们考虑如果是树怎么做？</p><p>​\t显然这是一个无向的，先随便找一个 root，然后我们可以用树形 DP，每一棵树单独处理</p><p>​\t用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span> 表示第 i 个点选，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">g[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>表示第 i 个点不选，这样能得到的最大价值。</p><p>​\t大家应该都会吧。</p><p>​\t那么有环呢？</p><p>​\t我们可以一遍 DFS 找出环，记录环上多出来的一条边。</p><p>​\t我们强制断开这条边，对于这条边两端的两个点强行跑一遍 DP，得到两个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">g[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span> 中大的一个，这就是这个图的答案。</p><p>​\t为什么？显然两个点不能同时选，所以一个点不选，另一个点就有几率选。</p><p>​\t具体证明我不会，大家自行 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">yy</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.625em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span></span></span></span></p><p> 附上代码</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Hello Wolrd</span></span><br><span class=\"line\"><span class=\"comment\">//There is Special Pig Jiong in the world.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(<span class=\"meta-string\">\"O3\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc getchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"keyword\">char</span> c=gc();<span class=\"keyword\">for</span>(;c&lt;<span class=\"string\">'0'</span>||c&gt;<span class=\"string\">'9'</span>;c=gc())<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;<span class=\"keyword\">for</span>(;c&gt;=<span class=\"string\">'0'</span>&amp;&amp;c&lt;=<span class=\"string\">'9'</span>;c=gc())x=x*<span class=\"number\">10</span>+c<span class=\"number\">-48</span>;<span class=\"keyword\">return</span> x*f;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>),x = -x;<span class=\"keyword\">if</span> (x&gt;=<span class=\"number\">10</span>) <span class=\"built_in\">write</span>(x / <span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>((x % <span class=\"number\">10</span>)+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = <span class=\"number\">0x3f3f3f3f</span>;<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = oo;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mp make_pair</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(register int i=(a);i&lt;(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> file(x) &#123;freopen(#x<span class=\"meta-string\">\".in\"</span>,<span class=\"meta-string\">\"r\"</span>,stdin);freopen(#x<span class=\"meta-string\">\".out\"</span>,<span class=\"meta-string\">\"w\"</span>,stdout);&#125;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1000005</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,nxt;</span><br><span class=\"line\">    Edge()&#123;&#125;</span><br><span class=\"line\">    Edge(<span class=\"keyword\">int</span> to,<span class=\"keyword\">int</span> nxt):to(to),nxt(nxt)&#123;&#125;</span><br><span class=\"line\">&#125;edge[N*<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> first[N],nume;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    edge[nume] = Edge(b,first[a]);</span><br><span class=\"line\">    first[a] = nume++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">pii x; </span><br><span class=\"line\"><span class=\"keyword\">int</span> tmp;<span class=\"comment\">// 保存应该断的边 </span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">    vis[u]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e=first[u];~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = edge[e].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[v])&#123;</span><br><span class=\"line\">            x.first=u,x.second=v;</span><br><span class=\"line\">            tmp = e/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">find</span>(v,u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ll f[N],g[N],res,ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> flag;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DP</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">    f[u] = a[u],g[u] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e=first[u];~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = edge[e].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v==fa)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tmp==e/<span class=\"number\">2</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        DP(v,u);</span><br><span class=\"line\">        f[u]+=g[v];</span><br><span class=\"line\">        g[u]+=<span class=\"built_in\">max</span>(f[v],g[v]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    rep(i,<span class=\"number\">0</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">        a[i] = <span class=\"built_in\">read</span>(),x = <span class=\"built_in\">read</span>()<span class=\"number\">-1</span>;</span><br><span class=\"line\">        Addedge(x,i);</span><br><span class=\"line\">        Addedge(i,x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mem(vis,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    rep(i,<span class=\"number\">0</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">find</span>(i,<span class=\"number\">-1</span>);</span><br><span class=\"line\">        flag = <span class=\"number\">0</span>;DP(x.first,<span class=\"number\">-1</span>);</span><br><span class=\"line\">        res = g[x.first];</span><br><span class=\"line\">        flag = <span class=\"number\">1</span>;DP(x.second,<span class=\"number\">-1</span>);</span><br><span class=\"line\">        res = <span class=\"built_in\">max</span>(res,g[x.second]);</span><br><span class=\"line\">        ans += res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">4</span></span><br><span class=\"line\"><span class=\"comment\">10 2</span></span><br><span class=\"line\"><span class=\"comment\">5 1</span></span><br><span class=\"line\"><span class=\"comment\">10 4</span></span><br><span class=\"line\"><span class=\"comment\">5 3</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"题意\"><a class=\"markdownIt-Anchor\" href=\"#题意\"></a> 题意</h4><p>​\t给你一个由许多个(树加上一条边（可能叫环套树）)组成的类似森林的东西。然后你可以选择一些点，要求这些点两两之间没有连边<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo>&lt;</mo><mo>=</mo><mn>1000000</mn></mrow><annotation encoding=\"application/x-tex\">N &lt;= 1000000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.72243em;vertical-align:-.0391em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10903em\">N</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></p>","more":"<h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\"></a> 题解</h4><p>​\t我们考虑如果是树怎么做？</p><p>​\t显然这是一个无向的，先随便找一个root，然后我们可以用树形DP，每一棵树单独处理</p><p>​\t用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>表示第i个点选，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">g[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>表示第i个点不选，这样能得到的最大价值。</p><p>​\t大家应该都会吧。</p><p>​\t那么有环呢？</p><p>​\t我们可以一遍DFS找出环，记录环上多出来的一条边。</p><p>​\t我们强制断开这条边，对于这条边两端的两个点强行跑一遍DP，得到两个<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">g[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>中大的一个，这就是这个图的答案。</p><p>​\t为什么？显然两个点不能同时选，所以一个点不选，另一个点就有几率选。</p><p>​\t具体证明我不会，大家自行<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">yy</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.625em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span></span></span></span></p><p>附上代码</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Hello Wolrd</span></span><br><span class=\"line\"><span class=\"comment\">//There is Special Pig Jiong in the world.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(<span class=\"meta-string\">\"O3\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc getchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"keyword\">char</span> c=gc();<span class=\"keyword\">for</span>(;c&lt;<span class=\"string\">'0'</span>||c&gt;<span class=\"string\">'9'</span>;c=gc())<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;<span class=\"keyword\">for</span>(;c&gt;=<span class=\"string\">'0'</span>&amp;&amp;c&lt;=<span class=\"string\">'9'</span>;c=gc())x=x*<span class=\"number\">10</span>+c<span class=\"number\">-48</span>;<span class=\"keyword\">return</span> x*f;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>),x = -x;<span class=\"keyword\">if</span> (x&gt;=<span class=\"number\">10</span>) <span class=\"built_in\">write</span>(x / <span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>((x % <span class=\"number\">10</span>)+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = <span class=\"number\">0x3f3f3f3f</span>;<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = oo;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mp make_pair</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(register int i=(a);i&lt;(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> file(x) &#123;freopen(#x<span class=\"meta-string\">\".in\"</span>,<span class=\"meta-string\">\"r\"</span>,stdin);freopen(#x<span class=\"meta-string\">\".out\"</span>,<span class=\"meta-string\">\"w\"</span>,stdout);&#125;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1000005</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,nxt;</span><br><span class=\"line\">    Edge()&#123;&#125;</span><br><span class=\"line\">    Edge(<span class=\"keyword\">int</span> to,<span class=\"keyword\">int</span> nxt):to(to),nxt(nxt)&#123;&#125;</span><br><span class=\"line\">&#125;edge[N*<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> first[N],nume;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    edge[nume] = Edge(b,first[a]);</span><br><span class=\"line\">    first[a] = nume++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">pii x; </span><br><span class=\"line\"><span class=\"keyword\">int</span> tmp;<span class=\"comment\">//保存应该断的边 </span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">    vis[u]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e=first[u];~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = edge[e].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[v])&#123;</span><br><span class=\"line\">            x.first=u,x.second=v;</span><br><span class=\"line\">            tmp = e/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">find</span>(v,u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ll f[N],g[N],res,ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> flag;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DP</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">    f[u] = a[u],g[u] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e=first[u];~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = edge[e].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v==fa)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tmp==e/<span class=\"number\">2</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        DP(v,u);</span><br><span class=\"line\">        f[u]+=g[v];</span><br><span class=\"line\">        g[u]+=<span class=\"built_in\">max</span>(f[v],g[v]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    rep(i,<span class=\"number\">0</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">        a[i] = <span class=\"built_in\">read</span>(),x = <span class=\"built_in\">read</span>()<span class=\"number\">-1</span>;</span><br><span class=\"line\">        Addedge(x,i);</span><br><span class=\"line\">        Addedge(i,x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mem(vis,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    rep(i,<span class=\"number\">0</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">find</span>(i,<span class=\"number\">-1</span>);</span><br><span class=\"line\">        flag = <span class=\"number\">0</span>;DP(x.first,<span class=\"number\">-1</span>);</span><br><span class=\"line\">        res = g[x.first];</span><br><span class=\"line\">        flag = <span class=\"number\">1</span>;DP(x.second,<span class=\"number\">-1</span>);</span><br><span class=\"line\">        res = <span class=\"built_in\">max</span>(res,g[x.second]);</span><br><span class=\"line\">        ans += res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">4</span></span><br><span class=\"line\"><span class=\"comment\">10 2</span></span><br><span class=\"line\"><span class=\"comment\">5 1</span></span><br><span class=\"line\"><span class=\"comment\">10 4</span></span><br><span class=\"line\"><span class=\"comment\">5 3</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>"},{"title":"BZOJ1041 [HAOI2008] 圆上的整点","_content":"\n#### 题意\n\n​\t求一个给定的圆(x^2+y^2=r^2)，在圆周上有多少个点的坐标是整数。$n<=2000000000$\n\n<!--more-->\n\n#### 题解\n\n​\t摘自HZWER\n\n\n\n考虑$x^2+y^2=R^2$\n则$y=\\sqrt{(R+x)(R-x)}$\n\n设$d = gcd((R+x),(R-x))$\n\n$\\large A = \\frac{R+x}{d},B=\\frac{R-x}{d}$\n\n则显然$gcd(A,B)=1$\n\n$\\large A*B = \\frac{(R^2-x^2)}{2}$\n\n$y^2 = d^2\\times A\\times B$\t\n\n可以知道A，B都是完全平方数\n\n设$A=a^2,B=b^2$\n\n$\\large a^2+b^2=\\frac{2R}{d}$\n\n故$d$是$2R$的因子\t\n\n考虑枚举d$(O(\\sqrt{2R}))\t$\n\n则\n\n第一种情况：$d=\\frac{2R}{d}$。枚举$a∈[1,sqrt(2R/2d)]$ <由$2*a*a < 2*R/d$转变来>，算出对应的$b=sqrt(2R/d-a^2)$，检查是否此时的A,B满足：A≠B且A,B互质 <根据上面的推理可知必需满足此条件>，若是就将答案加1\n\n第二种情况：$d=d$。枚举$a∈[1,sqrt(d/2)] $<由$2*a*a < d$转变来>，算出对应的$b=sqrt(d-a^2)$，检查是否此时的A,B满足：A≠B且A,B互质 <根据上面的推理可知必需满足此条件，若是就将答案加1\n\n\n\n$Ans*4+4$ Is the Answer.\n\n\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\nusing namespace std;\ntypedef long long LL;\nnamespace IO{\n\tconst int __buffsize = 1000000;char __buff[__buffsize];char *__buffS, *__buffT;\n\tchar getch(){if (__buffS == __buffT){__buffT = (__buffS = __buff) + fread(__buff,1,__buffsize,stdin);if (__buffS == __buffT) return EOF;}return *__buffS++;}\n\t#define getch getchar\n\tint read(){int T = 0,f = 1;char c = getch();while ((c<'0'||c>'9')&&c!='-') c=getch();if(c=='-')f=-1,c=getch();while (c>='0'&&c<='9'){T=((T<<1)+(T<<3))+c-48;c=getch();}return T*f;}\n\tvoid write(int x){if(x < 0) putchar('0'),x = -x;if (x>=10) write(x / 10);putchar((x % 10)+'0');}\n\tvoid writeln(int x){write(x);puts(\"\");}\n};\nusing namespace IO;\nLL R,ans;\nLL gcd(LL a,LL b){return !b?a:gcd(b,a%b);}\nbool check(LL x,double y){\n\tif (y == floor(y)){\n\t\tLL _y=(LL)floor(y);\n\t\tif (gcd(x*x,_y*_y)==1&&x*x!=_y*_y) return true;\n\t}\n\treturn false;\n}\nint main(){\n\tscanf(\"%lld\",&R);\n\tfor (LL d=1;d<=sqrt(2*R);d++){\n\t\tif (2*R % d == 0){\n\t\t\tfor (LL a=1;a<=(LL)sqrt(2*R/(2*d));a++){\n\t\t\t\tdouble b = sqrt((2*R)/d-a*a);\n\t\t\t\tif (check(a,b)) ans++;\n\t\t\t}\n\t\t\tif (d != (2*R)/d){\n\t\t\t\tfor (LL a=1;a<=(LL)sqrt(d/2);a++){\n\t\t\t\t\tdouble b = sqrt(d - a*a);\n\t\t\t\t\tif (check(a,b)) ans++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",ans*4+4);\n}\n```\n\n\n\n","source":"_posts/BZOJ1041 [HAOI2008]圆上的整点.md","raw":"---\ntitle: BZOJ1041 [HAOI2008]圆上的整点\ntags:\n - 数学\n - BZOJ\n---\n\n#### 题意\n\n​\t求一个给定的圆(x^2+y^2=r^2)，在圆周上有多少个点的坐标是整数。$n<=2000000000$\n\n<!--more-->\n\n#### 题解\n\n​\t摘自HZWER\n\n\n\n考虑$x^2+y^2=R^2$\n则$y=\\sqrt{(R+x)(R-x)}$\n\n设$d = gcd((R+x),(R-x))$\n\n$\\large A = \\frac{R+x}{d},B=\\frac{R-x}{d}$\n\n则显然$gcd(A,B)=1$\n\n$\\large A*B = \\frac{(R^2-x^2)}{2}$\n\n$y^2 = d^2\\times A\\times B$\t\n\n可以知道A，B都是完全平方数\n\n设$A=a^2,B=b^2$\n\n$\\large a^2+b^2=\\frac{2R}{d}$\n\n故$d$是$2R$的因子\t\n\n考虑枚举d$(O(\\sqrt{2R}))\t$\n\n则\n\n第一种情况：$d=\\frac{2R}{d}$。枚举$a∈[1,sqrt(2R/2d)]$ <由$2*a*a < 2*R/d$转变来>，算出对应的$b=sqrt(2R/d-a^2)$，检查是否此时的A,B满足：A≠B且A,B互质 <根据上面的推理可知必需满足此条件>，若是就将答案加1\n\n第二种情况：$d=d$。枚举$a∈[1,sqrt(d/2)] $<由$2*a*a < d$转变来>，算出对应的$b=sqrt(d-a^2)$，检查是否此时的A,B满足：A≠B且A,B互质 <根据上面的推理可知必需满足此条件，若是就将答案加1\n\n\n\n$Ans*4+4$ Is the Answer.\n\n\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\nusing namespace std;\ntypedef long long LL;\nnamespace IO{\n\tconst int __buffsize = 1000000;char __buff[__buffsize];char *__buffS, *__buffT;\n\tchar getch(){if (__buffS == __buffT){__buffT = (__buffS = __buff) + fread(__buff,1,__buffsize,stdin);if (__buffS == __buffT) return EOF;}return *__buffS++;}\n\t#define getch getchar\n\tint read(){int T = 0,f = 1;char c = getch();while ((c<'0'||c>'9')&&c!='-') c=getch();if(c=='-')f=-1,c=getch();while (c>='0'&&c<='9'){T=((T<<1)+(T<<3))+c-48;c=getch();}return T*f;}\n\tvoid write(int x){if(x < 0) putchar('0'),x = -x;if (x>=10) write(x / 10);putchar((x % 10)+'0');}\n\tvoid writeln(int x){write(x);puts(\"\");}\n};\nusing namespace IO;\nLL R,ans;\nLL gcd(LL a,LL b){return !b?a:gcd(b,a%b);}\nbool check(LL x,double y){\n\tif (y == floor(y)){\n\t\tLL _y=(LL)floor(y);\n\t\tif (gcd(x*x,_y*_y)==1&&x*x!=_y*_y) return true;\n\t}\n\treturn false;\n}\nint main(){\n\tscanf(\"%lld\",&R);\n\tfor (LL d=1;d<=sqrt(2*R);d++){\n\t\tif (2*R % d == 0){\n\t\t\tfor (LL a=1;a<=(LL)sqrt(2*R/(2*d));a++){\n\t\t\t\tdouble b = sqrt((2*R)/d-a*a);\n\t\t\t\tif (check(a,b)) ans++;\n\t\t\t}\n\t\t\tif (d != (2*R)/d){\n\t\t\t\tfor (LL a=1;a<=(LL)sqrt(d/2);a++){\n\t\t\t\t\tdouble b = sqrt(d - a*a);\n\t\t\t\t\tif (check(a,b)) ans++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",ans*4+4);\n}\n```\n\n\n\n","slug":"BZOJ1041 [HAOI2008]圆上的整点","published":1,"date":"2021-08-28T13:02:49.992Z","updated":"2021-08-28T13:02:49.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvso32d000avfnubq2n9dn5","content":"<h4 id=\"题意\"><a class=\"markdownIt-Anchor\" href=\"# 题意\"></a> 题意 </h4><p>​\t求一个给定的圆(x<sup>2+y</sup>2=r^2)，在圆周上有多少个点的坐标是整数。<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>&lt;</mo><mo>=</mo><mn>2000000000</mn></mrow><annotation encoding=\"application/x-tex\">n&lt;=2000000000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.5782em;vertical-align:-.0391em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></p><a id=\"more\"></a><h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"# 题解\"></a> 题解</h4><p>​\t摘自 HZWER</p><p> 考虑 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">x^2+y^2=R^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.897438em;vertical-align:-.08333em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.8141079999999999em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.00773em\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><br> 则<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mo>=</mo><msqrt><mrow><mo stretchy=\"false\">(</mo><mi>R</mi><mo>+</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>R</mi><mo>−</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></msqrt></mrow><annotation encoding=\"application/x-tex\">y=\\sqrt{(R+x)(R-x)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.625em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.24em;vertical-align:-.30499999999999994em\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.935em\"><span class=\"svg-align\" style=\"top:-3.2em\"><span class=\"pstrut\" style=\"height:3.2em\"></span><span class=\"mord\" style=\"padding-left:1em\"><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.00773em\">R</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.00773em\">R</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span><span style=\"top:-2.8950000000000005em\"><span class=\"pstrut\" style=\"height:3.2em\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:1.28em\"><svg width=\"400em\" height=\"1.28em\" viewBox=\"0 0 400000 1296\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,\n158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067\nc4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,\n175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71\nc-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,\n-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26\ns76,-59,76,-59s76,-60,76,-60z M1001 80H40000v40H1012z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.30499999999999994em\"><span></span></span></span></span></span></span></span></span></p><p>设 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>R</mi><mo>+</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>R</mi><mo>−</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">d = gcd((R+x),(R-x))</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\">d</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.03588em\">g</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\"style=\"margin-right:.00773em\">R</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\"style=\"margin-right:.16666666666666666em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\"style=\"margin-right:.00773em\">R</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mstyle mathsize=\"1.2em\"><mi>A</mi><mo>=</mo><mfrac><mrow><mi>R</mi><mo>+</mo><mi>x</mi></mrow><mi>d</mi></mfrac><mo separator=\"true\">,</mo><mi>B</mi><mo>=</mo><mfrac><mrow><mi>R</mi><mo>−</mo><mi>x</mi></mrow><mi>d</mi></mfrac></mstyle></mrow><annotation encoding=\"application/x-tex\">\\large A = \\frac{R+x}{d},B=\\frac{R-x}{d}</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.819996em;vertical-align:0\"></span><span class=\"mord mathdefault sizing reset-size6 size7\">A</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel sizing reset-size6 size7\">=</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1.4334639999999998em;vertical-align:-.414em\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mopen nulldelimiter sizing reset-size7 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.8495533333333334em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\"style=\"height:3em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\"style=\"height:3em\"></span><span class=\"frac-line\"style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\"style=\"height:3em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\"style=\"margin-right:.00773em\">R</span><span class=\"mbin mtight\">+</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.345em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size7 size6\"></span></span><span class=\"mpunct sizing reset-size6 size7\">,</span><span class=\"mspace\"style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault sizing reset-size6 size7\"style=\"margin-right:.05017em\">B</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel sizing reset-size6 size7\">=</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1.4334639999999998em;vertical-align:-.414em\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mopen nulldelimiter sizing reset-size7 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.8495533333333334em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\"style=\"height:3em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\"style=\"height:3em\"></span><span class=\"frac-line\"style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\"style=\"height:3em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\"style=\"margin-right:.00773em\">R</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.345em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size7 size6\"></span></span></span></span></span></p><p> 则显然 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">gcd(A,B)=1</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.03588em\">g</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\"style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.05017em\">B</span><span class=\"mclose\">)</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mstyle mathsize=\"1.2em\"><mi>A</mi><mo>∗</mo><mi>B</mi><mo>=</mo><mfrac><mrow><mo stretchy=\"false\">(</mo><msup><mi>R</mi><mn>2</mn></msup><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac></mstyle></mrow><annotation encoding=\"application/x-tex\">\\large A*B = \\frac{(R^2-x^2)}{2}</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.819996em;vertical-align:0\"></span><span class=\"mord mathdefault sizing reset-size6 size7\">A</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin sizing reset-size6 size7\">∗</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.819996em;vertical-align:0\"></span><span class=\"mord mathdefault sizing reset-size6 size7\"style=\"margin-right:.05017em\">B</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel sizing reset-size6 size7\">=</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1.7174639999999999em;vertical-align:-.414em\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mopen nulldelimiter sizing reset-size7 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:1.08622em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\"style=\"height:3em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\"style=\"height:3em\"></span><span class=\"frac-line\"style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.4766666666666666em\"><span class=\"pstrut\"style=\"height:3em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\"style=\"margin-right:.00773em\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.9143299999999999em\"><span style=\"top:-3.031em;margin-right:.0625em\"><span class=\"pstrut\"style=\"height:2.6em\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.9143299999999999em\"><span style=\"top:-3.031em;margin-right:.0625em\"><span class=\"pstrut\"style=\"height:2.6em\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.345em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size7 size6\"></span></span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><msup><mi>d</mi><mn>2</mn></msup><mo>×</mo><mi>A</mi><mo>×</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">y^2 = d^2\\times A\\times B</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1.008548em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\"style=\"margin-right:.03588em\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\"style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.897438em;vertical-align:-.08333em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\"style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.76666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\"style=\"margin-right:.05017em\">B</span></span></span></span></p><p> 可以知道 A，B 都是完全平方数 </p><p> 设<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>=</mo><msup><mi>a</mi><mn>2</mn></msup><mo separator=\"true\">,</mo><mi>B</mi><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">A=a^2,B=b^2</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1.008548em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\"style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\"style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.05017em\">B</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.8141079999999999em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\"style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mstyle mathsize=\"1.2em\"><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup><mo>=</mo><mfrac><mrow><mn>2</mn><mi>R</mi></mrow><mi>d</mi></mfrac></mstyle></mrow><annotation encoding=\"application/x-tex\">\\large a^2+b^2=\\frac{2R}{d}</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1.051148em;vertical-align:-.099996em\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.7926266666666667em\"><span style=\"top:-3.163em;margin-right:.04166666666666667em\"><span class=\"pstrut\"style=\"height:2.8em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin sizing reset-size6 size7\">+</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.951152em;vertical-align:0\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.7926266666666667em\"><span style=\"top:-3.163em;margin-right:.04166666666666667em\"><span class=\"pstrut\"style=\"height:2.8em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel sizing reset-size6 size7\">=</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1.4334639999999998em;vertical-align:-.414em\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mopen nulldelimiter sizing reset-size7 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.8495533333333334em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\"style=\"height:3em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\"style=\"height:3em\"></span><span class=\"frac-line\"style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\"style=\"height:3em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathdefault mtight\"style=\"margin-right:.00773em\">R</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.345em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size7 size6\"></span></span></span></span></span></p><p>故 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\">d</span></span></span></span> 是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">2R</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mord mathdefault\"style=\"margin-right:.00773em\">R</span></span></span></span>的因子 </p><p> 考虑枚举 d$(O(\\sqrt{2R}))\t$</p><p>则 </p><p> 第一种情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mo>=</mo><mfrac><mrow><mn>2</mn><mi>R</mi></mrow><mi>d</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">d=\\frac{2R}{d}</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\">d</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1.217331em;vertical-align:-.345em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.872331em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\"style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\"style=\"height:3em\"></span><span class=\"frac-line\"style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\"style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathdefault mtight\"style=\"margin-right:.00773em\">R</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.345em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>。枚举 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>s</mi><mi>q</mi><mi>r</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mi>R</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mi>d</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a∈[1,sqrt(2R/2d)]</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.5782em;vertical-align:-.0391em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">∈</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\"style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\"style=\"margin-right:.03588em\">q</span><span class=\"mord mathdefault\"style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathdefault\"style=\"margin-right:.00773em\">R</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mord mathdefault\">d</span><span class=\"mclose\">)</span><span class=\"mclose\">]</span></span></span></span> &lt; 由<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mi>a</mi><mo>∗</mo><mi>a</mi><mo>&lt;</mo><mn>2</mn><mo>∗</mo><mi>R</mi><mi mathvariant=\"normal\">/</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">2*a*a &lt; 2*R/d</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.46528em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.5782em;vertical-align:-.0391em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.00773em\">R</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">d</span></span></span></span> 转变来 &gt;，算出对应的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mo>=</mo><mi>s</mi><mi>q</mi><mi>r</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mi>R</mi><mi mathvariant=\"normal\">/</mi><mi>d</mi><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">b=sqrt(2R/d-a^2)</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\"style=\"margin-right:.03588em\">q</span><span class=\"mord mathdefault\"style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathdefault\"style=\"margin-right:.00773em\">R</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\"style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，检查是否此时的 A,B 满足：A≠B 且 A,B 互质 &lt; 根据上面的推理可知必需满足此条件 &gt;，若是就将答案加 1</p><p> 第二种情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mo>=</mo><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d=d</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\">d</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\">d</span></span></span></span>。枚举 $a∈[1,sqrt(d/2)] $&lt; 由 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mi>a</mi><mo>∗</mo><mi>a</mi><mo>&lt;</mo><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">2*a*a &lt; d</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.46528em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.5782em;vertical-align:-.0391em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\">d</span></span></span></span> 转变来 &gt;，算出对应的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mo>=</mo><mi>s</mi><mi>q</mi><mi>r</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">b=sqrt(d-a^2)</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\"style=\"margin-right:.03588em\">q</span><span class=\"mord mathdefault\"style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\"style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，检查是否此时的 A,B 满足：A≠B 且 A,B 互质 &lt; 根据上面的推理可知必需满足此条件，若是就将答案加 1</p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mi>n</mi><mi>s</mi><mo>∗</mo><mn>4</mn><mo>+</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">Ans*4+4</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord\">4</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">4</span></span></span></span> Is the Answer.</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> IO&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> __buffsize = <span class=\"number\">1000000</span>;<span class=\"keyword\">char</span> __buff[__buffsize];<span class=\"keyword\">char</span> *__buffS, *__buffT;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">getch</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">if</span> (__buffS == __buffT)&#123;__buffT = (__buffS = __buff) + fread(__buff,<span class=\"number\">1</span>,__buffsize,<span class=\"built_in\">stdin</span>);<span class=\"keyword\">if</span> (__buffS == __buffT) <span class=\"keyword\">return</span> EOF;&#125;<span class=\"keyword\">return</span> *__buffS++;&#125;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> getch getchar</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">int</span> T = <span class=\"number\">0</span>,f = <span class=\"number\">1</span>;<span class=\"keyword\">char</span> c = getch();<span class=\"keyword\">while</span> ((c&lt;<span class=\"string\">'0'</span>||c&gt;<span class=\"string\">'9'</span>)&amp;&amp;c!=<span class=\"string\">'-'</span>) c=getch();<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>,c=getch();<span class=\"keyword\">while</span> (c&gt;=<span class=\"string\">'0'</span>&amp;&amp;c&lt;=<span class=\"string\">'9'</span>)&#123;T=((T&lt;&lt;<span class=\"number\">1</span>)+(T&lt;&lt;<span class=\"number\">3</span>))+c<span class=\"number\">-48</span>;c=getch();&#125;<span class=\"keyword\">return</span> T*f;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>),x = -x;<span class=\"keyword\">if</span> (x&gt;=<span class=\"number\">10</span>) <span class=\"built_in\">write</span>(x / <span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>((x % <span class=\"number\">10</span>)+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> IO;</span><br><span class=\"line\">LL R,ans;</span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">gcd</span><span class=\"params\">(LL a,LL b)</span></span>&#123;<span class=\"keyword\">return</span> !b?a:gcd(b,a%b);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(LL x,<span class=\"keyword\">double</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (y == <span class=\"built_in\">floor</span>(y))&#123;</span><br><span class=\"line\">        LL _y=(LL)<span class=\"built_in\">floor</span>(y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (gcd(x*x,_y*_y)==<span class=\"number\">1</span>&amp;&amp;x*x!=_y*_y) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>,&amp;R);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL d=<span class=\"number\">1</span>;d&lt;=<span class=\"built_in\">sqrt</span>(<span class=\"number\">2</span>*R);d++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">2</span>*R % d == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (LL a=<span class=\"number\">1</span>;a&lt;=(LL)<span class=\"built_in\">sqrt</span>(<span class=\"number\">2</span>*R/(<span class=\"number\">2</span>*d));a++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">double</span> b = <span class=\"built_in\">sqrt</span>((<span class=\"number\">2</span>*R)/d-a*a);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (check(a,b)) ans++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d != (<span class=\"number\">2</span>*R)/d)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (LL a=<span class=\"number\">1</span>;a&lt;=(LL)<span class=\"built_in\">sqrt</span>(d/<span class=\"number\">2</span>);a++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">double</span> b = <span class=\"built_in\">sqrt</span>(d - a*a);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (check(a,b)) ans++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,ans*<span class=\"number\">4</span>+<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"题意\"><a class=\"markdownIt-Anchor\" href=\"#题意\"></a> 题意</h4><p>​\t求一个给定的圆(x<sup>2+y</sup>2=r^2)，在圆周上有多少个点的坐标是整数。<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>&lt;</mo><mo>=</mo><mn>2000000000</mn></mrow><annotation encoding=\"application/x-tex\">n&lt;=2000000000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.5782em;vertical-align:-.0391em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></p>","more":"<h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\"></a> 题解</h4><p>​\t摘自HZWER</p><p>考虑<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">x^2+y^2=R^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.897438em;vertical-align:-.08333em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.8141079999999999em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.00773em\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><br>则<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mo>=</mo><msqrt><mrow><mo stretchy=\"false\">(</mo><mi>R</mi><mo>+</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>R</mi><mo>−</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></msqrt></mrow><annotation encoding=\"application/x-tex\">y=\\sqrt{(R+x)(R-x)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.625em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.24em;vertical-align:-.30499999999999994em\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.935em\"><span class=\"svg-align\" style=\"top:-3.2em\"><span class=\"pstrut\" style=\"height:3.2em\"></span><span class=\"mord\" style=\"padding-left:1em\"><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.00773em\">R</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.00773em\">R</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span><span style=\"top:-2.8950000000000005em\"><span class=\"pstrut\" style=\"height:3.2em\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:1.28em\"><svg width=\"400em\" height=\"1.28em\" viewBox=\"0 0 400000 1296\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,\n158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067\nc4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,\n175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71\nc-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,\n-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26\ns76,-59,76,-59s76,-60,76,-60z M1001 80H40000v40H1012z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30499999999999994em\"><span></span></span></span></span></span></span></span></span></p><p>设<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>R</mi><mo>+</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>R</mi><mo>−</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">d = gcd((R+x),(R-x))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.00773em\">R</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.00773em\">R</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mstyle mathsize=\"1.2em\"><mi>A</mi><mo>=</mo><mfrac><mrow><mi>R</mi><mo>+</mo><mi>x</mi></mrow><mi>d</mi></mfrac><mo separator=\"true\">,</mo><mi>B</mi><mo>=</mo><mfrac><mrow><mi>R</mi><mo>−</mo><mi>x</mi></mrow><mi>d</mi></mfrac></mstyle></mrow><annotation encoding=\"application/x-tex\">\\large A = \\frac{R+x}{d},B=\\frac{R-x}{d}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.819996em;vertical-align:0\"></span><span class=\"mord mathdefault sizing reset-size6 size7\">A</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel sizing reset-size6 size7\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4334639999999998em;vertical-align:-.414em\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mopen nulldelimiter sizing reset-size7 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8495533333333334em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.00773em\">R</span><span class=\"mbin mtight\">+</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.345em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size7 size6\"></span></span><span class=\"mpunct sizing reset-size6 size7\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault sizing reset-size6 size7\" style=\"margin-right:.05017em\">B</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel sizing reset-size6 size7\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4334639999999998em;vertical-align:-.414em\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mopen nulldelimiter sizing reset-size7 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8495533333333334em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.00773em\">R</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.345em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size7 size6\"></span></span></span></span></span></p><p>则显然<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">gcd(A,B)=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05017em\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mstyle mathsize=\"1.2em\"><mi>A</mi><mo>∗</mo><mi>B</mi><mo>=</mo><mfrac><mrow><mo stretchy=\"false\">(</mo><msup><mi>R</mi><mn>2</mn></msup><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac></mstyle></mrow><annotation encoding=\"application/x-tex\">\\large A*B = \\frac{(R^2-x^2)}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.819996em;vertical-align:0\"></span><span class=\"mord mathdefault sizing reset-size6 size7\">A</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin sizing reset-size6 size7\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.819996em;vertical-align:0\"></span><span class=\"mord mathdefault sizing reset-size6 size7\" style=\"margin-right:.05017em\">B</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel sizing reset-size6 size7\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.7174639999999999em;vertical-align:-.414em\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mopen nulldelimiter sizing reset-size7 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.08622em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.4766666666666666em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.00773em\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.9143299999999999em\"><span style=\"top:-3.031em;margin-right:.0625em\"><span class=\"pstrut\" style=\"height:2.6em\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.9143299999999999em\"><span style=\"top:-3.031em;margin-right:.0625em\"><span class=\"pstrut\" style=\"height:2.6em\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.345em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size7 size6\"></span></span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><msup><mi>d</mi><mn>2</mn></msup><mo>×</mo><mi>A</mi><mo>×</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">y^2 = d^2\\times A\\times B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.897438em;vertical-align:-.08333em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.76666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05017em\">B</span></span></span></span></p><p>可以知道A，B都是完全平方数</p><p>设<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>=</mo><msup><mi>a</mi><mn>2</mn></msup><mo separator=\"true\">,</mo><mi>B</mi><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">A=a^2,B=b^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05017em\">B</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.8141079999999999em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mstyle mathsize=\"1.2em\"><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup><mo>=</mo><mfrac><mrow><mn>2</mn><mi>R</mi></mrow><mi>d</mi></mfrac></mstyle></mrow><annotation encoding=\"application/x-tex\">\\large a^2+b^2=\\frac{2R}{d}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.051148em;vertical-align:-.099996em\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7926266666666667em\"><span style=\"top:-3.163em;margin-right:.04166666666666667em\"><span class=\"pstrut\" style=\"height:2.8em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin sizing reset-size6 size7\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.951152em;vertical-align:0\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7926266666666667em\"><span style=\"top:-3.163em;margin-right:.04166666666666667em\"><span class=\"pstrut\" style=\"height:2.8em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel sizing reset-size6 size7\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4334639999999998em;vertical-align:-.414em\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mopen nulldelimiter sizing reset-size7 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8495533333333334em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.00773em\">R</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.345em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size7 size6\"></span></span></span></span></span></p><p>故<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\">d</span></span></span></span>是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">2R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mord mathdefault\" style=\"margin-right:.00773em\">R</span></span></span></span>的因子</p><p>考虑枚举d$(O(\\sqrt{2R}))\t$</p><p>则</p><p>第一种情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mo>=</mo><mfrac><mrow><mn>2</mn><mi>R</mi></mrow><mi>d</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">d=\\frac{2R}{d}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.217331em;vertical-align:-.345em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.872331em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.00773em\">R</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.345em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>。枚举<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>s</mi><mi>q</mi><mi>r</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mi>R</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mi>d</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a∈[1,sqrt(2R/2d)]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.5782em;vertical-align:-.0391em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathdefault\" style=\"margin-right:.00773em\">R</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mord mathdefault\">d</span><span class=\"mclose\">)</span><span class=\"mclose\">]</span></span></span></span> &lt;由<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mi>a</mi><mo>∗</mo><mi>a</mi><mo>&lt;</mo><mn>2</mn><mo>∗</mo><mi>R</mi><mi mathvariant=\"normal\">/</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">2*a*a &lt; 2*R/d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.46528em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.5782em;vertical-align:-.0391em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.00773em\">R</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">d</span></span></span></span>转变来&gt;，算出对应的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mo>=</mo><mi>s</mi><mi>q</mi><mi>r</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mi>R</mi><mi mathvariant=\"normal\">/</mi><mi>d</mi><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">b=sqrt(2R/d-a^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathdefault\" style=\"margin-right:.00773em\">R</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，检查是否此时的A,B满足：A≠B且A,B互质 &lt;根据上面的推理可知必需满足此条件&gt;，若是就将答案加1</p><p>第二种情况：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mo>=</mo><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d=d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\">d</span></span></span></span>。枚举$a∈[1,sqrt(d/2)] $&lt;由<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mi>a</mi><mo>∗</mo><mi>a</mi><mo>&lt;</mo><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">2*a*a &lt; d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.46528em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.5782em;vertical-align:-.0391em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\">d</span></span></span></span>转变来&gt;，算出对应的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mo>=</mo><mi>s</mi><mi>q</mi><mi>r</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">b=sqrt(d-a^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，检查是否此时的A,B满足：A≠B且A,B互质 &lt;根据上面的推理可知必需满足此条件，若是就将答案加1</p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mi>n</mi><mi>s</mi><mo>∗</mo><mn>4</mn><mo>+</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">Ans*4+4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">4</span></span></span></span> Is the Answer.</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> IO&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> __buffsize = <span class=\"number\">1000000</span>;<span class=\"keyword\">char</span> __buff[__buffsize];<span class=\"keyword\">char</span> *__buffS, *__buffT;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">getch</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">if</span> (__buffS == __buffT)&#123;__buffT = (__buffS = __buff) + fread(__buff,<span class=\"number\">1</span>,__buffsize,<span class=\"built_in\">stdin</span>);<span class=\"keyword\">if</span> (__buffS == __buffT) <span class=\"keyword\">return</span> EOF;&#125;<span class=\"keyword\">return</span> *__buffS++;&#125;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> getch getchar</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">int</span> T = <span class=\"number\">0</span>,f = <span class=\"number\">1</span>;<span class=\"keyword\">char</span> c = getch();<span class=\"keyword\">while</span> ((c&lt;<span class=\"string\">'0'</span>||c&gt;<span class=\"string\">'9'</span>)&amp;&amp;c!=<span class=\"string\">'-'</span>) c=getch();<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>,c=getch();<span class=\"keyword\">while</span> (c&gt;=<span class=\"string\">'0'</span>&amp;&amp;c&lt;=<span class=\"string\">'9'</span>)&#123;T=((T&lt;&lt;<span class=\"number\">1</span>)+(T&lt;&lt;<span class=\"number\">3</span>))+c<span class=\"number\">-48</span>;c=getch();&#125;<span class=\"keyword\">return</span> T*f;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>),x = -x;<span class=\"keyword\">if</span> (x&gt;=<span class=\"number\">10</span>) <span class=\"built_in\">write</span>(x / <span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>((x % <span class=\"number\">10</span>)+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> IO;</span><br><span class=\"line\">LL R,ans;</span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">gcd</span><span class=\"params\">(LL a,LL b)</span></span>&#123;<span class=\"keyword\">return</span> !b?a:gcd(b,a%b);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(LL x,<span class=\"keyword\">double</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (y == <span class=\"built_in\">floor</span>(y))&#123;</span><br><span class=\"line\">        LL _y=(LL)<span class=\"built_in\">floor</span>(y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (gcd(x*x,_y*_y)==<span class=\"number\">1</span>&amp;&amp;x*x!=_y*_y) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>,&amp;R);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL d=<span class=\"number\">1</span>;d&lt;=<span class=\"built_in\">sqrt</span>(<span class=\"number\">2</span>*R);d++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">2</span>*R % d == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (LL a=<span class=\"number\">1</span>;a&lt;=(LL)<span class=\"built_in\">sqrt</span>(<span class=\"number\">2</span>*R/(<span class=\"number\">2</span>*d));a++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">double</span> b = <span class=\"built_in\">sqrt</span>((<span class=\"number\">2</span>*R)/d-a*a);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (check(a,b)) ans++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d != (<span class=\"number\">2</span>*R)/d)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (LL a=<span class=\"number\">1</span>;a&lt;=(LL)<span class=\"built_in\">sqrt</span>(d/<span class=\"number\">2</span>);a++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">double</span> b = <span class=\"built_in\">sqrt</span>(d - a*a);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (check(a,b)) ans++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,ans*<span class=\"number\">4</span>+<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"BZOJ1042 [HAOI2008] 硬币购物","_content":"\n#### 题意\n\n​\t　硬币购物一共有4种硬币。面值分别为c1,c2,c3,c4。某人去商店买东西，去了tot次。每次带di枚ci硬币，买si的价值的东西。请问每次有多少种付款方法。\n\n<!--more-->\n\n#### 题解\n\n​\t我们考虑用DP预处理出在没有硬币个数限制的情况下，到达si有多少种方法，这个显然用完全背包做。\n\n​\t考虑对于有硬币限制。\n\n答案 = 没有限制的情况 - 第一枚硬币超过限制 - 第二枚硬币超过限制 …… + 第一枚和第二枚硬币超过限制 + 第一枚和第三枚硬币超过限制 …… - 第一枚，第二枚，第三枚硬币超过限制 …… + 第一二三四枚硬币超过限制的情况。\n\n​\t我们要计算第一枚硬币超过限制的情况，\n\n​\t当第1种硬币超过限制时，只要要用到D[1]+1枚硬币，剩余的硬币可以任意分配，所以方案数为 $F[ S – (D[1]+1)\\times C[1] ]$，当且仅当$(S – (D[1]+1)\\times C[1])>=0$，否则方案数为0。其余情况类似，每次询问只用问16次，所以询问的时间复杂度为O(1)。\n\n\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\nusing namespace std;\ntypedef long long LL;\nnamespace IO{\n\tconst int __buffsize = 1000000;char __buff[__buffsize];char *__buffS, *__buffT;\n\tchar getch(){if (__buffS == __buffT){__buffT = (__buffS = __buff) + fread(__buff,1,__buffsize,stdin);if (__buffS == __buffT) return EOF;}return *__buffS++;}\n\t#define getch getchar\n\tLL read(){LL T = 0,f = 1;char c = getch();while ((c<'0'||c>'9')&&c!='-') c=getch();if(c=='-')f=-1,c=getch();while (c>='0'&&c<='9'){T=((T<<1)+(T<<3))+c-48;c=getch();}return T*f;}\n\tvoid write(int x){if(x < 0) putchar('0'),x = -x;if (x>=10) write(x / 10);putchar((x % 10)+'0');}\n\tvoid writeln(int x){write(x);puts(\"\");}\n};\nusing namespace IO;\nLL f[100005];\nLL c[10],d[10],s;\nint main(){\n\tfor(int i=1;i<=4;i++) c[i]=read();\n\tf[0] = 1;\n\tfor (int i=1;i<=4;i++)\n\t\tfor (int j=0;j<=100000 - c[i];j++)\n\t\t\tf[j+c[i]] += f[j];\n\tint tot = read();\n\twhile(tot--){\n\t\tLL Ans = 0,res;int cnt;\n\t\tfor (int i=1;i<=4;i++) d[i]=read(); s = read();\n\t\tfor (int i=0;i<(1<<4);i++){\n\t\t\tcnt = 0;\n\t\t\tres = s;\n\t\t\tfor (int j=1;j<=4;j++){\n\t\t\t\tcnt += ((i>>(j-1))&1);\n\t\t\t\tres -= ((i>>(j-1))&1) * (d[j]+1) * c[j];\n\t\t\t}\n\t\t\tif (res >= 0)\n\t\t\tif (cnt & 1) Ans -= f[res]; else\n\t\t\t\t\t\t Ans += f[res];\n\t\t}\n\t\tprintf(\"%lld\\n\",Ans);\n\t}\n}\n```\n\n","source":"_posts/BZOJ1042 [HAOI2008]硬币购物.md","raw":"---\ntitle: BZOJ1042 [HAOI2008]硬币购物\ntags: \n - BZOJ\n - DP\n - 容斥原理\n---\n\n#### 题意\n\n​\t　硬币购物一共有4种硬币。面值分别为c1,c2,c3,c4。某人去商店买东西，去了tot次。每次带di枚ci硬币，买si的价值的东西。请问每次有多少种付款方法。\n\n<!--more-->\n\n#### 题解\n\n​\t我们考虑用DP预处理出在没有硬币个数限制的情况下，到达si有多少种方法，这个显然用完全背包做。\n\n​\t考虑对于有硬币限制。\n\n答案 = 没有限制的情况 - 第一枚硬币超过限制 - 第二枚硬币超过限制 …… + 第一枚和第二枚硬币超过限制 + 第一枚和第三枚硬币超过限制 …… - 第一枚，第二枚，第三枚硬币超过限制 …… + 第一二三四枚硬币超过限制的情况。\n\n​\t我们要计算第一枚硬币超过限制的情况，\n\n​\t当第1种硬币超过限制时，只要要用到D[1]+1枚硬币，剩余的硬币可以任意分配，所以方案数为 $F[ S – (D[1]+1)\\times C[1] ]$，当且仅当$(S – (D[1]+1)\\times C[1])>=0$，否则方案数为0。其余情况类似，每次询问只用问16次，所以询问的时间复杂度为O(1)。\n\n\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\nusing namespace std;\ntypedef long long LL;\nnamespace IO{\n\tconst int __buffsize = 1000000;char __buff[__buffsize];char *__buffS, *__buffT;\n\tchar getch(){if (__buffS == __buffT){__buffT = (__buffS = __buff) + fread(__buff,1,__buffsize,stdin);if (__buffS == __buffT) return EOF;}return *__buffS++;}\n\t#define getch getchar\n\tLL read(){LL T = 0,f = 1;char c = getch();while ((c<'0'||c>'9')&&c!='-') c=getch();if(c=='-')f=-1,c=getch();while (c>='0'&&c<='9'){T=((T<<1)+(T<<3))+c-48;c=getch();}return T*f;}\n\tvoid write(int x){if(x < 0) putchar('0'),x = -x;if (x>=10) write(x / 10);putchar((x % 10)+'0');}\n\tvoid writeln(int x){write(x);puts(\"\");}\n};\nusing namespace IO;\nLL f[100005];\nLL c[10],d[10],s;\nint main(){\n\tfor(int i=1;i<=4;i++) c[i]=read();\n\tf[0] = 1;\n\tfor (int i=1;i<=4;i++)\n\t\tfor (int j=0;j<=100000 - c[i];j++)\n\t\t\tf[j+c[i]] += f[j];\n\tint tot = read();\n\twhile(tot--){\n\t\tLL Ans = 0,res;int cnt;\n\t\tfor (int i=1;i<=4;i++) d[i]=read(); s = read();\n\t\tfor (int i=0;i<(1<<4);i++){\n\t\t\tcnt = 0;\n\t\t\tres = s;\n\t\t\tfor (int j=1;j<=4;j++){\n\t\t\t\tcnt += ((i>>(j-1))&1);\n\t\t\t\tres -= ((i>>(j-1))&1) * (d[j]+1) * c[j];\n\t\t\t}\n\t\t\tif (res >= 0)\n\t\t\tif (cnt & 1) Ans -= f[res]; else\n\t\t\t\t\t\t Ans += f[res];\n\t\t}\n\t\tprintf(\"%lld\\n\",Ans);\n\t}\n}\n```\n\n","slug":"BZOJ1042 [HAOI2008]硬币购物","published":1,"date":"2021-08-28T13:02:49.992Z","updated":"2021-08-28T13:02:49.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvso32h000dvfnu9jtk42ks","content":"<h4 id=\"题意\"><a class=\"markdownIt-Anchor\" href=\"# 题意\"></a> 题意 </h4><p>​\t　硬币购物一共有 4 种硬币。面值分别为 c1,c2,c3,c4。某人去商店买东西，去了 tot 次。每次带 di 枚 ci 硬币，买 si 的价值的东西。请问每次有多少种付款方法。</p><a id=\"more\"></a><h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"# 题解\"></a> 题解</h4><p>​\t我们考虑用 DP 预处理出在没有硬币个数限制的情况下，到达 si 有多少种方法，这个显然用完全背包做。</p><p>​\t考虑对于有硬币限制。</p><p> 答案 = 没有限制的情况 - 第一枚硬币超过限制 - 第二枚硬币超过限制 …… + 第一枚和第二枚硬币超过限制 + 第一枚和第三枚硬币超过限制 …… - 第一枚，第二枚，第三枚硬币超过限制 …… + 第一二三四枚硬币超过限制的情况。</p><p>​\t我们要计算第一枚硬币超过限制的情况，</p><p>​\t当第 1 种硬币超过限制时，只要要用到 D[1]+1 枚硬币，剩余的硬币可以任意分配，所以方案数为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">[</mo><mi>S</mi><mi mathvariant=\"normal\">–</mi><mo stretchy=\"false\">(</mo><mi>D</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>×</mo><mi>C</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">F[S – (D[1]+1)\\times C[1] ]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05764em\">S</span><span class=\"mord\" style=\"margin-right:.02778em\">–</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">D</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07153em\">C</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mclose\">]</span></span></span></span>，当且仅当<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>S</mi><mi mathvariant=\"normal\">–</mi><mo stretchy=\"false\">(</mo><mi>D</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>×</mo><mi>C</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">(S – (D[1]+1)\\times C[1])&gt;=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.05764em\">S</span><span class=\"mord\" style=\"margin-right:.02778em\">–</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">D</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07153em\">C</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">0</span></span></span></span>，否则方案数为 0。其余情况类似，每次询问只用问 16 次，所以询问的时间复杂度为 O(1)。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> IO&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> __buffsize = <span class=\"number\">1000000</span>;<span class=\"keyword\">char</span> __buff[__buffsize];<span class=\"keyword\">char</span> *__buffS, *__buffT;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">getch</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">if</span> (__buffS == __buffT)&#123;__buffT = (__buffS = __buff) + fread(__buff,<span class=\"number\">1</span>,__buffsize,<span class=\"built_in\">stdin</span>);<span class=\"keyword\">if</span> (__buffS == __buffT) <span class=\"keyword\">return</span> EOF;&#125;<span class=\"keyword\">return</span> *__buffS++;&#125;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> getch getchar</span></span><br><span class=\"line\">    <span class=\"function\">LL <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;LL T = <span class=\"number\">0</span>,f = <span class=\"number\">1</span>;<span class=\"keyword\">char</span> c = getch();<span class=\"keyword\">while</span> ((c&lt;<span class=\"string\">'0'</span>||c&gt;<span class=\"string\">'9'</span>)&amp;&amp;c!=<span class=\"string\">'-'</span>) c=getch();<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>,c=getch();<span class=\"keyword\">while</span> (c&gt;=<span class=\"string\">'0'</span>&amp;&amp;c&lt;=<span class=\"string\">'9'</span>)&#123;T=((T&lt;&lt;<span class=\"number\">1</span>)+(T&lt;&lt;<span class=\"number\">3</span>))+c<span class=\"number\">-48</span>;c=getch();&#125;<span class=\"keyword\">return</span> T*f;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>),x = -x;<span class=\"keyword\">if</span> (x&gt;=<span class=\"number\">10</span>) <span class=\"built_in\">write</span>(x / <span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>((x % <span class=\"number\">10</span>)+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> IO;</span><br><span class=\"line\">LL f[<span class=\"number\">100005</span>];</span><br><span class=\"line\">LL c[<span class=\"number\">10</span>],d[<span class=\"number\">10</span>],s;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">4</span>;i++) c[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    f[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">4</span>;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;=<span class=\"number\">100000</span> - c[i];j++)</span><br><span class=\"line\">            f[j+c[i]] += f[j];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(tot--)&#123;</span><br><span class=\"line\">        LL Ans = <span class=\"number\">0</span>,res;<span class=\"keyword\">int</span> cnt;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">4</span>;i++) d[i]=<span class=\"built_in\">read</span>(); s = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;(<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">4</span>);i++)&#123;</span><br><span class=\"line\">            cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">            res = s;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=<span class=\"number\">4</span>;j++)&#123;</span><br><span class=\"line\">                cnt += ((i&gt;&gt;(j<span class=\"number\">-1</span>))&amp;<span class=\"number\">1</span>);</span><br><span class=\"line\">                res -= ((i&gt;&gt;(j<span class=\"number\">-1</span>))&amp;<span class=\"number\">1</span>) * (d[j]+<span class=\"number\">1</span>) * c[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (res &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cnt &amp; <span class=\"number\">1</span>) Ans -= f[res]; <span class=\"keyword\">else</span></span><br><span class=\"line\">                         Ans += f[res];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,Ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"题意\"><a class=\"markdownIt-Anchor\" href=\"#题意\"></a> 题意</h4><p>​\t　硬币购物一共有4种硬币。面值分别为c1,c2,c3,c4。某人去商店买东西，去了tot次。每次带di枚ci硬币，买si的价值的东西。请问每次有多少种付款方法。</p>","more":"<h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\"></a> 题解</h4><p>​\t我们考虑用DP预处理出在没有硬币个数限制的情况下，到达si有多少种方法，这个显然用完全背包做。</p><p>​\t考虑对于有硬币限制。</p><p>答案 = 没有限制的情况 - 第一枚硬币超过限制 - 第二枚硬币超过限制 …… + 第一枚和第二枚硬币超过限制 + 第一枚和第三枚硬币超过限制 …… - 第一枚，第二枚，第三枚硬币超过限制 …… + 第一二三四枚硬币超过限制的情况。</p><p>​\t我们要计算第一枚硬币超过限制的情况，</p><p>​\t当第1种硬币超过限制时，只要要用到D[1]+1枚硬币，剩余的硬币可以任意分配，所以方案数为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">[</mo><mi>S</mi><mi mathvariant=\"normal\">–</mi><mo stretchy=\"false\">(</mo><mi>D</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>×</mo><mi>C</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">F[ S – (D[1]+1)\\times C[1] ]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05764em\">S</span><span class=\"mord\" style=\"margin-right:.02778em\">–</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">D</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07153em\">C</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mclose\">]</span></span></span></span>，当且仅当<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>S</mi><mi mathvariant=\"normal\">–</mi><mo stretchy=\"false\">(</mo><mi>D</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>×</mo><mi>C</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">(S – (D[1]+1)\\times C[1])&gt;=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.05764em\">S</span><span class=\"mord\" style=\"margin-right:.02778em\">–</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">D</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07153em\">C</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">0</span></span></span></span>，否则方案数为0。其余情况类似，每次询问只用问16次，所以询问的时间复杂度为O(1)。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> IO&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> __buffsize = <span class=\"number\">1000000</span>;<span class=\"keyword\">char</span> __buff[__buffsize];<span class=\"keyword\">char</span> *__buffS, *__buffT;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">getch</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">if</span> (__buffS == __buffT)&#123;__buffT = (__buffS = __buff) + fread(__buff,<span class=\"number\">1</span>,__buffsize,<span class=\"built_in\">stdin</span>);<span class=\"keyword\">if</span> (__buffS == __buffT) <span class=\"keyword\">return</span> EOF;&#125;<span class=\"keyword\">return</span> *__buffS++;&#125;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> getch getchar</span></span><br><span class=\"line\">    <span class=\"function\">LL <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;LL T = <span class=\"number\">0</span>,f = <span class=\"number\">1</span>;<span class=\"keyword\">char</span> c = getch();<span class=\"keyword\">while</span> ((c&lt;<span class=\"string\">'0'</span>||c&gt;<span class=\"string\">'9'</span>)&amp;&amp;c!=<span class=\"string\">'-'</span>) c=getch();<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>,c=getch();<span class=\"keyword\">while</span> (c&gt;=<span class=\"string\">'0'</span>&amp;&amp;c&lt;=<span class=\"string\">'9'</span>)&#123;T=((T&lt;&lt;<span class=\"number\">1</span>)+(T&lt;&lt;<span class=\"number\">3</span>))+c<span class=\"number\">-48</span>;c=getch();&#125;<span class=\"keyword\">return</span> T*f;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>),x = -x;<span class=\"keyword\">if</span> (x&gt;=<span class=\"number\">10</span>) <span class=\"built_in\">write</span>(x / <span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>((x % <span class=\"number\">10</span>)+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> IO;</span><br><span class=\"line\">LL f[<span class=\"number\">100005</span>];</span><br><span class=\"line\">LL c[<span class=\"number\">10</span>],d[<span class=\"number\">10</span>],s;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">4</span>;i++) c[i]=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    f[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">4</span>;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;=<span class=\"number\">100000</span> - c[i];j++)</span><br><span class=\"line\">            f[j+c[i]] += f[j];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(tot--)&#123;</span><br><span class=\"line\">        LL Ans = <span class=\"number\">0</span>,res;<span class=\"keyword\">int</span> cnt;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">4</span>;i++) d[i]=<span class=\"built_in\">read</span>(); s = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;(<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">4</span>);i++)&#123;</span><br><span class=\"line\">            cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">            res = s;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=<span class=\"number\">4</span>;j++)&#123;</span><br><span class=\"line\">                cnt += ((i&gt;&gt;(j<span class=\"number\">-1</span>))&amp;<span class=\"number\">1</span>);</span><br><span class=\"line\">                res -= ((i&gt;&gt;(j<span class=\"number\">-1</span>))&amp;<span class=\"number\">1</span>) * (d[j]+<span class=\"number\">1</span>) * c[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (res &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cnt &amp; <span class=\"number\">1</span>) Ans -= f[res]; <span class=\"keyword\">else</span></span><br><span class=\"line\">                         Ans += f[res];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,Ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"BZOJ1043 [HAOI2008] 下落的圆盘","_content":"\n#### 题意\n\n​\t有n个圆盘从天而降，后面落下的可以盖住前面的。求最后形成的封闭区域的周长。看下面这副图, 所有的红色线条的总长度即为所求. \n\n![img](http://www.lydsy.com/JudgeOnline/images/1043.jpg)\n\n<!--more-->\n\n#### 题解\n\n​\t显然，对于一个圆，我们可以用弧度来表示它哪些地方没有被覆盖\n\n那么我们怎么算出弧度呢？对于两个相交的圆，可以得到它们交点到两个圆心的距离(r和R)，同时也可以得到它们圆心的距离\n\n​\t我们可以通过余弦定理来解出角度。\n\n​\t事实上我们把这些弧度扔到一个数组里面，然后排个序去重叠，计算有多少弧度是被覆盖的，再减一减。那么弧度需要得到一个范围。\n\n![计算](BZOJ1043 [HAOI2008]下落的圆盘\\W.png)\n\n统计可以用类似差分的做法。\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\nusing namespace std;\ntypedef long long LL;\nstruct Point{\n\tdouble x,y;\n\tPoint(){}\n\tPoint(double x,double y):x(x),y(y){}\n};\nstruct Circle{\n\tPoint o;\n\tdouble r;\n}c[2005];\nstruct Node{\n\tdouble x;\n\tint v;\n\tbool operator < (const Node &a) const{\n\t\treturn x < a.x;\n\t}\n}p[2010];\ndouble ans;\nint n,tot,sum,flag;\n#define sqr(x) ((x)*(x))\nconst double pi = acos(-1.0);\ndouble dist(Point a,Point b){return sqrt(sqr(a.x-b.x) + sqr(a.y-b.y));}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor (int i=1;i<=n;i++)\n\t\tscanf(\"%lf%lf%lf\",&c[i].r,&c[i].o.x,&c[i].o.y);\n\tfor (int i=1;i<=n;i++){\n\t\ttot = sum = flag = 0;\n\t\tfor (int j=i+1;j<=n;j++){\n\t\t\tdouble Dis = dist(c[i].o,c[j].o);\n\t\t\tif (Dis <= c[j].r - c[i].r){\n\t\t\t\tflag = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (Dis > fabs(c[i].r - c[j].r) && Dis <= c[i].r + c[j].r){\n\t\t\t\tdouble a = acos((c[i].r * c[i].r + Dis*Dis - c[j].r*c[j].r)/(2*c[i].r*Dis));\n\t\t\t\tdouble b = atan2(c[j].o.y-c[i].o.y,c[j].o.x-c[i].o.x);\n\t\t\t\tp[++tot].x = b-a;\n\t\t\t\tp[tot].v = 1;\n\t\t\t\tp[++tot].x = b+a;\n\t\t\t\tp[tot] .v = -1;\n\t\t\t\tif (p[tot-1].x<0) p[tot-1].x+=2*pi;\n\t\t\t\tif (p[tot].x<0) p[tot].x+=2*pi;\n\t\t\t\tif (p[tot-1].x>=2*pi) p[tot-1].x-=2*pi;\n\t\t\t\tif (p[tot].x>=2*pi) p[tot].x-=2*pi;\n\t\t\t\tif (p[tot-1].x > p[tot].x) sum++;\n\t\t\t}\n\t\t}\n\t\tif (flag) continue;\n\t\tans += c[i].r * 2 * pi;\n\t\tif (!tot) continue;\n\t\tsort(p+1,p+1+tot);\n\t\tfor (int j=1;j<=tot;j++){\n\t\t\tif (sum) ans-=c[i].r*(p[j].x-p[j-1].x);\n\t\t\tsum += p[j].v;\n\t\t}\n\t\tif (sum) ans -= c[i].r * (2*pi-p[tot].x);\n\t}\n\tprintf(\"%.3lf\\n\",ans);\n}\n```\n\n","source":"_posts/BZOJ1043 [HAOI2008]下落的圆盘.md","raw":"---\ntitle: BZOJ1043 [HAOI2008]下落的圆盘\ntags:\n - BZOJ\n---\n\n#### 题意\n\n​\t有n个圆盘从天而降，后面落下的可以盖住前面的。求最后形成的封闭区域的周长。看下面这副图, 所有的红色线条的总长度即为所求. \n\n![img](http://www.lydsy.com/JudgeOnline/images/1043.jpg)\n\n<!--more-->\n\n#### 题解\n\n​\t显然，对于一个圆，我们可以用弧度来表示它哪些地方没有被覆盖\n\n那么我们怎么算出弧度呢？对于两个相交的圆，可以得到它们交点到两个圆心的距离(r和R)，同时也可以得到它们圆心的距离\n\n​\t我们可以通过余弦定理来解出角度。\n\n​\t事实上我们把这些弧度扔到一个数组里面，然后排个序去重叠，计算有多少弧度是被覆盖的，再减一减。那么弧度需要得到一个范围。\n\n![计算](BZOJ1043 [HAOI2008]下落的圆盘\\W.png)\n\n统计可以用类似差分的做法。\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\nusing namespace std;\ntypedef long long LL;\nstruct Point{\n\tdouble x,y;\n\tPoint(){}\n\tPoint(double x,double y):x(x),y(y){}\n};\nstruct Circle{\n\tPoint o;\n\tdouble r;\n}c[2005];\nstruct Node{\n\tdouble x;\n\tint v;\n\tbool operator < (const Node &a) const{\n\t\treturn x < a.x;\n\t}\n}p[2010];\ndouble ans;\nint n,tot,sum,flag;\n#define sqr(x) ((x)*(x))\nconst double pi = acos(-1.0);\ndouble dist(Point a,Point b){return sqrt(sqr(a.x-b.x) + sqr(a.y-b.y));}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor (int i=1;i<=n;i++)\n\t\tscanf(\"%lf%lf%lf\",&c[i].r,&c[i].o.x,&c[i].o.y);\n\tfor (int i=1;i<=n;i++){\n\t\ttot = sum = flag = 0;\n\t\tfor (int j=i+1;j<=n;j++){\n\t\t\tdouble Dis = dist(c[i].o,c[j].o);\n\t\t\tif (Dis <= c[j].r - c[i].r){\n\t\t\t\tflag = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (Dis > fabs(c[i].r - c[j].r) && Dis <= c[i].r + c[j].r){\n\t\t\t\tdouble a = acos((c[i].r * c[i].r + Dis*Dis - c[j].r*c[j].r)/(2*c[i].r*Dis));\n\t\t\t\tdouble b = atan2(c[j].o.y-c[i].o.y,c[j].o.x-c[i].o.x);\n\t\t\t\tp[++tot].x = b-a;\n\t\t\t\tp[tot].v = 1;\n\t\t\t\tp[++tot].x = b+a;\n\t\t\t\tp[tot] .v = -1;\n\t\t\t\tif (p[tot-1].x<0) p[tot-1].x+=2*pi;\n\t\t\t\tif (p[tot].x<0) p[tot].x+=2*pi;\n\t\t\t\tif (p[tot-1].x>=2*pi) p[tot-1].x-=2*pi;\n\t\t\t\tif (p[tot].x>=2*pi) p[tot].x-=2*pi;\n\t\t\t\tif (p[tot-1].x > p[tot].x) sum++;\n\t\t\t}\n\t\t}\n\t\tif (flag) continue;\n\t\tans += c[i].r * 2 * pi;\n\t\tif (!tot) continue;\n\t\tsort(p+1,p+1+tot);\n\t\tfor (int j=1;j<=tot;j++){\n\t\t\tif (sum) ans-=c[i].r*(p[j].x-p[j-1].x);\n\t\t\tsum += p[j].v;\n\t\t}\n\t\tif (sum) ans -= c[i].r * (2*pi-p[tot].x);\n\t}\n\tprintf(\"%.3lf\\n\",ans);\n}\n```\n\n","slug":"BZOJ1043 [HAOI2008]下落的圆盘","published":1,"date":"2021-08-28T13:02:49.995Z","updated":"2021-08-28T13:02:49.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvso32m000fvfnu4137c7ae","content":"<h4 id=\"题意\"><a class=\"markdownIt-Anchor\" href=\"# 题意\"></a> 题意 </h4><p>​\t有 n 个圆盘从天而降，后面落下的可以盖住前面的。求最后形成的封闭区域的周长。看下面这副图, 所有的红色线条的总长度即为所求.</p><p><img src=\"http://www.lydsy.com/JudgeOnline/images/1043.jpg\" alt=\"img\"></p><a id=\"more\"></a><h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"# 题解\"></a> 题解</h4><p>​\t显然，对于一个圆，我们可以用弧度来表示它哪些地方没有被覆盖</p><p> 那么我们怎么算出弧度呢？对于两个相交的圆，可以得到它们交点到两个圆心的距离 (r 和 R)，同时也可以得到它们圆心的距离</p><p>​\t我们可以通过余弦定理来解出角度。</p><p>​\t事实上我们把这些弧度扔到一个数组里面，然后排个序去重叠，计算有多少弧度是被覆盖的，再减一减。那么弧度需要得到一个范围。</p><p>![计算](BZOJ1043 [HAOI2008] 下落的圆盘 \\W.png)</p><p>统计可以用类似差分的做法。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> x,y;</span><br><span class=\"line\">    Point()&#123;&#125;</span><br><span class=\"line\">    Point(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y):x(x),y(y)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Circle</span>&#123;</span></span><br><span class=\"line\">    Point o;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> r;</span><br><span class=\"line\">&#125;c[<span class=\"number\">2005</span>];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> Node &amp;a) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; a.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;p[<span class=\"number\">2010</span>];</span><br><span class=\"line\"><span class=\"keyword\">double</span> ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,tot,sum,flag;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sqr(x) ((x)*(x))</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> pi = <span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">dist</span><span class=\"params\">(Point a,Point b)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(sqr(a.x-b.x) + sqr(a.y-b.y));&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf%lf%lf\"</span>,&amp;c[i].r,&amp;c[i].o.x,&amp;c[i].o.y);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        tot = sum = flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>;j&lt;=n;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">double</span> Dis = dist(c[i].o,c[j].o);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Dis &lt;= c[j].r - c[i].r)&#123;</span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Dis &gt; <span class=\"built_in\">fabs</span>(c[i].r - c[j].r) &amp;&amp; Dis &lt;= c[i].r + c[j].r)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">double</span> a = <span class=\"built_in\">acos</span>((c[i].r * c[i].r + Dis*Dis - c[j].r*c[j].r)/(<span class=\"number\">2</span>*c[i].r*Dis));</span><br><span class=\"line\">                <span class=\"keyword\">double</span> b = <span class=\"built_in\">atan2</span>(c[j].o.y-c[i].o.y,c[j].o.x-c[i].o.x);</span><br><span class=\"line\">                p[++tot].x = b-a;</span><br><span class=\"line\">                p[tot].v = <span class=\"number\">1</span>;</span><br><span class=\"line\">                p[++tot].x = b+a;</span><br><span class=\"line\">                p[tot] .v = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p[tot<span class=\"number\">-1</span>].x&lt;<span class=\"number\">0</span>) p[tot<span class=\"number\">-1</span>].x+=<span class=\"number\">2</span>*pi;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p[tot].x&lt;<span class=\"number\">0</span>) p[tot].x+=<span class=\"number\">2</span>*pi;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p[tot<span class=\"number\">-1</span>].x&gt;=<span class=\"number\">2</span>*pi) p[tot<span class=\"number\">-1</span>].x-=<span class=\"number\">2</span>*pi;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p[tot].x&gt;=<span class=\"number\">2</span>*pi) p[tot].x-=<span class=\"number\">2</span>*pi;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p[tot<span class=\"number\">-1</span>].x &gt; p[tot].x) sum++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        ans += c[i].r * <span class=\"number\">2</span> * pi;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tot) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        sort(p+<span class=\"number\">1</span>,p+<span class=\"number\">1</span>+tot);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=tot;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum) ans-=c[i].r*(p[j].x-p[j<span class=\"number\">-1</span>].x);</span><br><span class=\"line\">            sum += p[j].v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum) ans -= c[i].r * (<span class=\"number\">2</span>*pi-p[tot].x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.3lf\\n\"</span>,ans);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"题意\"><a class=\"markdownIt-Anchor\" href=\"#题意\"></a> 题意</h4><p>​\t有n个圆盘从天而降，后面落下的可以盖住前面的。求最后形成的封闭区域的周长。看下面这副图, 所有的红色线条的总长度即为所求.</p><p><img src=\"http://www.lydsy.com/JudgeOnline/images/1043.jpg\" alt=\"img\"></p>","more":"<h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\"></a> 题解</h4><p>​\t显然，对于一个圆，我们可以用弧度来表示它哪些地方没有被覆盖</p><p>那么我们怎么算出弧度呢？对于两个相交的圆，可以得到它们交点到两个圆心的距离(r和R)，同时也可以得到它们圆心的距离</p><p>​\t我们可以通过余弦定理来解出角度。</p><p>​\t事实上我们把这些弧度扔到一个数组里面，然后排个序去重叠，计算有多少弧度是被覆盖的，再减一减。那么弧度需要得到一个范围。</p><p>![计算](BZOJ1043 [HAOI2008]下落的圆盘\\W.png)</p><p>统计可以用类似差分的做法。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> x,y;</span><br><span class=\"line\">    Point()&#123;&#125;</span><br><span class=\"line\">    Point(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y):x(x),y(y)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Circle</span>&#123;</span></span><br><span class=\"line\">    Point o;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> r;</span><br><span class=\"line\">&#125;c[<span class=\"number\">2005</span>];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> Node &amp;a) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; a.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;p[<span class=\"number\">2010</span>];</span><br><span class=\"line\"><span class=\"keyword\">double</span> ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,tot,sum,flag;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sqr(x) ((x)*(x))</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> pi = <span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">dist</span><span class=\"params\">(Point a,Point b)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(sqr(a.x-b.x) + sqr(a.y-b.y));&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf%lf%lf\"</span>,&amp;c[i].r,&amp;c[i].o.x,&amp;c[i].o.y);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        tot = sum = flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>;j&lt;=n;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">double</span> Dis = dist(c[i].o,c[j].o);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Dis &lt;= c[j].r - c[i].r)&#123;</span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Dis &gt; <span class=\"built_in\">fabs</span>(c[i].r - c[j].r) &amp;&amp; Dis &lt;= c[i].r + c[j].r)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">double</span> a = <span class=\"built_in\">acos</span>((c[i].r * c[i].r + Dis*Dis - c[j].r*c[j].r)/(<span class=\"number\">2</span>*c[i].r*Dis));</span><br><span class=\"line\">                <span class=\"keyword\">double</span> b = <span class=\"built_in\">atan2</span>(c[j].o.y-c[i].o.y,c[j].o.x-c[i].o.x);</span><br><span class=\"line\">                p[++tot].x = b-a;</span><br><span class=\"line\">                p[tot].v = <span class=\"number\">1</span>;</span><br><span class=\"line\">                p[++tot].x = b+a;</span><br><span class=\"line\">                p[tot] .v = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p[tot<span class=\"number\">-1</span>].x&lt;<span class=\"number\">0</span>) p[tot<span class=\"number\">-1</span>].x+=<span class=\"number\">2</span>*pi;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p[tot].x&lt;<span class=\"number\">0</span>) p[tot].x+=<span class=\"number\">2</span>*pi;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p[tot<span class=\"number\">-1</span>].x&gt;=<span class=\"number\">2</span>*pi) p[tot<span class=\"number\">-1</span>].x-=<span class=\"number\">2</span>*pi;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p[tot].x&gt;=<span class=\"number\">2</span>*pi) p[tot].x-=<span class=\"number\">2</span>*pi;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p[tot<span class=\"number\">-1</span>].x &gt; p[tot].x) sum++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        ans += c[i].r * <span class=\"number\">2</span> * pi;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tot) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        sort(p+<span class=\"number\">1</span>,p+<span class=\"number\">1</span>+tot);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=tot;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum) ans-=c[i].r*(p[j].x-p[j<span class=\"number\">-1</span>].x);</span><br><span class=\"line\">            sum += p[j].v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum) ans -= c[i].r * (<span class=\"number\">2</span>*pi-p[tot].x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.3lf\\n\"</span>,ans);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"BZOJ1044 [HAOI2008] 木棍分割","_content":"\n\n\n#### 题意\n\n​\t　　有n根木棍, 第i根木棍的长度为Li,n根木棍依次连结了一起, 总共有n-1个连接处. 现在允许你最多砍断m个连接处, 砍完后n根木棍被分成了很多段,要求满足总长度最大的一段长度最小, 并且输出有多少种砍的方法使得总长度最大的一段长度最小. 并将结果mod 10007。。。\n\n<!--more-->\n\n#### 题解\n\n第一问显然可以二分做。\n\n第二问的话：\n\n$f[i,j]$表示前i个，分成j段，其中第i个是第j段的结尾有多少情况 \n$f[i,j] = \\sum{f[k][j-1]} ——满足k<i且sum[i] - sum[k-1] <= L $\n两个指针扫一遍就可以了 \n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\nnamespace IO{\n\tconst int __buffsize = 1000000;char __buff[__buffsize];char *__buffS, *__buffT;\n\tchar getch(){if (__buffS == __buffT){__buffT = (__buffS = __buff) + fread(__buff,1,__buffsize,stdin);if (__buffS == __buffT) return EOF;}return *__buffS++;}\n\t#define getch getchar\n\tint read(){int T = 0,f = 1;char c = getch();while ((c<'0'||c>'9')&&c!='-') c=getch();if(c=='-')f=-1,c=getch();while (c>='0'&&c<='9'){T=((T<<1)+(T<<3))+c-48;c=getch();}return T*f;}\n\tvoid write(int x){if(x < 0) putchar('0'),x = -x;if (x>=10) write(x / 10);putchar((x % 10)+'0');}\n};\n#define pc putchar\nusing namespace IO;\nint a[50005],n,m,L,R,res;\nbool check(int mid){\n\tint cnt=0,res=0;\n\tfor (int i=1;i<=n;i++){\n\t\tif (cnt + a[i] > mid){\n\t\t\tcnt = a[i];\n\t\t\tres ++;\n\t\t} else\n\t\t\tcnt += a[i];\n\t}\n\treturn res <= m;\n}\nint sum[50005];\nint Ans;\nconst int Mod = 1e4+7;\nint f[2][50005];\nint main(){\n\tn = read();m = read();\n\tL = 0,R = 0;\n\tsum[0]=0;\n\tfor (int i=1;i<=n;i++){\n\t\ta[i] = read();\n\t\tL=max(L,a[i]);\n\t\tR+=a[i];\n\t\tsum[i] = sum[i-1] + a[i];\n\t}\n\twhile(L<R){\n\t\tint mid = (L+R)>>1;\n\t\tif(check(mid)) R=mid; else L=mid+1;\n\t}\n\tAns = 0;\n\twrite(L);pc(' ');\n\tfor (int i=1;i<=n;i++) f[0][i] = (sum[i]<=L);\n\tfor (int j=1;j<=m;j++){\n\t\tint tot=0,_=1;\n\t\tfor (int i=1;i<=n;i++){\n\t\t\twhile(_<i && sum[i]-sum[_]>L){\n\t\t\t\ttot = (tot - f[(j-1)&1][_] + Mod)%Mod;\n\t\t\t\t_++;\n\t\t\t}\n\t\t\tf[j&1][i] = tot;\n\t\t\ttot = (tot + f[(j-1)&1][i]) % Mod; \n\t\t}\n\t\tAns = (Ans + f[j&1][n]) % Mod;\n\t}\n\twrite(Ans);pc('\\n');\n\treturn 0;\n}\n```\n\n","source":"_posts/BZOJ1044 [HAOI2008]木棍分割.md","raw":"---\ntitle: BZOJ1044 [HAOI2008]木棍分割\ntags:\n - BZOJ\n - DP\n - 二分法\n---\n\n\n\n#### 题意\n\n​\t　　有n根木棍, 第i根木棍的长度为Li,n根木棍依次连结了一起, 总共有n-1个连接处. 现在允许你最多砍断m个连接处, 砍完后n根木棍被分成了很多段,要求满足总长度最大的一段长度最小, 并且输出有多少种砍的方法使得总长度最大的一段长度最小. 并将结果mod 10007。。。\n\n<!--more-->\n\n#### 题解\n\n第一问显然可以二分做。\n\n第二问的话：\n\n$f[i,j]$表示前i个，分成j段，其中第i个是第j段的结尾有多少情况 \n$f[i,j] = \\sum{f[k][j-1]} ——满足k<i且sum[i] - sum[k-1] <= L $\n两个指针扫一遍就可以了 \n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\nnamespace IO{\n\tconst int __buffsize = 1000000;char __buff[__buffsize];char *__buffS, *__buffT;\n\tchar getch(){if (__buffS == __buffT){__buffT = (__buffS = __buff) + fread(__buff,1,__buffsize,stdin);if (__buffS == __buffT) return EOF;}return *__buffS++;}\n\t#define getch getchar\n\tint read(){int T = 0,f = 1;char c = getch();while ((c<'0'||c>'9')&&c!='-') c=getch();if(c=='-')f=-1,c=getch();while (c>='0'&&c<='9'){T=((T<<1)+(T<<3))+c-48;c=getch();}return T*f;}\n\tvoid write(int x){if(x < 0) putchar('0'),x = -x;if (x>=10) write(x / 10);putchar((x % 10)+'0');}\n};\n#define pc putchar\nusing namespace IO;\nint a[50005],n,m,L,R,res;\nbool check(int mid){\n\tint cnt=0,res=0;\n\tfor (int i=1;i<=n;i++){\n\t\tif (cnt + a[i] > mid){\n\t\t\tcnt = a[i];\n\t\t\tres ++;\n\t\t} else\n\t\t\tcnt += a[i];\n\t}\n\treturn res <= m;\n}\nint sum[50005];\nint Ans;\nconst int Mod = 1e4+7;\nint f[2][50005];\nint main(){\n\tn = read();m = read();\n\tL = 0,R = 0;\n\tsum[0]=0;\n\tfor (int i=1;i<=n;i++){\n\t\ta[i] = read();\n\t\tL=max(L,a[i]);\n\t\tR+=a[i];\n\t\tsum[i] = sum[i-1] + a[i];\n\t}\n\twhile(L<R){\n\t\tint mid = (L+R)>>1;\n\t\tif(check(mid)) R=mid; else L=mid+1;\n\t}\n\tAns = 0;\n\twrite(L);pc(' ');\n\tfor (int i=1;i<=n;i++) f[0][i] = (sum[i]<=L);\n\tfor (int j=1;j<=m;j++){\n\t\tint tot=0,_=1;\n\t\tfor (int i=1;i<=n;i++){\n\t\t\twhile(_<i && sum[i]-sum[_]>L){\n\t\t\t\ttot = (tot - f[(j-1)&1][_] + Mod)%Mod;\n\t\t\t\t_++;\n\t\t\t}\n\t\t\tf[j&1][i] = tot;\n\t\t\ttot = (tot + f[(j-1)&1][i]) % Mod; \n\t\t}\n\t\tAns = (Ans + f[j&1][n]) % Mod;\n\t}\n\twrite(Ans);pc('\\n');\n\treturn 0;\n}\n```\n\n","slug":"BZOJ1044 [HAOI2008]木棍分割","published":1,"date":"2021-08-28T13:02:49.995Z","updated":"2021-08-28T13:02:49.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvso32q000ivfnu0y5b1367","content":"<h4 id=\"题意\"><a class=\"markdownIt-Anchor\" href=\"# 题意\"></a> 题意 </h4><p>​\t　　有 n 根木棍, 第 i 根木棍的长度为 Li,n 根木棍依次连结了一起, 总共有 n-1 个连接处. 现在允许你最多砍断 m 个连接处, 砍完后 n 根木棍被分成了很多段, 要求满足总长度最大的一段长度最小, 并且输出有多少种砍的方法使得总长度最大的一段长度最小. 并将结果 mod 10007。。。</p><a id=\"more\"></a><h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"# 题解\"></a> 题解</h4><p> 第一问显然可以二分做。</p><p>第二问的话：</p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[i,j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span></span></span></span>表示前 i 个，分成 j 段，其中第 i 个是第 j 段的结尾有多少情况 <br>$f[i,j] = \\sum{f[k][j-1]} ——满足 k&lt;i 且 sum[i] - sum[k-1] &lt;= L $<br> 两个指针扫一遍就可以了</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> IO&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> __buffsize = <span class=\"number\">1000000</span>;<span class=\"keyword\">char</span> __buff[__buffsize];<span class=\"keyword\">char</span> *__buffS, *__buffT;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">getch</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">if</span> (__buffS == __buffT)&#123;__buffT = (__buffS = __buff) + fread(__buff,<span class=\"number\">1</span>,__buffsize,<span class=\"built_in\">stdin</span>);<span class=\"keyword\">if</span> (__buffS == __buffT) <span class=\"keyword\">return</span> EOF;&#125;<span class=\"keyword\">return</span> *__buffS++;&#125;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> getch getchar</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">int</span> T = <span class=\"number\">0</span>,f = <span class=\"number\">1</span>;<span class=\"keyword\">char</span> c = getch();<span class=\"keyword\">while</span> ((c&lt;<span class=\"string\">'0'</span>||c&gt;<span class=\"string\">'9'</span>)&amp;&amp;c!=<span class=\"string\">'-'</span>) c=getch();<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>,c=getch();<span class=\"keyword\">while</span> (c&gt;=<span class=\"string\">'0'</span>&amp;&amp;c&lt;=<span class=\"string\">'9'</span>)&#123;T=((T&lt;&lt;<span class=\"number\">1</span>)+(T&lt;&lt;<span class=\"number\">3</span>))+c<span class=\"number\">-48</span>;c=getch();&#125;<span class=\"keyword\">return</span> T*f;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>),x = -x;<span class=\"keyword\">if</span> (x&gt;=<span class=\"number\">10</span>) <span class=\"built_in\">write</span>(x / <span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>((x % <span class=\"number\">10</span>)+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> IO;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">50005</span>],n,m,L,R,res;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> mid)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt=<span class=\"number\">0</span>,res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cnt + a[i] &gt; mid)&#123;</span><br><span class=\"line\">            cnt = a[i];</span><br><span class=\"line\">            res ++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">            cnt += a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res &lt;= m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum[<span class=\"number\">50005</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> Ans;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> Mod = <span class=\"number\">1e4</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[<span class=\"number\">2</span>][<span class=\"number\">50005</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>();m = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    L = <span class=\"number\">0</span>,R = <span class=\"number\">0</span>;</span><br><span class=\"line\">    sum[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        a[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        L=<span class=\"built_in\">max</span>(L,a[i]);</span><br><span class=\"line\">        R+=a[i];</span><br><span class=\"line\">        sum[i] = sum[i<span class=\"number\">-1</span>] + a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L&lt;R)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (L+R)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(check(mid)) R=mid; <span class=\"keyword\">else</span> L=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">write</span>(L);pc(<span class=\"string\">''</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) f[<span class=\"number\">0</span>][i] = (sum[i]&lt;=L);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tot=<span class=\"number\">0</span>,_=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(_&lt;i &amp;&amp; sum[i]-sum[_]&gt;L)&#123;</span><br><span class=\"line\">                tot = (tot - f[(j<span class=\"number\">-1</span>)&amp;<span class=\"number\">1</span>][_] + Mod)%Mod;</span><br><span class=\"line\">                _++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            f[j&amp;<span class=\"number\">1</span>][i] = tot;</span><br><span class=\"line\">            tot = (tot + f[(j<span class=\"number\">-1</span>)&amp;<span class=\"number\">1</span>][i]) % Mod; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Ans = (Ans + f[j&amp;<span class=\"number\">1</span>][n]) % Mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">write</span>(Ans);pc(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"题意\"><a class=\"markdownIt-Anchor\" href=\"#题意\"></a> 题意</h4><p>​\t　　有n根木棍, 第i根木棍的长度为Li,n根木棍依次连结了一起, 总共有n-1个连接处. 现在允许你最多砍断m个连接处, 砍完后n根木棍被分成了很多段,要求满足总长度最大的一段长度最小, 并且输出有多少种砍的方法使得总长度最大的一段长度最小. 并将结果mod 10007。。。</p>","more":"<h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\"></a> 题解</h4><p>第一问显然可以二分做。</p><p>第二问的话：</p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[i,j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span></span></span></span>表示前i个，分成j段，其中第i个是第j段的结尾有多少情况<br>$f[i,j] = \\sum{f[k][j-1]} ——满足k&lt;i且sum[i] - sum[k-1] &lt;= L $<br>两个指针扫一遍就可以了</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> IO&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> __buffsize = <span class=\"number\">1000000</span>;<span class=\"keyword\">char</span> __buff[__buffsize];<span class=\"keyword\">char</span> *__buffS, *__buffT;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">getch</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">if</span> (__buffS == __buffT)&#123;__buffT = (__buffS = __buff) + fread(__buff,<span class=\"number\">1</span>,__buffsize,<span class=\"built_in\">stdin</span>);<span class=\"keyword\">if</span> (__buffS == __buffT) <span class=\"keyword\">return</span> EOF;&#125;<span class=\"keyword\">return</span> *__buffS++;&#125;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> getch getchar</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">int</span> T = <span class=\"number\">0</span>,f = <span class=\"number\">1</span>;<span class=\"keyword\">char</span> c = getch();<span class=\"keyword\">while</span> ((c&lt;<span class=\"string\">'0'</span>||c&gt;<span class=\"string\">'9'</span>)&amp;&amp;c!=<span class=\"string\">'-'</span>) c=getch();<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>,c=getch();<span class=\"keyword\">while</span> (c&gt;=<span class=\"string\">'0'</span>&amp;&amp;c&lt;=<span class=\"string\">'9'</span>)&#123;T=((T&lt;&lt;<span class=\"number\">1</span>)+(T&lt;&lt;<span class=\"number\">3</span>))+c<span class=\"number\">-48</span>;c=getch();&#125;<span class=\"keyword\">return</span> T*f;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>),x = -x;<span class=\"keyword\">if</span> (x&gt;=<span class=\"number\">10</span>) <span class=\"built_in\">write</span>(x / <span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>((x % <span class=\"number\">10</span>)+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> IO;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">50005</span>],n,m,L,R,res;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> mid)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt=<span class=\"number\">0</span>,res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cnt + a[i] &gt; mid)&#123;</span><br><span class=\"line\">            cnt = a[i];</span><br><span class=\"line\">            res ++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">            cnt += a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res &lt;= m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum[<span class=\"number\">50005</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> Ans;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> Mod = <span class=\"number\">1e4</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[<span class=\"number\">2</span>][<span class=\"number\">50005</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>();m = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    L = <span class=\"number\">0</span>,R = <span class=\"number\">0</span>;</span><br><span class=\"line\">    sum[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        a[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        L=<span class=\"built_in\">max</span>(L,a[i]);</span><br><span class=\"line\">        R+=a[i];</span><br><span class=\"line\">        sum[i] = sum[i<span class=\"number\">-1</span>] + a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L&lt;R)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (L+R)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(check(mid)) R=mid; <span class=\"keyword\">else</span> L=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">write</span>(L);pc(<span class=\"string\">' '</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) f[<span class=\"number\">0</span>][i] = (sum[i]&lt;=L);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tot=<span class=\"number\">0</span>,_=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(_&lt;i &amp;&amp; sum[i]-sum[_]&gt;L)&#123;</span><br><span class=\"line\">                tot = (tot - f[(j<span class=\"number\">-1</span>)&amp;<span class=\"number\">1</span>][_] + Mod)%Mod;</span><br><span class=\"line\">                _++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            f[j&amp;<span class=\"number\">1</span>][i] = tot;</span><br><span class=\"line\">            tot = (tot + f[(j<span class=\"number\">-1</span>)&amp;<span class=\"number\">1</span>][i]) % Mod; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Ans = (Ans + f[j&amp;<span class=\"number\">1</span>][n]) % Mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">write</span>(Ans);pc(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"线性规划与网络流 24 题","_content":"\n$Loj$上去掉了一题：机器人路径规划问题，所以就不做啦。\n\n[网络流24(23)题题面](https://loj.ac/problems/search?keyword=%E7%BD%91%E7%BB%9C%E6%B5%81+24+%E9%A2%98)\n\n<!--more-->\n\n[TOC]\n\n\n\n# 题解\n\n## 搭配飞行员\n\n​\t题解：**网络最大流**\n\n​\t二分图最大匹配，可以用容易实现的$Hungary$算法$O(n^3/n(m+n)$，也可以用网络流建图，用$Dinic$跑二分图的复杂度是$O(\\sqrt n*m)$别问我为什么。\n\n​\t新建源点S，汇点T，从S向每个正驾驶连一条容量为1的边，每个副驾驶向T连一条容量为1的边，对于每个可以匹配的正驾驶和副驾驶，从正驾驶向副驾驶连一条容量为1的边，跑出来的最大流就是答案。\n\n## 太空飞行计划\n\n​\t题解：**网络最小割**\n\n​\t不妨假设全部收益都得到，而不花费费用。新建源点S，汇点T。\n\n​\t从S向每个实验连一条容量为收益的边，每个实验向器械连一条容量为$inf$的边，每个器械向 T连一条容量为购买费用的边。\n\n​\t此时求最小割，如果在S集，说明这个实验做，如果在T集，说明这个实验不做。\n\n​\t显然，容量为$inf$的边不能被割去，所以如果在S集，必须满足右边全部的实验器材都买了。那么S-最小割就是答案。（最小割=最大流，证明见算导或相关论文）\n\n## 最小路径覆盖\n\n​\t题解：**网络最大流**\n\n​\t新建源点S，汇点T。\n\n​\t我们把每个点拆成两个点$i_1$和$i_2$，对于边$i->j$，连一条$i_1->j_2$,容量为1的边，对于每个点，连$S$到$i_1$容量为1的边，连$i_2$到T容量为1的边。\n\n​\t此时求最大流，如果流过一条$i_1$到$j_2$的边，说明可以把以$i$结尾的点和以$j$开头的两条路径合并起来，变成一条路径。而答案要最小路径覆盖，也就是总点数-合并的次数（最大流）。\n\n​\t因为是DAG，所以不会出现环。\n\n## 魔术球问题\n\n​\t题解：**网络最大流**\n\n​\t如果我们已知答案$Ans$，要判断放1~Ans最少要几根柱子，我们可以这么做：\n\n​\t对于每个数字$i$，如果存在$j$，满足$j>i$，并且$i+j$是完全平方数，那么从$i$到$j$连一条边，连完之后显然这是一个DAG，求出最小路径覆盖就是需要的柱子（做法同最小路径覆盖）\n\n​\t那么这时候我们可以二分答案然后判定，但是基于残量网络的优秀性质，我们可以直接枚举答案，对于一个新节点，重新加入相关边，并在残量网络上跑最大流。到枚举到第一个不可行的$Ans$，答案就是$Ans-1$\n\n​\t输出方案的时候删掉最后两个点，重新跑最大流（或者删除相关容量）。\n\n## 圆桌聚餐\n\n​\t题解：**网络最大流**\n\n​\t新建源点S，汇点T。\n\n​\t从S到每个单位容量为$r_i$的边，从圆桌向T连一条容量为$C_i$的边，每个单位向每个圆桌连一条容量为$i$的边。\n\n​\t跑最大流后看哪些边被流过即可。\n\n## 最长递增子序列\n\n​\t题解：**网络最大流**\n\n​\t注意题目是非严格递增QAQ。\n\n​\t第一问是经典的DP（可以用$O(n^2)$做法水），此时得到$dp$数组$f[i]$表示$i$结尾的最长\n\n​\t第二问可以把每个点拆点，限制流量不超过1（从入点到出点容量为1的边），从S向$f[i]$为1的入点容量为1的边，从$f[i]$为$ans$的出点边向T连一条容量为1的边。\n\n​\t对于可以转移的，并且$f[i]+1=f[j](i<j,a[i]<=a[j])$，从i的出点向j的入点一条容量为1的边，然后跑网络最大流即可。\n\n​\t对于第三问，只需要把1和n的容量限制加上$inf$即可。此时再跑网络最大流即可。\n\n## 试题库\n\n​\t题解：**网路最大流**\n\n​\t新建源点S，汇点T。\n\n​\t试题向类型建容量为1 的边，源点S向试题连容量为1的边，类型向汇点T连容量为需要题数的边，跑网络最大流看是否满流。\n\n​\t输出方案看哪些试题向类型的边被流过。\n\n## 方格取数\n\n​\t题解：**网络最小割**\n\n​\t首先对网格进行黑白染色。\n\n​\t然后假设得到了所有答案。\n\n​\t新建源点S，汇点T，从S向所有白色格子连一条容量为其值的边，所有黑色格子向T连一条容量为其值的边，所有白色格子向其相邻的黑色格子连一条容量为$inf$的边，容易发现此时求最小割即最少减少的答案——如果要选一个白色格子，必须保证其相邻的黑色格子不选（割掉），选黑色格子同理。\n\n## 餐巾计划\n\n​\t题解：**有上下界的最小费用流**\n\n​\t把每天拆点，定义为入点和出点。\n\n​\t从入点到出点连一条上下界容量都为当天需要毛巾，费用为0的边，表示这天使用了这么多毛巾。\n\n​\t从S向所有入点连一条容量为$inf$，费用为购买新毛巾的价格，表示每天都可以新购入毛巾。——此处建图也可以全部第一天买。\n\n​\t从每天的入点向下一天（如果有）的入点连一条容量为$inf$，费用为0的边，表示前一天没用过的下一天还能用。\n\n​\t从每天的出点向慢洗后那天的入点连一条容量为$inf$，费用为慢洗的价格的边。\n\n​\t从每天的出点向快洗后那天的入点连一条容量为$inf$，费用为快洗的价格的边。\n\n​\t从每一天的出点向T连一条边，表示用过了扔了。\n\n​\t此时跑上下界最小费用最大流即可。（显然有解）\n\n## 软件补丁\n\n​\t题解：**状态压缩,最短路**\n\n​\t把拥有bug压缩成一个二进制状态，依次判断m条可否转移（可以不显示建图）。类似于最短路做法，时间复杂度$O(2^nm)$\n\n## 数字梯形\n\n​\t题解：**最大费用最大流**\n\n​\tPS：这是一个等腰梯形\n\n​\t对于第一问。\n\n​\t对每个点拆点，中间连一条容量为1，费用为其值的边（实现可以用其值的相反数）\n\n​\t从源点S向第一层的每一个点连一条容量为1，费用为0的边。\n\n​\t对于每个点的出点，向它左下角和右下角的点的入点连一条容量为1，费用为0的边。\n\n​\t从最后一层的出点向T点连一条容量为$inf$，费用为0的边。\n\n​\t此时求最大费用最大流，即为所要结果\n\n​\t对于第二问，在第一问基础上只需要将每个点拆开的中间容量为$inf$即可。\n\n​\t对于第三问，在第二问基础上只需要将到左下角，右下角的边的容量改成(增加)$inf$即可。\n\n## 运输问题\n\n​\t题解：**最小费用最大流,最大费用最大流**\n\n​\t新建源点S，汇点T。\n\n​\t从源点S到所有仓库一条容量为$a_i$费用为0的边，从所有商店到汇点容量为$b_j$费用为0的边。从每个仓库到每个商店连一条容量为$inf$,费用为$c[i]$的边，跑最小费用最大流和最大费用最大流（只需要把边取反，再答案取反即可）\n\n## 分配问题\n\n​\t题解：**最小费用最大流,最大费用最大流**\n\n​\t新建源点S，汇点T。\n\n​\t从源点S到所有仓库一条容量为1费用为0的边，从所有商店到汇点容量为1费用为0的边。从第$i$个仓库到第$j$个商店连一条容量为1,费用为$c[i][j]$的边，跑最小费用最大流和最大费用最大流（只需要把边取反，再答案取反即可）\n\n## 负载平衡\n\n​\t题解：**最小费用最大流**\n\n​\t将每个数都减去平均数，得到A数组。\n\n​\t对于$A[i]>0$的，从S向$i$连一条容量为$A[i]$的边，否则从$i$向T连一条容量为$-A[i]$的边\n\n​\t每个点向相邻的两个点（注意是环）连容量为$inf$，费用为1的边。\n\n​\t跑最小费用最大流即是答案。\n\n## 最长 k 可重区间集\n\n​\t题解：**最大费用最大流**\n\n​\t首先离散化。\n\n​\t定义$w[i] = r[i]-l[i]$表示选择这条线段的收益。\n\n​\t对于每个点，从$i$到$i+1$连一条容量为$inf$，费用为0的边。\n\n​\t从S向第一个点连一条容量为$K$，费用为0的边。\n\n​\t从最后一个点向T连一条容量为$K$，费用为0的边。\n\n​\t对于每条线段，从$l[i]$到$r[i]$连一条容量为1，费用为$w[i]$的边。\n\n​\t此时跑S到T的最大费用最大流就是答案。\n\n​\t每条增广路是单向的，会经过若干线段到达T，每个点最多只经过K次。\n\n## 最长k可重线段集问题\n\n​\t题解：**最大费用最大流**\n\n​\t做法同上，定义$w[i] = dist(Segment)$，注意是开线段。\n\n​\t由于可能有和y轴平行的线段，作一下处理：\n\n​\t对于每个$l[i]$,$r[i]$都乘上2。\n\n​\t如果$l[i]=r[i]$，那么$l[i]-1$，否则$l[i]+1$\n\n​\t注意到这样的话不会对其它线段造成影响，而且这个点也最多K次。\n\n## 星际转移\n\n​\t题解：**网络最大流**\n\n​\t枚举答案，对于小于等于答案的每个时刻，建立那个时候的地球，各空间站，月球这些点。\n\n​\t从S向0时刻的地球连一条容量为k的边。\n\n​\t从上一个时刻的点向这个时刻连一条容量为$inf$的边，表示可以滞留。\n\n​\t从上一个时刻太空船所在位置的点向这个时刻太空船所在位置的点连一条容量为$H[i]$的边表示可以转移。\n\n​\t从每个时刻的月球向T连一条容量为$inf$的边，表示登月就结束。\n\n​\t如果满流，说明答案可行，输出。\n\n​\t如果(k+2)*(n+2)次后还不行说明不可行（或者用并查集单独判断是否联通）\n\n## 孤岛营救问题\n\n​\t题解：**状态压缩,最短路**\n\n​\t注意钥匙🔑数量$<=10$所以用一个二进制表示有哪些钥匙，然后跑分层图BFS得到最短路即可。\n\n## 航空路线问题\n\n​\t题解：**最大费用最大流**\n\n​\t把每个城市拆点，1号节点和n号节点之间入点和出点连容量为2，费用为1的边，其它节点连容量为1费用为1的边。对于可以到达的，从出点到入点连容量为1（如果是1号点到n号点，连容量为2），费用为0的边。\n\n​\t从1号点的入点到n号点的出点跑最大费用最大流，其实就是跑出两条路径。\n\n​\t输出方案可以顺着哪些被流过的边，正着倒着做一下。\n\n## 汽车加油行驶问题\n\n​\t题解：**最短路**\n\n​\t注意到$k<=10$，我们定义一个节点$(i,j,k)$表示在位置$(i,j)$，其剩余油量为$k$，那么从一个点向周围的点，$(x,y,k-1)$连边。\n\n​\t如果到达的哪个点是加油站，那么应该是$(i,j,满油)$连边。\n\n​\t此时求$(1,1,满油)$到$(n,n,0~满油)$的最短路即可。\n\n## 深海机器人问题\n\n​\t题解：**最大费用最大流**\n\n​\t新建源点S，汇点T，每个点向右边，下面的点连2条边，第一条容量为1，费用为价值，第二条容量为$inf$，费用为0，S到可以进入点容量为1，费用为0，可出去到T一条容量为1，费用为0的边，跑S到T的最大费用最大流即可。\n\n## 火星探险问题\n\n​\t题解：**最大费用最大流**\n\n​\t每个点拆点，中间的边同上题，相邻的出点到入点，S到(1,1,入)一条容量为car，费用为0的边，最后一个点的出点到T容量为car，费用为0的边，求最大费用最大流。输出方案的时候只需要DFS一下，做完一条把流量返还即可。\n\n## 骑士共存问题\n\n​\t题解：**网络最小割**\n\n​\t首先黑白染色，然后类似与方格染色建图，也就是先假设全部都选，然后减去最小割就是答案。\n\n\n\n\n\n# 模板\n\n## 头文件\n\n```c++\n//Hello Wolrd\n//There is Special Pig Jiong in the world. \n#include<cstdio>\n#include<ctype.h>\n#include<cstring>\n#include<cstdlib>\n#include<map>\n#include<set>\n#include<queue>\n#include<cmath>\n#include<cstdlib>\n#include<algorithm>\nusing namespace std;\ntypedef unsigned long long ull;\ntypedef long long ll;\ntypedef pair<int,int> pii;\nconst int inf = 0x3f3f3f3f,oo = inf;\n#define pc putchar\n#define RG register\nchar __wzp[1<<15|1],*__S=__wzp+32768;\n#define gc() (__S>=__wzp+32768?(__wzp[fread(__wzp,sizeof(char),1<<15,stdin)]=EOF),*((__S=__wzp)++):*(__S++))\ninline ll read(){\n\tRG ll x=0,f=1;RG char c=gc();\n\tfor(;!isdigit(c);c=gc())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n\treturn x*f;\n}\nvoid write(ll x){\n\tif(x<0)x=-x,pc('-');\n\tif(x>=10)write(x/10);\n\tputchar(x%10+'0');\n}\n#define rd read\n#define mem(x,v) memset(x,v,sizeof(x))\n#define pb push_back\n#define mp make_pair\n#define sqr(x) ((x)*(x))\n#define lowbit(x) ((x)&(-(x)))\n#define rep(i,a,b) for(RG int i=(a);i<(b);++i)\n#define fin(x) {freopen(#x\".in\",\"r\",stdin);}\n#define y1 ________y1\nconst int N = ;\nconst int M = ;\nint main(){\n#define LOCAL \n#ifdef LOCAL\n\tfin(1);\n#endif\n\treturn 0;\n}\n```\n\n## Dinic模板\n\n```c++\n//配合T模板使用 \n#define N ????\n#define M ????\nstruct Edge{\n\tint to,nxt,cap;\n\tEdge(){}\n\tEdge(int to,int nxt,int cap):to(to),nxt(nxt),cap(cap){};\n}edge[M*2];\nint first[N],cur[N],nume;\nvoid Addedge(int a,int b,int c){\n\tedge[nume] = Edge(b,first[a],c);first[a] = nume++;\n\tedge[nume] = Edge(a,first[b],0);first[b] = nume++;\n}\nint q[N],dis[N],S,T;\nbool bfs(){\n\tint u,v,front,rear;mem(dis,-1);\n\tfor(front=rear=0,dis[u=q[rear++]=T]=1;front<rear;)\n\t\tfor (int u=q[front++],e=first[u];~e;e=edge[e].nxt)\n\t\t\tif(edge[e^1].cap && !~dis[v=edge[e].to])dis[q[rear++]=v]=dis[u]+1;\n\treturn dis[S]!=-1;\n}\nint dfs(int u,int flow){\n\tif(u==T)return flow;\n\tint used = 0,d,v;\n\tfor (int &e=cur[u];~e;e=edge[e].nxt){\n\t\tif(edge[e].cap && dis[v=edge[e].to]==dis[u]-1 && (d = dfs(v,min(flow-used,edge[e].cap))))\n\t\t\tedge[e].cap -= d,edge[e^1].cap += d,used += d;\n\t\tif(used == flow) break;\n\t}\n\tif(!used)dis[u]=-1;\n\treturn used;\n}\nint dinic(){\n\tint ans = 0;\n\tfor(;bfs();ans+=dfs(S,inf))\n\t\trep(i,0,N) cur[i] = first[i];\n\treturn ans;\n}\nint main(){\n\tmem(first,-1);nume = 0;\n\tS = ???,T = ???;\n}\n```\n\n## SPFA费用流模板\n\nPS：最小费用最大流\n\n```c++\n//配合T模板使用 \n#define N 1005 \n#define M 20005 \nint S,T;\nstruct Edge{\n\tint to,nxt,cap,cost;\n\tEdge(){}\n\tEdge(int to,int nxt,int cap,int cost):to(to),nxt(nxt),cap(cap),cost(cost){}\n}edge[2*M];\nint first[N],nume,n,m;\nvoid Addedge(int a,int b,int cap,int cost){\n\tedge[nume] = Edge(b,first[a],cap,cost);first[a] = nume++;\n\tedge[nume] = Edge(a,first[b],0,-cost);first[b] = nume++;\n}\nint dis[N],vis[N],pre[N];\nbool spfa(){\n\tqueue<int> q;\n\tmem(dis,0x3f);\n\tmem(vis,false);\n\tmem(pre,-1);\n\tdis[S]=0;\n\tvis[S]=true;\n\tq.push(S);\n\twhile(!q.empty()){\n\t\tint u = q.front();q.pop();\n\t\tvis[u] = false;\n\t\tfor (int e=first[u];~e;e=edge[e].nxt){\n\t\t\tint v = edge[e].to;\n\t\t\tif(edge[e].cap&&dis[v]>dis[u]+edge[e].cost){\n\t\t\t\tdis[v]=dis[u]+edge[e].cost;\n\t\t\t\tpre[v] = e;\n\t\t\t\tif(!vis[v]){\n\t\t\t\t\tq.push(v);\n\t\t\t\t\tvis[v]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[T]!=inf;\n}\nint mcmf(){\n\tint minflow,maxflow=0,mincost=0;\n\twhile(spfa()){\n\t\tminflow = inf;\n\t\tfor(int i=pre[T];~i;i=pre[edge[i^1].to])\n\t\t\tminflow = min(minflow,edge[i].cap);\n\t\tfor(int i=pre[T];~i;i=pre[edge[i^1].to])\n\t\t\tedge[i].cap -= minflow,\n\t\t\tedge[i^1].cap += minflow;\n\t\tmincost += minflow * dis[T];\n\t\tmaxflow += minflow;\n\t}\n\treturn mincost;\n}\nint main(){\n\tmem(first,-1);nume = 0;\n\tS = ??,T = ??;\n}\n```\n\n# 部分代码的部分\n\n出于~~懒惰~~给大家独立思考的目的，上面很多不详细，这里贴部分代码。\n\n但是又出于~~懒惰~~美观，只帖部分代码的部分。\n\n缺少部分一般为变量定义（自己写吧）和最大流（最小割)，或者最小（大）费用最大流，这个往上面看吧。\n\n## 骑士共存问题\n\n```c++\n#define encode(a,b) ((a) * (n) + (b) + (1))\nint n,m,ans,A[205][205];\nconst int dx[8]={1,1,-1,-1,2,2,-2,-2};\nconst int dy[8]={2,-2,2,-2,1,-1,1,-1};\nint main(){\n\tmem(first,-1);nume = 0;\n\tS = 0,T = n*n+1;\n\tn = read(),m = rd();\n\tans = n*n-m;\n\tmem(A,false);\n\trep(i,0,m){\n\t\tint x = rd(),y = rd();\n\t\tA[x-1][y-1] = true;\n\t}\n\trep(i,0,n)rep(j,0,n){\n\t\tif(A[i][j]) continue;\n\t\tif((i+j)&1){\n\t\t\tAddedge(S,encode(i,j),1);\n\t\t\trep(d,0,8){\n\t\t\t\tint x = i + dx[d],y = j + dy[d];\n\t\t\t\tif(x<0||y<0||x>=n||y>=n||A[x][y]) continue;\n\t\t\t\tAddedge(encode(i,j),encode(x,y),inf);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tAddedge(encode(i,j),T,1);\n\t}\n\tprintf(\"%d\\n\",ans-dinic());\n}\n```\n\n## 火星探险问题\n\n```c++\nint P,Q,turn[233];\n#define encode(a,b) ((a) * (Q) + (b) + 1)\nvoid dfs(int x,int y){\n\tif(x==P-1&&y==Q-1) return;\n\tint a=encode(x,y)*2,b=encode(x+1,y)*2-1,c=encode(x,y+1)*2-1;\n\tif(x==P-1)b=-1;if(y==Q-1)c=-1;\n\tfor(int e=first[a];~e;e=edge[e].nxt){\n\t\tif(e&1)continue;\n\t\tint v = edge[e].to;\n\t\tif(vis[e] >= edge[e^1].cap) continue;\n\t\tif(v==b){\n\t\t\t++vis[e];\n\t\t\tturn[++*turn] = 0;\n\t\t\tdfs(x+1,y);\n\t\t\treturn ;\n\t\t}\n\t\tif(v==c){\n\t\t\t++vis[e];\n\t\t\tturn[++*turn] = 1;\n\t\t\tdfs(x,y+1);\n\t\t\treturn ;\n\t\t}\n\t}\n}\nint main(){\n\tint car = read();\n\tQ = read(),P = read();\n\tS = 0,T = P*Q*2+1;\n\tmem(first,-1);nume = 0;\n\tAddedge(S,1,car,0);\n\tAddedge(encode(P-1,Q-1)*2,T,car,0);\n\trep(i,0,P)rep(j,0,Q){\n\t\tint x = read();\n\t\tif(x==0) Addedge(encode(i,j)*2-1,encode(i,j)*2,inf,0); else\n\t\tif(x==2) Addedge(encode(i,j)*2-1,encode(i,j)*2,inf,0),\n\t\t\t\t Addedge(encode(i,j)*2-1,encode(i,j)*2,1,-1);\n\t\tif(i!=P-1)Addedge(encode(i,j)*2,encode(i+1,j)*2-1,inf,0);\n\t\tif(j!=Q-1)Addedge(encode(i,j)*2,encode(i,j+1)*2-1,inf,0);\n\t}\n\tmcmf();\n\tmem(vis,0);\n\tfor(int i=1;i<=car;i++){\n\t\tturn[0]=0;\n\t\tdfs(0,0);\n\t\tfor(int j=1;j<=turn[0];j++)\n\t\t\tprintf(\"%d %d\\n\",i,turn[j]);\n\t} \n\treturn 0;\n}\n```\n\n## 深海机器人问题\n\n```c++\nint pos[233][233];\nint main(){\n\tint tot=0;\n\tint A=rd(),B=rd(),p=rd(),q=rd();\n\tmem(first,-1);nume = 0;\n\trep(i,0,p+1)rep(j,0,q+1)pos[i][j]=++tot;\n\tS=tot+1,T=S+1;\n\trep(i,0,p+1)rep(j,0,q){\n\t\tint x = read();\n\t\tAddedge(pos[i][j],pos[i][j+1],1,-x);\n\t\tAddedge(pos[i][j],pos[i][j+1],inf,0);\n\t}\n\trep(j,0,q+1)rep(i,0,p){\n\t\tint x=read();\n\t\tAddedge(pos[i][j],pos[i+1][j],1,-x) ;\n\t\tAddedge(pos[i][j],pos[i+1][j],inf,0);\n\t}\n\twhile(A--){\n\t\tint k = rd(),x=rd(),y=rd();\n\t\tAddedge(S,pos[x][y],k,0);\n\t}\n\twhile(B--){\n\t\tint k = rd(),x=rd(),y=rd();\n\t\tAddedge(pos[x][y],T,k,0);\n\t}\n\tprintf(\"%d\\n\",-mcmf());\n\treturn 0;\n}\n\n\n```\n\n## 数字梯形\n\n```c++\nint main(){\n\tm = read(),n = read();\n\tint tot = 0;\n\tmem(first,-1);nume = 0;\n\tS = tot++,T = tot++;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m+i-1;j++){\n\t\t\tid[i][j][0] = tot++;\n\t\t\tid[i][j][1] = tot++;\n\t\t\tAddedge(id[i][j][0],id[i][j][1],1,-read());\n\t\t}\n\t}\n\tfor(int i=1;i<=n-1;i++){\n\t\tfor(int j=1;j<=m+i-1;j++){\n\t\t\tAddedge(id[i][j][1],id[i+1][j][0],1,0);\n\t\t\tAddedge(id[i][j][1],id[i+1][j+1][0],1,0);\n\t\t} \n\t}\n\tfor(int i=1;i<=m;i++)\n\t\tAddedge(S,id[1][i][0],1,0);\n\tfor(int i=1;i<=n+m-1;i++){\n\t\tAddedge(id[n][i][1],T,inf,0);\n\t}\n\tprintf(\"%d\\n\",-mcmf());\n\tfor(int i=0;i<nume;i+=2) edge[i].cap+=edge[i^1].cap,edge[i^1].cap=0;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m+i-1;j++){\n\t\t\tint e = pos[id[i][j][0]][id[i][j][1]];\n\t\t\tedge[e].cap = inf;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",-mcmf());\n\tfor(int i=0;i<nume;i+=2) edge[i].cap+=edge[i^1].cap,edge[i^1].cap=0;\n\tfor(int i=1;i<=n-1;i++){\n\t\tfor(int j=1;j<=m+i-1;j++){\n\t\t\tedge[pos[id[i][j][1]][id[i+1][j][0]]].cap = inf;\n\t\t\tedge[pos[id[i][j][1]][id[i+1][j+1][0]]].cap = inf;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",-mcmf());\n}\n```\n\n## 最长K可重区间集\n\n```c++\nint l[N],y[N*2],r[N],w[N],K;\nint main(){\n\tn = read(),K = read();\n\tmem(first,-1);nume = 0;\n\tfor(int i=1;i<=n;i++){\n\t\tl[i] = read(),r[i] = read();\n\t\tif(l[i]>=r[i])swap(l[i],r[i]);\n\t\tw[i] = r[i]-l[i];\n\t\ty[++*y] = l[i],y[++*y] = r[i];\n\t} \n\tsort(y+1,y+1+*y);\n\t*y = unique(y+1,y+1+*y) - y - 1;\n\tfor(int i=1;i<=n;i++){\n\t\tl[i] = lower_bound(y+1,y+1+*y,l[i]) - y;\n\t\tr[i] = lower_bound(y+1,y+1+*y,r[i]) - y;\n\t}\n\tS = 0,T = 2**y + 1;\n\tAddedge(S,1,K,0);\n\tAddedge(2**y,T,K,0);\n\tfor(int i=1;i<2**y;i++) Addedge(i,i+1,inf,0);\n\tfor(int i=1;i<=n;i++) Addedge(l[i],r[i],1,-w[i]);\n\tprintf(\"%d\\n\",-mcmf());\n\treturn 0;\n}\n```\n\n## 航空路线问题\n\n```c++\nmap<string,int> id;\nstring name[205];\nint main(){\n\tn = read();m = read();\n\tmem(first,-1);nume = 0;\n\tfor(int i=1;i<=n;i++){\n\t\tstring str;\n\t\tcin >> str;\n\t\tid[str] = i;\n\t\tname[i] = str;\n\t}\n\t\n\tS = 1;T = n*2;\n\tAddedge(1,1+n,2,-1);\n\tfor(int i=2;i<=n-1;i++){\n\t\tAddedge(i,i+n,1,-1);\n\t}\n\tAddedge(n,n+n,2,-1);\n\t\n\twhile(m--){\n\t\tstring str;\n\t\tcin >> str;\n\t\tint x = id[str];\n\t\tcin >> str;\n\t\tint y = id[str];\n\t\tif(x>y) swap(x,y);\n\t\tif(x==1&&y==n)Addedge(x+n,y,2,0);\n\t\telse Addedge(x+n,y,1,0);\n\t}\n\t\n\tint ans = mcmf(2);\n\tif(ans == -1){\n\t\tputs(\"No Solution!\");\n\t\treturn 0;\n\t}\n\tprintf(\"%d\\n\",ans-2);\n\n\tcout << name[1] << endl;\n\tmem(vis,false);\n\tfor(int e=first[n+1],j,k;~e;e=edge[e].nxt){\n\t\tif(!edge[e].cap&&!(e&1)){\n\t\t\tk = edge[e].to;\n\t\t\twhile(k){\n\t\t\t\tcout << name[k] << endl;\n\t\t\t\tvis[k] = true;\n\t\t\t\tfor(j=first[k+n],k=0;~j;j=edge[j].nxt){\n\t\t\t\t\tif(!edge[j].cap&&!(j&1)){\n\t\t\t\t\t\tk = edge[j].to;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(int e=first[n],j,k;~e;e=edge[e].nxt){\n\t\tif(!edge[e^1].cap&&(e&1)&&!vis[edge[e].to-n]){\n\t\t\tk = edge[e].to-n;\n\t\t\twhile(k){\n\t\t\t\tcout << name[k] << endl;\n\t\t\t\tvis[k] = true;\n\t\t\t\tfor(j=first[k],k=0;~j;j=edge[j].nxt){\n\t\t\t\t\tif(!edge[j^1].cap&&(j&1)){\n\t\t\t\t\t\tk = edge[j].to - n;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n## 餐巾计划\n\n```c++\nint n,_P,_M,_F,_N,_S;\nvoid solve(){\n\tn = read(),_P = read(),_M = read(),_F = read(),_N = read(),_S = read();\n\tS = 2*n+1,T=S+1,SS=T+1,TT=SS+1;\n\tmem(first,-1);nume = 0;\n\tfor(int i=1;i<=n;i++){\n\t\tAddedge(i+n,TT,inf,0);\n\t\tint x = read();\n\t\tAddedge(i,i+n,inf-x,0);\n\t\tAddedge(i,T,x,0);\n\t\tAddedge(S,i+n,x,0);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tAddedge(SS,i,inf,_P);\n\t\tif(i!=n) Addedge(i,i+1,inf,0);\n\t\tif(i+_M<=n) Addedge(i+n,i+_M,inf,_F);\n\t\tif(i+_N<=n) Addedge(i+n,i+_N,inf,_S);\n\t}\n\tAddedge(TT,SS,inf,0);\n\tprintf(\"%lld\\n\",mcmf());\n}\nint main(){\n\tsolve();\n\treturn 0;\n}\n```\n\n","source":"_posts/线性规划与网络流24题.md","raw":"---\ntitle: 线性规划与网络流24题\ntags:\n - 网络流\n---\n\n$Loj$上去掉了一题：机器人路径规划问题，所以就不做啦。\n\n[网络流24(23)题题面](https://loj.ac/problems/search?keyword=%E7%BD%91%E7%BB%9C%E6%B5%81+24+%E9%A2%98)\n\n<!--more-->\n\n[TOC]\n\n\n\n# 题解\n\n## 搭配飞行员\n\n​\t题解：**网络最大流**\n\n​\t二分图最大匹配，可以用容易实现的$Hungary$算法$O(n^3/n(m+n)$，也可以用网络流建图，用$Dinic$跑二分图的复杂度是$O(\\sqrt n*m)$别问我为什么。\n\n​\t新建源点S，汇点T，从S向每个正驾驶连一条容量为1的边，每个副驾驶向T连一条容量为1的边，对于每个可以匹配的正驾驶和副驾驶，从正驾驶向副驾驶连一条容量为1的边，跑出来的最大流就是答案。\n\n## 太空飞行计划\n\n​\t题解：**网络最小割**\n\n​\t不妨假设全部收益都得到，而不花费费用。新建源点S，汇点T。\n\n​\t从S向每个实验连一条容量为收益的边，每个实验向器械连一条容量为$inf$的边，每个器械向 T连一条容量为购买费用的边。\n\n​\t此时求最小割，如果在S集，说明这个实验做，如果在T集，说明这个实验不做。\n\n​\t显然，容量为$inf$的边不能被割去，所以如果在S集，必须满足右边全部的实验器材都买了。那么S-最小割就是答案。（最小割=最大流，证明见算导或相关论文）\n\n## 最小路径覆盖\n\n​\t题解：**网络最大流**\n\n​\t新建源点S，汇点T。\n\n​\t我们把每个点拆成两个点$i_1$和$i_2$，对于边$i->j$，连一条$i_1->j_2$,容量为1的边，对于每个点，连$S$到$i_1$容量为1的边，连$i_2$到T容量为1的边。\n\n​\t此时求最大流，如果流过一条$i_1$到$j_2$的边，说明可以把以$i$结尾的点和以$j$开头的两条路径合并起来，变成一条路径。而答案要最小路径覆盖，也就是总点数-合并的次数（最大流）。\n\n​\t因为是DAG，所以不会出现环。\n\n## 魔术球问题\n\n​\t题解：**网络最大流**\n\n​\t如果我们已知答案$Ans$，要判断放1~Ans最少要几根柱子，我们可以这么做：\n\n​\t对于每个数字$i$，如果存在$j$，满足$j>i$，并且$i+j$是完全平方数，那么从$i$到$j$连一条边，连完之后显然这是一个DAG，求出最小路径覆盖就是需要的柱子（做法同最小路径覆盖）\n\n​\t那么这时候我们可以二分答案然后判定，但是基于残量网络的优秀性质，我们可以直接枚举答案，对于一个新节点，重新加入相关边，并在残量网络上跑最大流。到枚举到第一个不可行的$Ans$，答案就是$Ans-1$\n\n​\t输出方案的时候删掉最后两个点，重新跑最大流（或者删除相关容量）。\n\n## 圆桌聚餐\n\n​\t题解：**网络最大流**\n\n​\t新建源点S，汇点T。\n\n​\t从S到每个单位容量为$r_i$的边，从圆桌向T连一条容量为$C_i$的边，每个单位向每个圆桌连一条容量为$i$的边。\n\n​\t跑最大流后看哪些边被流过即可。\n\n## 最长递增子序列\n\n​\t题解：**网络最大流**\n\n​\t注意题目是非严格递增QAQ。\n\n​\t第一问是经典的DP（可以用$O(n^2)$做法水），此时得到$dp$数组$f[i]$表示$i$结尾的最长\n\n​\t第二问可以把每个点拆点，限制流量不超过1（从入点到出点容量为1的边），从S向$f[i]$为1的入点容量为1的边，从$f[i]$为$ans$的出点边向T连一条容量为1的边。\n\n​\t对于可以转移的，并且$f[i]+1=f[j](i<j,a[i]<=a[j])$，从i的出点向j的入点一条容量为1的边，然后跑网络最大流即可。\n\n​\t对于第三问，只需要把1和n的容量限制加上$inf$即可。此时再跑网络最大流即可。\n\n## 试题库\n\n​\t题解：**网路最大流**\n\n​\t新建源点S，汇点T。\n\n​\t试题向类型建容量为1 的边，源点S向试题连容量为1的边，类型向汇点T连容量为需要题数的边，跑网络最大流看是否满流。\n\n​\t输出方案看哪些试题向类型的边被流过。\n\n## 方格取数\n\n​\t题解：**网络最小割**\n\n​\t首先对网格进行黑白染色。\n\n​\t然后假设得到了所有答案。\n\n​\t新建源点S，汇点T，从S向所有白色格子连一条容量为其值的边，所有黑色格子向T连一条容量为其值的边，所有白色格子向其相邻的黑色格子连一条容量为$inf$的边，容易发现此时求最小割即最少减少的答案——如果要选一个白色格子，必须保证其相邻的黑色格子不选（割掉），选黑色格子同理。\n\n## 餐巾计划\n\n​\t题解：**有上下界的最小费用流**\n\n​\t把每天拆点，定义为入点和出点。\n\n​\t从入点到出点连一条上下界容量都为当天需要毛巾，费用为0的边，表示这天使用了这么多毛巾。\n\n​\t从S向所有入点连一条容量为$inf$，费用为购买新毛巾的价格，表示每天都可以新购入毛巾。——此处建图也可以全部第一天买。\n\n​\t从每天的入点向下一天（如果有）的入点连一条容量为$inf$，费用为0的边，表示前一天没用过的下一天还能用。\n\n​\t从每天的出点向慢洗后那天的入点连一条容量为$inf$，费用为慢洗的价格的边。\n\n​\t从每天的出点向快洗后那天的入点连一条容量为$inf$，费用为快洗的价格的边。\n\n​\t从每一天的出点向T连一条边，表示用过了扔了。\n\n​\t此时跑上下界最小费用最大流即可。（显然有解）\n\n## 软件补丁\n\n​\t题解：**状态压缩,最短路**\n\n​\t把拥有bug压缩成一个二进制状态，依次判断m条可否转移（可以不显示建图）。类似于最短路做法，时间复杂度$O(2^nm)$\n\n## 数字梯形\n\n​\t题解：**最大费用最大流**\n\n​\tPS：这是一个等腰梯形\n\n​\t对于第一问。\n\n​\t对每个点拆点，中间连一条容量为1，费用为其值的边（实现可以用其值的相反数）\n\n​\t从源点S向第一层的每一个点连一条容量为1，费用为0的边。\n\n​\t对于每个点的出点，向它左下角和右下角的点的入点连一条容量为1，费用为0的边。\n\n​\t从最后一层的出点向T点连一条容量为$inf$，费用为0的边。\n\n​\t此时求最大费用最大流，即为所要结果\n\n​\t对于第二问，在第一问基础上只需要将每个点拆开的中间容量为$inf$即可。\n\n​\t对于第三问，在第二问基础上只需要将到左下角，右下角的边的容量改成(增加)$inf$即可。\n\n## 运输问题\n\n​\t题解：**最小费用最大流,最大费用最大流**\n\n​\t新建源点S，汇点T。\n\n​\t从源点S到所有仓库一条容量为$a_i$费用为0的边，从所有商店到汇点容量为$b_j$费用为0的边。从每个仓库到每个商店连一条容量为$inf$,费用为$c[i]$的边，跑最小费用最大流和最大费用最大流（只需要把边取反，再答案取反即可）\n\n## 分配问题\n\n​\t题解：**最小费用最大流,最大费用最大流**\n\n​\t新建源点S，汇点T。\n\n​\t从源点S到所有仓库一条容量为1费用为0的边，从所有商店到汇点容量为1费用为0的边。从第$i$个仓库到第$j$个商店连一条容量为1,费用为$c[i][j]$的边，跑最小费用最大流和最大费用最大流（只需要把边取反，再答案取反即可）\n\n## 负载平衡\n\n​\t题解：**最小费用最大流**\n\n​\t将每个数都减去平均数，得到A数组。\n\n​\t对于$A[i]>0$的，从S向$i$连一条容量为$A[i]$的边，否则从$i$向T连一条容量为$-A[i]$的边\n\n​\t每个点向相邻的两个点（注意是环）连容量为$inf$，费用为1的边。\n\n​\t跑最小费用最大流即是答案。\n\n## 最长 k 可重区间集\n\n​\t题解：**最大费用最大流**\n\n​\t首先离散化。\n\n​\t定义$w[i] = r[i]-l[i]$表示选择这条线段的收益。\n\n​\t对于每个点，从$i$到$i+1$连一条容量为$inf$，费用为0的边。\n\n​\t从S向第一个点连一条容量为$K$，费用为0的边。\n\n​\t从最后一个点向T连一条容量为$K$，费用为0的边。\n\n​\t对于每条线段，从$l[i]$到$r[i]$连一条容量为1，费用为$w[i]$的边。\n\n​\t此时跑S到T的最大费用最大流就是答案。\n\n​\t每条增广路是单向的，会经过若干线段到达T，每个点最多只经过K次。\n\n## 最长k可重线段集问题\n\n​\t题解：**最大费用最大流**\n\n​\t做法同上，定义$w[i] = dist(Segment)$，注意是开线段。\n\n​\t由于可能有和y轴平行的线段，作一下处理：\n\n​\t对于每个$l[i]$,$r[i]$都乘上2。\n\n​\t如果$l[i]=r[i]$，那么$l[i]-1$，否则$l[i]+1$\n\n​\t注意到这样的话不会对其它线段造成影响，而且这个点也最多K次。\n\n## 星际转移\n\n​\t题解：**网络最大流**\n\n​\t枚举答案，对于小于等于答案的每个时刻，建立那个时候的地球，各空间站，月球这些点。\n\n​\t从S向0时刻的地球连一条容量为k的边。\n\n​\t从上一个时刻的点向这个时刻连一条容量为$inf$的边，表示可以滞留。\n\n​\t从上一个时刻太空船所在位置的点向这个时刻太空船所在位置的点连一条容量为$H[i]$的边表示可以转移。\n\n​\t从每个时刻的月球向T连一条容量为$inf$的边，表示登月就结束。\n\n​\t如果满流，说明答案可行，输出。\n\n​\t如果(k+2)*(n+2)次后还不行说明不可行（或者用并查集单独判断是否联通）\n\n## 孤岛营救问题\n\n​\t题解：**状态压缩,最短路**\n\n​\t注意钥匙🔑数量$<=10$所以用一个二进制表示有哪些钥匙，然后跑分层图BFS得到最短路即可。\n\n## 航空路线问题\n\n​\t题解：**最大费用最大流**\n\n​\t把每个城市拆点，1号节点和n号节点之间入点和出点连容量为2，费用为1的边，其它节点连容量为1费用为1的边。对于可以到达的，从出点到入点连容量为1（如果是1号点到n号点，连容量为2），费用为0的边。\n\n​\t从1号点的入点到n号点的出点跑最大费用最大流，其实就是跑出两条路径。\n\n​\t输出方案可以顺着哪些被流过的边，正着倒着做一下。\n\n## 汽车加油行驶问题\n\n​\t题解：**最短路**\n\n​\t注意到$k<=10$，我们定义一个节点$(i,j,k)$表示在位置$(i,j)$，其剩余油量为$k$，那么从一个点向周围的点，$(x,y,k-1)$连边。\n\n​\t如果到达的哪个点是加油站，那么应该是$(i,j,满油)$连边。\n\n​\t此时求$(1,1,满油)$到$(n,n,0~满油)$的最短路即可。\n\n## 深海机器人问题\n\n​\t题解：**最大费用最大流**\n\n​\t新建源点S，汇点T，每个点向右边，下面的点连2条边，第一条容量为1，费用为价值，第二条容量为$inf$，费用为0，S到可以进入点容量为1，费用为0，可出去到T一条容量为1，费用为0的边，跑S到T的最大费用最大流即可。\n\n## 火星探险问题\n\n​\t题解：**最大费用最大流**\n\n​\t每个点拆点，中间的边同上题，相邻的出点到入点，S到(1,1,入)一条容量为car，费用为0的边，最后一个点的出点到T容量为car，费用为0的边，求最大费用最大流。输出方案的时候只需要DFS一下，做完一条把流量返还即可。\n\n## 骑士共存问题\n\n​\t题解：**网络最小割**\n\n​\t首先黑白染色，然后类似与方格染色建图，也就是先假设全部都选，然后减去最小割就是答案。\n\n\n\n\n\n# 模板\n\n## 头文件\n\n```c++\n//Hello Wolrd\n//There is Special Pig Jiong in the world. \n#include<cstdio>\n#include<ctype.h>\n#include<cstring>\n#include<cstdlib>\n#include<map>\n#include<set>\n#include<queue>\n#include<cmath>\n#include<cstdlib>\n#include<algorithm>\nusing namespace std;\ntypedef unsigned long long ull;\ntypedef long long ll;\ntypedef pair<int,int> pii;\nconst int inf = 0x3f3f3f3f,oo = inf;\n#define pc putchar\n#define RG register\nchar __wzp[1<<15|1],*__S=__wzp+32768;\n#define gc() (__S>=__wzp+32768?(__wzp[fread(__wzp,sizeof(char),1<<15,stdin)]=EOF),*((__S=__wzp)++):*(__S++))\ninline ll read(){\n\tRG ll x=0,f=1;RG char c=gc();\n\tfor(;!isdigit(c);c=gc())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n\treturn x*f;\n}\nvoid write(ll x){\n\tif(x<0)x=-x,pc('-');\n\tif(x>=10)write(x/10);\n\tputchar(x%10+'0');\n}\n#define rd read\n#define mem(x,v) memset(x,v,sizeof(x))\n#define pb push_back\n#define mp make_pair\n#define sqr(x) ((x)*(x))\n#define lowbit(x) ((x)&(-(x)))\n#define rep(i,a,b) for(RG int i=(a);i<(b);++i)\n#define fin(x) {freopen(#x\".in\",\"r\",stdin);}\n#define y1 ________y1\nconst int N = ;\nconst int M = ;\nint main(){\n#define LOCAL \n#ifdef LOCAL\n\tfin(1);\n#endif\n\treturn 0;\n}\n```\n\n## Dinic模板\n\n```c++\n//配合T模板使用 \n#define N ????\n#define M ????\nstruct Edge{\n\tint to,nxt,cap;\n\tEdge(){}\n\tEdge(int to,int nxt,int cap):to(to),nxt(nxt),cap(cap){};\n}edge[M*2];\nint first[N],cur[N],nume;\nvoid Addedge(int a,int b,int c){\n\tedge[nume] = Edge(b,first[a],c);first[a] = nume++;\n\tedge[nume] = Edge(a,first[b],0);first[b] = nume++;\n}\nint q[N],dis[N],S,T;\nbool bfs(){\n\tint u,v,front,rear;mem(dis,-1);\n\tfor(front=rear=0,dis[u=q[rear++]=T]=1;front<rear;)\n\t\tfor (int u=q[front++],e=first[u];~e;e=edge[e].nxt)\n\t\t\tif(edge[e^1].cap && !~dis[v=edge[e].to])dis[q[rear++]=v]=dis[u]+1;\n\treturn dis[S]!=-1;\n}\nint dfs(int u,int flow){\n\tif(u==T)return flow;\n\tint used = 0,d,v;\n\tfor (int &e=cur[u];~e;e=edge[e].nxt){\n\t\tif(edge[e].cap && dis[v=edge[e].to]==dis[u]-1 && (d = dfs(v,min(flow-used,edge[e].cap))))\n\t\t\tedge[e].cap -= d,edge[e^1].cap += d,used += d;\n\t\tif(used == flow) break;\n\t}\n\tif(!used)dis[u]=-1;\n\treturn used;\n}\nint dinic(){\n\tint ans = 0;\n\tfor(;bfs();ans+=dfs(S,inf))\n\t\trep(i,0,N) cur[i] = first[i];\n\treturn ans;\n}\nint main(){\n\tmem(first,-1);nume = 0;\n\tS = ???,T = ???;\n}\n```\n\n## SPFA费用流模板\n\nPS：最小费用最大流\n\n```c++\n//配合T模板使用 \n#define N 1005 \n#define M 20005 \nint S,T;\nstruct Edge{\n\tint to,nxt,cap,cost;\n\tEdge(){}\n\tEdge(int to,int nxt,int cap,int cost):to(to),nxt(nxt),cap(cap),cost(cost){}\n}edge[2*M];\nint first[N],nume,n,m;\nvoid Addedge(int a,int b,int cap,int cost){\n\tedge[nume] = Edge(b,first[a],cap,cost);first[a] = nume++;\n\tedge[nume] = Edge(a,first[b],0,-cost);first[b] = nume++;\n}\nint dis[N],vis[N],pre[N];\nbool spfa(){\n\tqueue<int> q;\n\tmem(dis,0x3f);\n\tmem(vis,false);\n\tmem(pre,-1);\n\tdis[S]=0;\n\tvis[S]=true;\n\tq.push(S);\n\twhile(!q.empty()){\n\t\tint u = q.front();q.pop();\n\t\tvis[u] = false;\n\t\tfor (int e=first[u];~e;e=edge[e].nxt){\n\t\t\tint v = edge[e].to;\n\t\t\tif(edge[e].cap&&dis[v]>dis[u]+edge[e].cost){\n\t\t\t\tdis[v]=dis[u]+edge[e].cost;\n\t\t\t\tpre[v] = e;\n\t\t\t\tif(!vis[v]){\n\t\t\t\t\tq.push(v);\n\t\t\t\t\tvis[v]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[T]!=inf;\n}\nint mcmf(){\n\tint minflow,maxflow=0,mincost=0;\n\twhile(spfa()){\n\t\tminflow = inf;\n\t\tfor(int i=pre[T];~i;i=pre[edge[i^1].to])\n\t\t\tminflow = min(minflow,edge[i].cap);\n\t\tfor(int i=pre[T];~i;i=pre[edge[i^1].to])\n\t\t\tedge[i].cap -= minflow,\n\t\t\tedge[i^1].cap += minflow;\n\t\tmincost += minflow * dis[T];\n\t\tmaxflow += minflow;\n\t}\n\treturn mincost;\n}\nint main(){\n\tmem(first,-1);nume = 0;\n\tS = ??,T = ??;\n}\n```\n\n# 部分代码的部分\n\n出于~~懒惰~~给大家独立思考的目的，上面很多不详细，这里贴部分代码。\n\n但是又出于~~懒惰~~美观，只帖部分代码的部分。\n\n缺少部分一般为变量定义（自己写吧）和最大流（最小割)，或者最小（大）费用最大流，这个往上面看吧。\n\n## 骑士共存问题\n\n```c++\n#define encode(a,b) ((a) * (n) + (b) + (1))\nint n,m,ans,A[205][205];\nconst int dx[8]={1,1,-1,-1,2,2,-2,-2};\nconst int dy[8]={2,-2,2,-2,1,-1,1,-1};\nint main(){\n\tmem(first,-1);nume = 0;\n\tS = 0,T = n*n+1;\n\tn = read(),m = rd();\n\tans = n*n-m;\n\tmem(A,false);\n\trep(i,0,m){\n\t\tint x = rd(),y = rd();\n\t\tA[x-1][y-1] = true;\n\t}\n\trep(i,0,n)rep(j,0,n){\n\t\tif(A[i][j]) continue;\n\t\tif((i+j)&1){\n\t\t\tAddedge(S,encode(i,j),1);\n\t\t\trep(d,0,8){\n\t\t\t\tint x = i + dx[d],y = j + dy[d];\n\t\t\t\tif(x<0||y<0||x>=n||y>=n||A[x][y]) continue;\n\t\t\t\tAddedge(encode(i,j),encode(x,y),inf);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tAddedge(encode(i,j),T,1);\n\t}\n\tprintf(\"%d\\n\",ans-dinic());\n}\n```\n\n## 火星探险问题\n\n```c++\nint P,Q,turn[233];\n#define encode(a,b) ((a) * (Q) + (b) + 1)\nvoid dfs(int x,int y){\n\tif(x==P-1&&y==Q-1) return;\n\tint a=encode(x,y)*2,b=encode(x+1,y)*2-1,c=encode(x,y+1)*2-1;\n\tif(x==P-1)b=-1;if(y==Q-1)c=-1;\n\tfor(int e=first[a];~e;e=edge[e].nxt){\n\t\tif(e&1)continue;\n\t\tint v = edge[e].to;\n\t\tif(vis[e] >= edge[e^1].cap) continue;\n\t\tif(v==b){\n\t\t\t++vis[e];\n\t\t\tturn[++*turn] = 0;\n\t\t\tdfs(x+1,y);\n\t\t\treturn ;\n\t\t}\n\t\tif(v==c){\n\t\t\t++vis[e];\n\t\t\tturn[++*turn] = 1;\n\t\t\tdfs(x,y+1);\n\t\t\treturn ;\n\t\t}\n\t}\n}\nint main(){\n\tint car = read();\n\tQ = read(),P = read();\n\tS = 0,T = P*Q*2+1;\n\tmem(first,-1);nume = 0;\n\tAddedge(S,1,car,0);\n\tAddedge(encode(P-1,Q-1)*2,T,car,0);\n\trep(i,0,P)rep(j,0,Q){\n\t\tint x = read();\n\t\tif(x==0) Addedge(encode(i,j)*2-1,encode(i,j)*2,inf,0); else\n\t\tif(x==2) Addedge(encode(i,j)*2-1,encode(i,j)*2,inf,0),\n\t\t\t\t Addedge(encode(i,j)*2-1,encode(i,j)*2,1,-1);\n\t\tif(i!=P-1)Addedge(encode(i,j)*2,encode(i+1,j)*2-1,inf,0);\n\t\tif(j!=Q-1)Addedge(encode(i,j)*2,encode(i,j+1)*2-1,inf,0);\n\t}\n\tmcmf();\n\tmem(vis,0);\n\tfor(int i=1;i<=car;i++){\n\t\tturn[0]=0;\n\t\tdfs(0,0);\n\t\tfor(int j=1;j<=turn[0];j++)\n\t\t\tprintf(\"%d %d\\n\",i,turn[j]);\n\t} \n\treturn 0;\n}\n```\n\n## 深海机器人问题\n\n```c++\nint pos[233][233];\nint main(){\n\tint tot=0;\n\tint A=rd(),B=rd(),p=rd(),q=rd();\n\tmem(first,-1);nume = 0;\n\trep(i,0,p+1)rep(j,0,q+1)pos[i][j]=++tot;\n\tS=tot+1,T=S+1;\n\trep(i,0,p+1)rep(j,0,q){\n\t\tint x = read();\n\t\tAddedge(pos[i][j],pos[i][j+1],1,-x);\n\t\tAddedge(pos[i][j],pos[i][j+1],inf,0);\n\t}\n\trep(j,0,q+1)rep(i,0,p){\n\t\tint x=read();\n\t\tAddedge(pos[i][j],pos[i+1][j],1,-x) ;\n\t\tAddedge(pos[i][j],pos[i+1][j],inf,0);\n\t}\n\twhile(A--){\n\t\tint k = rd(),x=rd(),y=rd();\n\t\tAddedge(S,pos[x][y],k,0);\n\t}\n\twhile(B--){\n\t\tint k = rd(),x=rd(),y=rd();\n\t\tAddedge(pos[x][y],T,k,0);\n\t}\n\tprintf(\"%d\\n\",-mcmf());\n\treturn 0;\n}\n\n\n```\n\n## 数字梯形\n\n```c++\nint main(){\n\tm = read(),n = read();\n\tint tot = 0;\n\tmem(first,-1);nume = 0;\n\tS = tot++,T = tot++;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m+i-1;j++){\n\t\t\tid[i][j][0] = tot++;\n\t\t\tid[i][j][1] = tot++;\n\t\t\tAddedge(id[i][j][0],id[i][j][1],1,-read());\n\t\t}\n\t}\n\tfor(int i=1;i<=n-1;i++){\n\t\tfor(int j=1;j<=m+i-1;j++){\n\t\t\tAddedge(id[i][j][1],id[i+1][j][0],1,0);\n\t\t\tAddedge(id[i][j][1],id[i+1][j+1][0],1,0);\n\t\t} \n\t}\n\tfor(int i=1;i<=m;i++)\n\t\tAddedge(S,id[1][i][0],1,0);\n\tfor(int i=1;i<=n+m-1;i++){\n\t\tAddedge(id[n][i][1],T,inf,0);\n\t}\n\tprintf(\"%d\\n\",-mcmf());\n\tfor(int i=0;i<nume;i+=2) edge[i].cap+=edge[i^1].cap,edge[i^1].cap=0;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m+i-1;j++){\n\t\t\tint e = pos[id[i][j][0]][id[i][j][1]];\n\t\t\tedge[e].cap = inf;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",-mcmf());\n\tfor(int i=0;i<nume;i+=2) edge[i].cap+=edge[i^1].cap,edge[i^1].cap=0;\n\tfor(int i=1;i<=n-1;i++){\n\t\tfor(int j=1;j<=m+i-1;j++){\n\t\t\tedge[pos[id[i][j][1]][id[i+1][j][0]]].cap = inf;\n\t\t\tedge[pos[id[i][j][1]][id[i+1][j+1][0]]].cap = inf;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",-mcmf());\n}\n```\n\n## 最长K可重区间集\n\n```c++\nint l[N],y[N*2],r[N],w[N],K;\nint main(){\n\tn = read(),K = read();\n\tmem(first,-1);nume = 0;\n\tfor(int i=1;i<=n;i++){\n\t\tl[i] = read(),r[i] = read();\n\t\tif(l[i]>=r[i])swap(l[i],r[i]);\n\t\tw[i] = r[i]-l[i];\n\t\ty[++*y] = l[i],y[++*y] = r[i];\n\t} \n\tsort(y+1,y+1+*y);\n\t*y = unique(y+1,y+1+*y) - y - 1;\n\tfor(int i=1;i<=n;i++){\n\t\tl[i] = lower_bound(y+1,y+1+*y,l[i]) - y;\n\t\tr[i] = lower_bound(y+1,y+1+*y,r[i]) - y;\n\t}\n\tS = 0,T = 2**y + 1;\n\tAddedge(S,1,K,0);\n\tAddedge(2**y,T,K,0);\n\tfor(int i=1;i<2**y;i++) Addedge(i,i+1,inf,0);\n\tfor(int i=1;i<=n;i++) Addedge(l[i],r[i],1,-w[i]);\n\tprintf(\"%d\\n\",-mcmf());\n\treturn 0;\n}\n```\n\n## 航空路线问题\n\n```c++\nmap<string,int> id;\nstring name[205];\nint main(){\n\tn = read();m = read();\n\tmem(first,-1);nume = 0;\n\tfor(int i=1;i<=n;i++){\n\t\tstring str;\n\t\tcin >> str;\n\t\tid[str] = i;\n\t\tname[i] = str;\n\t}\n\t\n\tS = 1;T = n*2;\n\tAddedge(1,1+n,2,-1);\n\tfor(int i=2;i<=n-1;i++){\n\t\tAddedge(i,i+n,1,-1);\n\t}\n\tAddedge(n,n+n,2,-1);\n\t\n\twhile(m--){\n\t\tstring str;\n\t\tcin >> str;\n\t\tint x = id[str];\n\t\tcin >> str;\n\t\tint y = id[str];\n\t\tif(x>y) swap(x,y);\n\t\tif(x==1&&y==n)Addedge(x+n,y,2,0);\n\t\telse Addedge(x+n,y,1,0);\n\t}\n\t\n\tint ans = mcmf(2);\n\tif(ans == -1){\n\t\tputs(\"No Solution!\");\n\t\treturn 0;\n\t}\n\tprintf(\"%d\\n\",ans-2);\n\n\tcout << name[1] << endl;\n\tmem(vis,false);\n\tfor(int e=first[n+1],j,k;~e;e=edge[e].nxt){\n\t\tif(!edge[e].cap&&!(e&1)){\n\t\t\tk = edge[e].to;\n\t\t\twhile(k){\n\t\t\t\tcout << name[k] << endl;\n\t\t\t\tvis[k] = true;\n\t\t\t\tfor(j=first[k+n],k=0;~j;j=edge[j].nxt){\n\t\t\t\t\tif(!edge[j].cap&&!(j&1)){\n\t\t\t\t\t\tk = edge[j].to;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(int e=first[n],j,k;~e;e=edge[e].nxt){\n\t\tif(!edge[e^1].cap&&(e&1)&&!vis[edge[e].to-n]){\n\t\t\tk = edge[e].to-n;\n\t\t\twhile(k){\n\t\t\t\tcout << name[k] << endl;\n\t\t\t\tvis[k] = true;\n\t\t\t\tfor(j=first[k],k=0;~j;j=edge[j].nxt){\n\t\t\t\t\tif(!edge[j^1].cap&&(j&1)){\n\t\t\t\t\t\tk = edge[j].to - n;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n## 餐巾计划\n\n```c++\nint n,_P,_M,_F,_N,_S;\nvoid solve(){\n\tn = read(),_P = read(),_M = read(),_F = read(),_N = read(),_S = read();\n\tS = 2*n+1,T=S+1,SS=T+1,TT=SS+1;\n\tmem(first,-1);nume = 0;\n\tfor(int i=1;i<=n;i++){\n\t\tAddedge(i+n,TT,inf,0);\n\t\tint x = read();\n\t\tAddedge(i,i+n,inf-x,0);\n\t\tAddedge(i,T,x,0);\n\t\tAddedge(S,i+n,x,0);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tAddedge(SS,i,inf,_P);\n\t\tif(i!=n) Addedge(i,i+1,inf,0);\n\t\tif(i+_M<=n) Addedge(i+n,i+_M,inf,_F);\n\t\tif(i+_N<=n) Addedge(i+n,i+_N,inf,_S);\n\t}\n\tAddedge(TT,SS,inf,0);\n\tprintf(\"%lld\\n\",mcmf());\n}\nint main(){\n\tsolve();\n\treturn 0;\n}\n```\n\n","slug":"线性规划与网络流24题","published":1,"date":"2021-08-28T13:02:49.989Z","updated":"2021-08-28T13:02:49.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvso32s000jvfnugw9e36ic","content":"<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mi>o</mi><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">Loj</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8777699999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">L</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span></span></span></span>上去掉了一题：机器人路径规划问题，所以就不做啦。</p><p><a href=\"https://loj.ac/problems/search?keyword=%E7%BD%91%E7%BB%9C%E6%B5%81+24+%E9%A2%98\" target=\"_blank\" rel=\"noopener\">网络流 24(23)题题面 </a></p><a id=\"more\"></a><p>[TOC]</p><h1 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"# 题解\"></a> 题解</h1><h2 id=\"搭配飞行员\"><a class=\"markdownIt-Anchor\" href=\"# 搭配飞行员\"></a> 搭配飞行员</h2><p>​\t题解：<strong> 网络最大流 </strong></p><p>​\t二分图最大匹配，可以用容易实现的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>H</mi><mi>u</mi><mi>n</mi><mi>g</mi><mi>a</mi><mi>r</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">Hungary</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8777699999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.08125em\">H</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span></span></span></span> 算法 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mi mathvariant=\"normal\">/</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3/n(m+n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>，也可以用网络流建图，用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>D</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">Dinic</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">D</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">c</span></span></span></span> 跑二分图的复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msqrt><mi>n</mi></msqrt><mo>∗</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\sqrt n*m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.05028em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8002800000000001em\"><span class=\"svg-align\" style=\"top:-3em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord mathdefault\" style=\"padding-left:.833em\">n</span></span><span style=\"top:-2.76028em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"hide-tail\" style=\"min-width:.853em;height:1.08em\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,\n-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,\n-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,\n35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,\n-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467\ns-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422\ns-65,47,-65,47z M834 80H400000v40H845z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.23972em\"><span></span></span></span></span></span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span></span></span></span>别问我为什么。</p><p>​\t新建源点 S，汇点 T，从 S 向每个正驾驶连一条容量为 1 的边，每个副驾驶向 T 连一条容量为 1 的边，对于每个可以匹配的正驾驶和副驾驶，从正驾驶向副驾驶连一条容量为 1 的边，跑出来的最大流就是答案。</p><h2 id=\" 太空飞行计划 \"><a class=\"markdownIt-Anchor\"href=\"# 太空飞行计划 \"></a> 太空飞行计划 </h2><p>​\t题解：<strong> 网络最小割 </strong></p><p>​\t不妨假设全部收益都得到，而不花费费用。新建源点 S，汇点 T。</p><p>​\t从 S 向每个实验连一条容量为收益的边，每个实验向器械连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span></span></span></span> 的边，每个器械向 T 连一条容量为购买费用的边。</p><p>​\t此时求最小割，如果在 S 集，说明这个实验做，如果在 T 集，说明这个实验不做。</p><p>​\t显然，容量为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span></span></span></span> 的边不能被割去，所以如果在 S 集，必须满足右边全部的实验器材都买了。那么 S- 最小割就是答案。（最小割 = 最大流，证明见算导或相关论文）</p><h2 id=\" 最小路径覆盖 \"><a class=\"markdownIt-Anchor\"href=\"# 最小路径覆盖 \"></a> 最小路径覆盖 </h2><p>​\t题解：<strong> 网络最大流 </strong></p><p>​\t新建源点 S，汇点 T。</p><p>​\t我们把每个点拆成两个点<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>i</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">i_1</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.80952em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\"style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>i</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">i_2</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.80952em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\"style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span>，对于边 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo>−</mo><mo>&gt;</mo><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">i-&gt;j</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.74285em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord\">−</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.05724em\">j</span></span></span></span>，连一条<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>i</mi><mn>1</mn></msub><mo>−</mo><mo>&gt;</mo><msub><mi>j</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">i_1-&gt;j_2</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.80952em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\"style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord\">−</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\"style=\"margin-right:.05724em\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.05724em;margin-right:.05em\"><span class=\"pstrut\"style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span>, 容量为 1 的边，对于每个点，连<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\"style=\"margin-right:.05764em\">S</span></span></span></span> 到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>i</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">i_1</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.80952em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\"style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span>容量为 1 的边，连 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>i</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">i_2</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.80952em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\"style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span> 到 T 容量为 1 的边。</p><p>​\t此时求最大流，如果流过一条 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>i</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">i_1</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.80952em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\"style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span> 到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>j</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">j_2</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\"style=\"margin-right:.05724em\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.05724em;margin-right:.05em\"><span class=\"pstrut\"style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span>的边，说明可以把以 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 结尾的点和以 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.05724em\">j</span></span></span></span> 开头的两条路径合并起来，变成一条路径。而答案要最小路径覆盖，也就是总点数 - 合并的次数（最大流）。</p><p>​\t因为是 DAG，所以不会出现环。</p><h2 id=\" 魔术球问题 \"><a class=\"markdownIt-Anchor\"href=\"# 魔术球问题 \"></a> 魔术球问题 </h2><p>​\t题解：<strong> 网络最大流 </strong></p><p>​\t如果我们已知答案<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mi>n</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">Ans</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span></span></span></span>，要判断放 1~Ans 最少要几根柱子，我们可以这么做：</p><p>​\t对于每个数字<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span>，如果存在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.05724em\">j</span></span></span></span>，满足<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi><mo>&gt;</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">j&gt;i</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.05724em\">j</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span>，并且<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo>+</mo><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">i+j</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.74285em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.05724em\">j</span></span></span></span> 是完全平方数，那么从 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.05724em\">j</span></span></span></span>连一条边，连完之后显然这是一个 DAG，求出最小路径覆盖就是需要的柱子（做法同最小路径覆盖）</p><p>​\t那么这时候我们可以二分答案然后判定，但是基于残量网络的优秀性质，我们可以直接枚举答案，对于一个新节点，重新加入相关边，并在残量网络上跑最大流。到枚举到第一个不可行的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mi>n</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">Ans</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span></span></span></span>，答案就是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mi>n</mi><mi>s</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">Ans-1</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.76666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span></p><p>​\t输出方案的时候删掉最后两个点，重新跑最大流（或者删除相关容量）。</p><h2 id=\" 圆桌聚餐 \"><a class=\"markdownIt-Anchor\"href=\"# 圆桌聚餐 \"></a> 圆桌聚餐</h2><p>​\t题解：<strong> 网络最大流 </strong></p><p>​\t新建源点 S，汇点 T。</p><p>​\t从 S 到每个单位容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>r</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">r_i</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.58056em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\"style=\"margin-right:.02778em\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.02778em;margin-right:.05em\"><span class=\"pstrut\"style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span> 的边，从圆桌向 T 连一条容量为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">C_i</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.83333em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\"style=\"margin-right:.07153em\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.07153em;margin-right:.05em\"><span class=\"pstrut\"style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span> 的边，每个单位向每个圆桌连一条容量为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 的边。</p><p>​\t跑最大流后看哪些边被流过即可。</p><h2 id=\" 最长递增子序列 \"><a class=\"markdownIt-Anchor\"href=\"# 最长递增子序列 \"></a> 最长递增子序列 </h2><p>​\t题解：<strong> 网络最大流 </strong></p><p>​\t注意题目是非严格递增 QAQ。</p><p>​\t第一问是经典的 DP（可以用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\"style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 做法水），此时得到 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">dp</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span></span></span></span> 数组 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[i]</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span> 表示 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 结尾的最长 </p><p>​\t第二问可以把每个点拆点，限制流量不超过 1（从入点到出点容量为 1 的边），从 S 向<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[i]</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span> 为 1 的入点容量为 1 的边，从 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[i]</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span> 为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">ans</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span></span></span></span>的出点边向 T 连一条容量为 1 的边。</p><p>​\t对于可以转移的，并且 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn><mo>=</mo><mi>f</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">(</mo><mi>i</mi><mo>&lt;</mo><mi>j</mi><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>&lt;</mo><mo>=</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f[i]+1=f[j](i&lt;j,a[i]&lt;=a[j])</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\"style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.05724em\">j</span><span class=\"mpunct\">,</span><span class=\"mspace\"style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\"style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\"style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span></span></span></span>，从 i 的出点向 j 的入点一条容量为 1 的边，然后跑网络最大流即可。</p><p>​\t对于第三问，只需要把 1 和 n 的容量限制加上<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span></span></span></span> 即可。此时再跑网络最大流即可。</p><h2 id=\" 试题库 \"><a class=\"markdownIt-Anchor\"href=\"# 试题库 \"></a> 试题库 </h2><p>​\t题解：<strong> 网路最大流 </strong></p><p>​\t新建源点 S，汇点 T。</p><p>​\t试题向类型建容量为 1 的边，源点 S 向试题连容量为 1 的边，类型向汇点 T 连容量为需要题数的边，跑网络最大流看是否满流。</p><p>​\t输出方案看哪些试题向类型的边被流过。</p><h2 id=\" 方格取数 \"><a class=\"markdownIt-Anchor\"href=\"# 方格取数 \"></a> 方格取数</h2><p>​\t题解：<strong> 网络最小割 </strong></p><p>​\t首先对网格进行黑白染色。</p><p>​\t然后假设得到了所有答案。</p><p>​\t新建源点 S，汇点 T，从 S 向所有白色格子连一条容量为其值的边，所有黑色格子向 T 连一条容量为其值的边，所有白色格子向其相邻的黑色格子连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span></span></span></span> 的边，容易发现此时求最小割即最少减少的答案——如果要选一个白色格子，必须保证其相邻的黑色格子不选（割掉），选黑色格子同理。</p><h2 id=\" 餐巾计划 \"><a class=\"markdownIt-Anchor\"href=\"# 餐巾计划 \"></a> 餐巾计划 </h2><p>​\t题解：<strong> 有上下界的最小费用流 </strong></p><p>​\t把每天拆点，定义为入点和出点。</p><p>​\t从入点到出点连一条上下界容量都为当天需要毛巾，费用为 0 的边，表示这天使用了这么多毛巾。</p><p>​\t从 S 向所有入点连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span></span></span></span>，费用为购买新毛巾的价格，表示每天都可以新购入毛巾。——此处建图也可以全部第一天买。</p><p>​\t从每天的入点向下一天（如果有）的入点连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span></span></span></span>，费用为 0 的边，表示前一天没用过的下一天还能用。</p><p>​\t从每天的出点向慢洗后那天的入点连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span></span></span></span>，费用为慢洗的价格的边。</p><p>​\t从每天的出点向快洗后那天的入点连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span></span></span></span>，费用为快洗的价格的边。</p><p>​\t从每一天的出点向 T 连一条边，表示用过了扔了。</p><p>​\t此时跑上下界最小费用最大流即可。（显然有解）</p><h2 id=\" 软件补丁 \"><a class=\"markdownIt-Anchor\"href=\"# 软件补丁 \"></a> 软件补丁</h2><p>​\t题解：<strong> 状态压缩, 最短路 </strong></p><p>​\t把拥有 bug 压缩成一个二进制状态，依次判断 m 条可否转移（可以不显示建图）。类似于最短路做法，时间复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(2^nm)</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.664392em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\"style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span></span></span></span></p><h2 id=\" 数字梯形 \"><a class=\"markdownIt-Anchor\"href=\"# 数字梯形 \"></a> 数字梯形</h2><p>​\t题解：<strong> 最大费用最大流 </strong></p><p>​\tPS：这是一个等腰梯形</p><p>​\t对于第一问。</p><p>​\t对每个点拆点，中间连一条容量为 1，费用为其值的边（实现可以用其值的相反数）</p><p>​\t从源点 S 向第一层的每一个点连一条容量为 1，费用为 0 的边。</p><p>​\t对于每个点的出点，向它左下角和右下角的点的入点连一条容量为 1，费用为 0 的边。</p><p>​\t从最后一层的出点向 T 点连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span></span></span></span>，费用为 0 的边。</p><p>​\t此时求最大费用最大流，即为所要结果</p><p>​\t对于第二问，在第一问基础上只需要将每个点拆开的中间容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span></span></span></span> 即可。</p><p>​\t对于第三问，在第二问基础上只需要将到左下角，右下角的边的容量改成 (增加)<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span></span></span></span> 即可。</p><h2 id=\" 运输问题 \"><a class=\"markdownIt-Anchor\"href=\"# 运输问题 \"></a> 运输问题 </h2><p>​\t题解：<strong> 最小费用最大流, 最大费用最大流 </strong></p><p>​\t新建源点 S，汇点 T。</p><p>​\t从源点 S 到所有仓库一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.58056em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\"style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span> 费用为 0 的边，从所有商店到汇点容量为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>b</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">b_j</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.980548em;vertical-align:-.286108em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\"style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\"style=\"margin-right:.05724em\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.286108em\"><span></span></span></span></span></span></span></span></span></span> 费用为 0 的边。从每个仓库到每个商店连一条容量为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span></span></span></span>, 费用为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>c</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">c[i]</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span> 的边，跑最小费用最大流和最大费用最大流（只需要把边取反，再答案取反即可）</p><h2 id=\" 分配问题 \"><a class=\"markdownIt-Anchor\"href=\"# 分配问题 \"></a> 分配问题 </h2><p>​\t题解：<strong> 最小费用最大流, 最大费用最大流 </strong></p><p>​\t新建源点 S，汇点 T。</p><p>​\t从源点 S 到所有仓库一条容量为 1 费用为 0 的边，从所有商店到汇点容量为 1 费用为 0 的边。从第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 个仓库到第 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.05724em\">j</span></span></span></span> 个商店连一条容量为 1, 费用为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>c</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">c[i][j]</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\"style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span></span></span></span> 的边，跑最小费用最大流和最大费用最大流（只需要把边取反，再答案取反即可）</p><h2 id=\" 负载平衡 \"><a class=\"markdownIt-Anchor\"href=\"# 负载平衡 \"></a> 负载平衡 </h2><p>​\t题解：<strong> 最小费用最大流 </strong></p><p>​\t将每个数都减去平均数，得到 A 数组。</p><p>​\t对于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">A[i]&gt;0</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">0</span></span></span></span> 的，从 S 向 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 连一条容量为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A[i]</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span> 的边，否则从 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 向 T 连一条容量为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">-A[i]</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">−</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span> 的边 </p><p>​\t每个点向相邻的两个点（注意是环）连容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span></span></span></span>，费用为 1 的边。</p><p>​\t跑最小费用最大流即是答案。</p><h2 id=\" 最长 -k- 可重区间集 \"><a class=\"markdownIt-Anchor\"href=\"# 最长 -k- 可重区间集 \"></a> 最长 k 可重区间集</h2><p>​\t题解：<strong> 最大费用最大流 </strong></p><p>​\t首先离散化。</p><p>​\t定义<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>w</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">w[i] = r[i]-l[i]</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.02691em\">w</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.02778em\">r</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.01968em\">l</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span> 表示选择这条线段的收益。</p><p>​\t对于每个点，从 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i+1</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.74285em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span>连一条容量为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span></span></span></span>，费用为 0 的边。</p><p>​\t从 S 向第一个点连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\"style=\"margin-right:.07153em\">K</span></span></span></span>，费用为 0 的边。</p><p>​\t从最后一个点向 T 连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\"style=\"margin-right:.07153em\">K</span></span></span></span>，费用为 0 的边。</p><p>​\t对于每条线段，从<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">l[i]</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.01968em\">l</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span> 到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">r[i]</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.02778em\">r</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>连一条容量为 1，费用为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>w</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">w[i]</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.02691em\">w</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span> 的边。</p><p>​\t此时跑 S 到 T 的最大费用最大流就是答案。</p><p>​\t每条增广路是单向的，会经过若干线段到达 T，每个点最多只经过 K 次。</p><h2 id=\" 最长 k 可重线段集问题 \"><a class=\"markdownIt-Anchor\"href=\"# 最长 k 可重线段集问题 \"></a> 最长 k 可重线段集问题 </h2><p>​\t题解：<strong> 最大费用最大流 </strong></p><p>​\t做法同上，定义<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>w</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>d</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mi>e</mi><mi>g</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">w[i] = dist(Segment)</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.02691em\">w</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\"style=\"margin-right:.05764em\">S</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\"style=\"margin-right:.03588em\">g</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span>，注意是开线段。</p><p>​\t由于可能有和 y 轴平行的线段，作一下处理：</p><p>​\t对于每个<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">l[i]</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.01968em\">l</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">r[i]</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.02778em\">r</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span> 都乘上 2。</p><p>​\t如果 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">l[i]=r[i]</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.01968em\">l</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.02778em\">r</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>，那么<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">l[i]-1</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.01968em\">l</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span>，否则<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">l[i]+1</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.01968em\">l</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span></p><p>​\t注意到这样的话不会对其它线段造成影响，而且这个点也最多 K 次。</p><h2 id=\" 星际转移 \"><a class=\"markdownIt-Anchor\"href=\"# 星际转移 \"></a> 星际转移</h2><p>​\t题解：<strong> 网络最大流 </strong></p><p>​\t枚举答案，对于小于等于答案的每个时刻，建立那个时候的地球，各空间站，月球这些点。</p><p>​\t从 S 向 0 时刻的地球连一条容量为 k 的边。</p><p>​\t从上一个时刻的点向这个时刻连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span></span></span></span> 的边，表示可以滞留。</p><p>​\t从上一个时刻太空船所在位置的点向这个时刻太空船所在位置的点连一条容量为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>H</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">H[i]</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.08125em\">H</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span> 的边表示可以转移。</p><p>​\t从每个时刻的月球向 T 连一条容量为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span></span></span></span> 的边，表示登月就结束。</p><p>​\t如果满流，说明答案可行，输出。</p><p>​\t如果 (k+2)*(n+2) 次后还不行说明不可行（或者用并查集单独判断是否联通）</p><h2 id=\" 孤岛营救问题 \"><a class=\"markdownIt-Anchor\"href=\"# 孤岛营救问题 \"></a> 孤岛营救问题 </h2><p>​\t题解：<strong> 状态压缩, 最短路 </strong></p><p>​\t注意钥匙🔑数量<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>&lt;</mo><mo>=</mo><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">&lt;=10</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.5782em;vertical-align:-.0391em\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\"style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span> 所以用一个二进制表示有哪些钥匙，然后跑分层图 BFS 得到最短路即可。</p><h2 id=\" 航空路线问题 \"><a class=\"markdownIt-Anchor\"href=\"# 航空路线问题 \"></a> 航空路线问题 </h2><p>​\t题解：<strong> 最大费用最大流 </strong></p><p>​\t把每个城市拆点，1 号节点和 n 号节点之间入点和出点连容量为 2，费用为 1 的边，其它节点连容量为 1 费用为 1 的边。对于可以到达的，从出点到入点连容量为 1（如果是 1 号点到 n 号点，连容量为 2），费用为 0 的边。</p><p>​\t从 1 号点的入点到 n 号点的出点跑最大费用最大流，其实就是跑出两条路径。</p><p>​\t输出方案可以顺着哪些被流过的边，正着倒着做一下。</p><h2 id=\" 汽车加油行驶问题 \"><a class=\"markdownIt-Anchor\"href=\"# 汽车加油行驶问题 \"></a> 汽车加油行驶问题</h2><p>​\t题解：<strong> 最短路 </strong></p><p>​\t注意到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi><mo>&lt;</mo><mo>=</mo><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">k&lt;=10</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.73354em;vertical-align:-.0391em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.03148em\">k</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\"style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\"style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span>，我们定义一个节点<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo separator=\"true\">,</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(i,j,k)</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\"style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.05724em\">j</span><span class=\"mpunct\">,</span><span class=\"mspace\"style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.03148em\">k</span><span class=\"mclose\">)</span></span></span></span> 表示在位置 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(i,j)</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\"style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.05724em\">j</span><span class=\"mclose\">)</span></span></span></span>，其剩余油量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\"style=\"margin-right:.03148em\">k</span></span></span></span>，那么从一个点向周围的点，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x,y,k-1)</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\"style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.03588em\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\"style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.03148em\">k</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\"style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 连边。</p><p>​\t如果到达的哪个点是加油站，那么应该是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\"> 满</mi><mi mathvariant=\"normal\">油 </mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(i,j, 满油)</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\"style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.05724em\">j</span><span class=\"mpunct\">,</span><span class=\"mspace\"style=\"margin-right:.16666666666666666em\"></span><span class=\"mord cjk_fallback\"> 满</span><span class=\"mord cjk_fallback\">油 </span><span class=\"mclose\">)</span></span></span></span> 连边。</p><p>​\t此时求 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\"> 满</mi><mi mathvariant=\"normal\">油 </mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1,1, 满油)</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\"style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\"style=\"margin-right:.16666666666666666em\"></span><span class=\"mord cjk_fallback\"> 满</span><span class=\"mord cjk_fallback\">油 </span><span class=\"mclose\">)</span></span></span></span> 到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>n</mi><mo separator=\"true\">,</mo><mn>0</mn><mtext> </mtext><mi mathvariant=\"normal\">满 </mi><mi mathvariant=\"normal\"> 油</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(n,n,0~ 满油)</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\"style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\"style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">0</span><span class=\"mspace nobreak\"> </span><span class=\"mord cjk_fallback\">满 </span><span class=\"mord cjk_fallback\"> 油</span><span class=\"mclose\">)</span></span></span></span>的最短路即可。</p><h2 id=\" 深海机器人问题 \"><a class=\"markdownIt-Anchor\"href=\"# 深海机器人问题 \"></a> 深海机器人问题 </h2><p>​\t题解：<strong> 最大费用最大流 </strong></p><p>​\t新建源点 S，汇点 T，每个点向右边，下面的点连 2 条边，第一条容量为 1，费用为价值，第二条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\"style=\"margin-right:.10764em\">f</span></span></span></span>，费用为 0，S 到可以进入点容量为 1，费用为 0，可出去到 T 一条容量为 1，费用为 0 的边，跑 S 到 T 的最大费用最大流即可。</p><h2 id=\" 火星探险问题 \"><a class=\"markdownIt-Anchor\"href=\"# 火星探险问题 \"></a> 火星探险问题</h2><p>​\t题解：<strong> 最大费用最大流 </strong></p><p>​\t每个点拆点，中间的边同上题，相邻的出点到入点，S 到(1,1, 入) 一条容量为 car，费用为 0 的边，最后一个点的出点到 T 容量为 car，费用为 0 的边，求最大费用最大流。输出方案的时候只需要 DFS 一下，做完一条把流量返还即可。</p><h2 id=\" 骑士共存问题 \"><a class=\"markdownIt-Anchor\"href=\"# 骑士共存问题 \"></a> 骑士共存问题 </h2><p>​\t题解：<strong> 网络最小割 </strong></p><p>​\t首先黑白染色，然后类似与方格染色建图，也就是先假设全部都选，然后减去最小割就是答案。</p><h1 id=\" 模板 \"><a class=\"markdownIt-Anchor\"href=\"# 模板 \"></a> 模板</h1><h2 id=\" 头文件 \"><a class=\"markdownIt-Anchor\"href=\"# 头文件 \"></a> 头文件</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Hello Wolrd</span></span><br><span class=\"line\"><span class=\"comment\">//There is Special Pig Jiong in the world. </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x3f3f3f3f</span>,oo = inf;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RG register</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> __wzp[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">15</span>|<span class=\"number\">1</span>],*__S=__wzp+<span class=\"number\">32768</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc() (__S&gt;=__wzp+32768?(__wzp[fread(__wzp,sizeof(char),1&lt;&lt;15,stdin)]=EOF),*((__S=__wzp)++):*(__S++))</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RG ll x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;RG <span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ll x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)x=-x,pc(<span class=\"string\">'-'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">10</span>)<span class=\"built_in\">write</span>(x/<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rd read</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mp make_pair</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sqr(x) ((x)*(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(RG int i=(a);i&lt;(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fin(x) &#123;freopen(#x<span class=\"meta-string\">\".in\"</span>,<span class=\"meta-string\">\"r\"</span>,stdin);&#125;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y1 ________y1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = ;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> M = ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOCAL </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> LOCAL</span></span><br><span class=\"line\">    fin(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"dinic 模板 \"><a class=\"markdownIt-Anchor\"href=\"#dinic 模板 \"></a> Dinic 模板</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配合 T 模板使用 </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N ????</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M ????</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,nxt,cap;</span><br><span class=\"line\">    Edge()&#123;&#125;</span><br><span class=\"line\">    Edge(<span class=\"keyword\">int</span> to,<span class=\"keyword\">int</span> nxt,<span class=\"keyword\">int</span> cap):to(to),nxt(nxt),cap(cap)&#123;&#125;;</span><br><span class=\"line\">&#125;edge[M*<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> first[N],cur[N],nume;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    edge[nume] = Edge(b,first[a],c);first[a] = nume++;</span><br><span class=\"line\">    edge[nume] = Edge(a,first[b],<span class=\"number\">0</span>);first[b] = nume++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> q[N],dis[N],S,T;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u,v,front,rear;mem(dis,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(front=rear=<span class=\"number\">0</span>,dis[u=q[rear++]=T]=<span class=\"number\">1</span>;front&lt;rear;)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u=q[front++],e=first[u];~e;e=edge[e].nxt)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(edge[e^<span class=\"number\">1</span>].cap &amp;&amp; !~dis[v=edge[e].to])dis[q[rear++]=v]=dis[u]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dis[S]!=<span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> flow)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u==T)<span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> used = <span class=\"number\">0</span>,d,v;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> &amp;e=cur[u];~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(edge[e].cap &amp;&amp; dis[v=edge[e].to]==dis[u]<span class=\"number\">-1</span> &amp;&amp; (d = dfs(v,<span class=\"built_in\">min</span>(flow-used,edge[e].cap))))</span><br><span class=\"line\">            edge[e].cap -= d,edge[e^<span class=\"number\">1</span>].cap += d,used += d;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(used == flow) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!used)dis[u]=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> used;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dinic</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;bfs();ans+=dfs(S,inf))</span><br><span class=\"line\">        rep(i,<span class=\"number\">0</span>,N) cur[i] = first[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    S = ???,T = ???;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"spfa 费用流模板 \"><a class=\"markdownIt-Anchor\"href=\"#spfa 费用流模板 \"></a> SPFA 费用流模板</h2><p>PS：最小费用最大流</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配合 T 模板使用 </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1005 </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 20005 </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> S,T;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,nxt,cap,cost;</span><br><span class=\"line\">    Edge()&#123;&#125;</span><br><span class=\"line\">    Edge(<span class=\"keyword\">int</span> to,<span class=\"keyword\">int</span> nxt,<span class=\"keyword\">int</span> cap,<span class=\"keyword\">int</span> cost):to(to),nxt(nxt),cap(cap),cost(cost)&#123;&#125;</span><br><span class=\"line\">&#125;edge[<span class=\"number\">2</span>*M];</span><br><span class=\"line\"><span class=\"keyword\">int</span> first[N],nume,n,m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> cap,<span class=\"keyword\">int</span> cost)</span></span>&#123;</span><br><span class=\"line\">    edge[nume] = Edge(b,first[a],cap,cost);first[a] = nume++;</span><br><span class=\"line\">    edge[nume] = Edge(a,first[b],<span class=\"number\">0</span>,-cost);first[b] = nume++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[N],vis[N],pre[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">spfa</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    mem(dis,<span class=\"number\">0x3f</span>);</span><br><span class=\"line\">    mem(vis,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    mem(pre,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    dis[S]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    vis[S]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    q.push(S);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q.front();q.pop();</span><br><span class=\"line\">        vis[u] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e=first[u];~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = edge[e].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(edge[e].cap&amp;&amp;dis[v]&gt;dis[u]+edge[e].cost)&#123;</span><br><span class=\"line\">                dis[v]=dis[u]+edge[e].cost;</span><br><span class=\"line\">                pre[v] = e;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!vis[v])&#123;</span><br><span class=\"line\">                    q.push(v);</span><br><span class=\"line\">                    vis[v]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dis[T]!=inf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mcmf</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> minflow,maxflow=<span class=\"number\">0</span>,mincost=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(spfa())&#123;</span><br><span class=\"line\">        minflow = inf;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=pre[T];~i;i=pre[edge[i^<span class=\"number\">1</span>].to])</span><br><span class=\"line\">            minflow = <span class=\"built_in\">min</span>(minflow,edge[i].cap);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=pre[T];~i;i=pre[edge[i^<span class=\"number\">1</span>].to])</span><br><span class=\"line\">            edge[i].cap -= minflow,</span><br><span class=\"line\">            edge[i^<span class=\"number\">1</span>].cap += minflow;</span><br><span class=\"line\">        mincost += minflow * dis[T];</span><br><span class=\"line\">        maxflow += minflow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mincost;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    S = ??,T = ??;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\" 部分代码的部分 \"><a class=\"markdownIt-Anchor\"href=\"# 部分代码的部分 \"></a> 部分代码的部分</h1><p> 出于 <s> 懒惰 </s> 给大家独立思考的目的，上面很多不详细，这里贴部分代码。</p><p>但是又出于 <s> 懒惰 </s> 美观，只帖部分代码的部分。</p><p>缺少部分一般为变量定义（自己写吧）和最大流（最小割)，或者最小（大）费用最大流，这个往上面看吧。</p><h2 id=\" 骑士共存问题 -2\"><a class=\"markdownIt-Anchor\"href=\"# 骑士共存问题 -2\"></a> 骑士共存问题</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> encode(a,b) ((a) * (n) + (b) + (1))</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,ans,A[<span class=\"number\">205</span>][<span class=\"number\">205</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dx[<span class=\"number\">8</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dy[<span class=\"number\">8</span>]=&#123;<span class=\"number\">2</span>,<span class=\"number\">-2</span>,<span class=\"number\">2</span>,<span class=\"number\">-2</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    S = <span class=\"number\">0</span>,T = n*n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>(),m = rd();</span><br><span class=\"line\">    ans = n*n-m;</span><br><span class=\"line\">    mem(A,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    rep(i,<span class=\"number\">0</span>,m)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = rd(),y = rd();</span><br><span class=\"line\">        A[x<span class=\"number\">-1</span>][y<span class=\"number\">-1</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    rep(i,<span class=\"number\">0</span>,n)rep(j,<span class=\"number\">0</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[i][j]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((i+j)&amp;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            Addedge(S,encode(i,j),<span class=\"number\">1</span>);</span><br><span class=\"line\">            rep(d,<span class=\"number\">0</span>,<span class=\"number\">8</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x = i + dx[d],y = j + dy[d];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>||y&lt;<span class=\"number\">0</span>||x&gt;=n||y&gt;=n||A[x][y]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                Addedge(encode(i,j),encode(x,y),inf);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            Addedge(encode(i,j),T,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans-dinic());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\" 火星探险问题 -2\"><a class=\"markdownIt-Anchor\"href=\"# 火星探险问题 -2\"></a> 火星探险问题</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> P,Q,<span class=\"built_in\">turn</span>[<span class=\"number\">233</span>];</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> encode(a,b) ((a) * (Q) + (b) + 1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==P<span class=\"number\">-1</span>&amp;&amp;y==Q<span class=\"number\">-1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a=encode(x,y)*<span class=\"number\">2</span>,b=encode(x+<span class=\"number\">1</span>,y)*<span class=\"number\">2</span><span class=\"number\">-1</span>,c=encode(x,y+<span class=\"number\">1</span>)*<span class=\"number\">2</span><span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==P<span class=\"number\">-1</span>)b=<span class=\"number\">-1</span>;<span class=\"keyword\">if</span>(y==Q<span class=\"number\">-1</span>)c=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e=first[a];~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(e&amp;<span class=\"number\">1</span>)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = edge[e].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[e] &gt;= edge[e^<span class=\"number\">1</span>].cap) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v==b)&#123;</span><br><span class=\"line\">            ++vis[e];</span><br><span class=\"line\">            <span class=\"built_in\">turn</span>[++*<span class=\"built_in\">turn</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            dfs(x+<span class=\"number\">1</span>,y);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v==c)&#123;</span><br><span class=\"line\">            ++vis[e];</span><br><span class=\"line\">            <span class=\"built_in\">turn</span>[++*<span class=\"built_in\">turn</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            dfs(x,y+<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> car = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    Q = <span class=\"built_in\">read</span>(),P = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    S = <span class=\"number\">0</span>,T = P*Q*<span class=\"number\">2</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Addedge(S,<span class=\"number\">1</span>,car,<span class=\"number\">0</span>);</span><br><span class=\"line\">    Addedge(encode(P<span class=\"number\">-1</span>,Q<span class=\"number\">-1</span>)*<span class=\"number\">2</span>,T,car,<span class=\"number\">0</span>);</span><br><span class=\"line\">    rep(i,<span class=\"number\">0</span>,P)rep(j,<span class=\"number\">0</span>,Q)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>) Addedge(encode(i,j)*<span class=\"number\">2</span><span class=\"number\">-1</span>,encode(i,j)*<span class=\"number\">2</span>,inf,<span class=\"number\">0</span>); <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==<span class=\"number\">2</span>) Addedge(encode(i,j)*<span class=\"number\">2</span><span class=\"number\">-1</span>,encode(i,j)*<span class=\"number\">2</span>,inf,<span class=\"number\">0</span>),</span><br><span class=\"line\">                 Addedge(encode(i,j)*<span class=\"number\">2</span><span class=\"number\">-1</span>,encode(i,j)*<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i!=P<span class=\"number\">-1</span>)Addedge(encode(i,j)*<span class=\"number\">2</span>,encode(i+<span class=\"number\">1</span>,j)*<span class=\"number\">2</span><span class=\"number\">-1</span>,inf,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j!=Q<span class=\"number\">-1</span>)Addedge(encode(i,j)*<span class=\"number\">2</span>,encode(i,j+<span class=\"number\">1</span>)*<span class=\"number\">2</span><span class=\"number\">-1</span>,inf,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mcmf();</span><br><span class=\"line\">    mem(vis,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=car;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">turn</span>[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        dfs(<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=<span class=\"built_in\">turn</span>[<span class=\"number\">0</span>];j++)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>,i,<span class=\"built_in\">turn</span>[j]);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\" 深海机器人问题 -2\"><a class=\"markdownIt-Anchor\"href=\"# 深海机器人问题 -2\"></a> 深海机器人问题</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> pos[<span class=\"number\">233</span>][<span class=\"number\">233</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> A=rd(),B=rd(),p=rd(),q=rd();</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    rep(i,<span class=\"number\">0</span>,p+<span class=\"number\">1</span>)rep(j,<span class=\"number\">0</span>,q+<span class=\"number\">1</span>)pos[i][j]=++tot;</span><br><span class=\"line\">    S=tot+<span class=\"number\">1</span>,T=S+<span class=\"number\">1</span>;</span><br><span class=\"line\">    rep(i,<span class=\"number\">0</span>,p+<span class=\"number\">1</span>)rep(j,<span class=\"number\">0</span>,q)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        Addedge(pos[i][j],pos[i][j+<span class=\"number\">1</span>],<span class=\"number\">1</span>,-x);</span><br><span class=\"line\">        Addedge(pos[i][j],pos[i][j+<span class=\"number\">1</span>],inf,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    rep(j,<span class=\"number\">0</span>,q+<span class=\"number\">1</span>)rep(i,<span class=\"number\">0</span>,p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">        Addedge(pos[i][j],pos[i+<span class=\"number\">1</span>][j],<span class=\"number\">1</span>,-x) ;</span><br><span class=\"line\">        Addedge(pos[i][j],pos[i+<span class=\"number\">1</span>][j],inf,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(A--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = rd(),x=rd(),y=rd();</span><br><span class=\"line\">        Addedge(S,pos[x][y],k,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(B--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = rd(),x=rd(),y=rd();</span><br><span class=\"line\">        Addedge(pos[x][y],T,k,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,-mcmf());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\" 数字梯形 -2\"><a class=\"markdownIt-Anchor\"href=\"# 数字梯形 -2\"></a> 数字梯形</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    m = <span class=\"built_in\">read</span>(),n = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    S = tot++,T = tot++;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m+i<span class=\"number\">-1</span>;j++)&#123;</span><br><span class=\"line\">            id[i][j][<span class=\"number\">0</span>] = tot++;</span><br><span class=\"line\">            id[i][j][<span class=\"number\">1</span>] = tot++;</span><br><span class=\"line\">            Addedge(id[i][j][<span class=\"number\">0</span>],id[i][j][<span class=\"number\">1</span>],<span class=\"number\">1</span>,-<span class=\"built_in\">read</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m+i<span class=\"number\">-1</span>;j++)&#123;</span><br><span class=\"line\">            Addedge(id[i][j][<span class=\"number\">1</span>],id[i+<span class=\"number\">1</span>][j][<span class=\"number\">0</span>],<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">            Addedge(id[i][j][<span class=\"number\">1</span>],id[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>][<span class=\"number\">0</span>],<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)</span><br><span class=\"line\">        Addedge(S,id[<span class=\"number\">1</span>][i][<span class=\"number\">0</span>],<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n+m<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        Addedge(id[n][i][<span class=\"number\">1</span>],T,inf,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,-mcmf());</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nume;i+=<span class=\"number\">2</span>) edge[i].cap+=edge[i^<span class=\"number\">1</span>].cap,edge[i^<span class=\"number\">1</span>].cap=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m+i<span class=\"number\">-1</span>;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> e = pos[id[i][j][<span class=\"number\">0</span>]][id[i][j][<span class=\"number\">1</span>]];</span><br><span class=\"line\">            edge[e].cap = inf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,-mcmf());</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nume;i+=<span class=\"number\">2</span>) edge[i].cap+=edge[i^<span class=\"number\">1</span>].cap,edge[i^<span class=\"number\">1</span>].cap=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m+i<span class=\"number\">-1</span>;j++)&#123;</span><br><span class=\"line\">            edge[pos[id[i][j][<span class=\"number\">1</span>]][id[i+<span class=\"number\">1</span>][j][<span class=\"number\">0</span>]]].cap = inf;</span><br><span class=\"line\">            edge[pos[id[i][j][<span class=\"number\">1</span>]][id[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>][<span class=\"number\">0</span>]]].cap = inf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,-mcmf());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\" 最长 k 可重区间集 \"><a class=\"markdownIt-Anchor\"href=\"# 最长 k 可重区间集 \"></a> 最长 K 可重区间集</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> l[N],y[N*<span class=\"number\">2</span>],r[N],w[N],K;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>(),K = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        l[i] = <span class=\"built_in\">read</span>(),r[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l[i]&gt;=r[i])swap(l[i],r[i]);</span><br><span class=\"line\">        w[i] = r[i]-l[i];</span><br><span class=\"line\">        y[++*y] = l[i],y[++*y] = r[i];</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    sort(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y);</span><br><span class=\"line\">    *y = unique(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y) - y - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        l[i] = lower_bound(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y,l[i]) - y;</span><br><span class=\"line\">        r[i] = lower_bound(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y,r[i]) - y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    S = <span class=\"number\">0</span>,T = <span class=\"number\">2</span>**y + <span class=\"number\">1</span>;</span><br><span class=\"line\">    Addedge(S,<span class=\"number\">1</span>,K,<span class=\"number\">0</span>);</span><br><span class=\"line\">    Addedge(<span class=\"number\">2</span>**y,T,K,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">2</span>**y;i++) Addedge(i,i+<span class=\"number\">1</span>,inf,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) Addedge(l[i],r[i],<span class=\"number\">1</span>,-w[i]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,-mcmf());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\" 航空路线问题 -2\"><a class=\"markdownIt-Anchor\"href=\"# 航空路线问题 -2\"></a> 航空路线问题</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>,<span class=\"keyword\">int</span>&gt; id;</span><br><span class=\"line\"><span class=\"built_in\">string</span> name[<span class=\"number\">205</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>();m = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> str;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; str;</span><br><span class=\"line\">        id[str] = i;</span><br><span class=\"line\">        name[i] = str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    S = <span class=\"number\">1</span>;T = n*<span class=\"number\">2</span>;</span><br><span class=\"line\">    Addedge(<span class=\"number\">1</span>,<span class=\"number\">1</span>+n,<span class=\"number\">2</span>,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        Addedge(i,i+n,<span class=\"number\">1</span>,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Addedge(n,n+n,<span class=\"number\">2</span>,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> str;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; str;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = id[str];</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; str;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = id[str];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&gt;y) swap(x,y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>&amp;&amp;y==n)Addedge(x+n,y,<span class=\"number\">2</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> Addedge(x+n,y,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = mcmf(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ans == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">\"No Solution!\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans<span class=\"number\">-2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; name[<span class=\"number\">1</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    mem(vis,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e=first[n+<span class=\"number\">1</span>],j,k;~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!edge[e].cap&amp;&amp;!(e&amp;<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">            k = edge[e].to;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(k)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; name[k] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">                vis[k] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(j=first[k+n],k=<span class=\"number\">0</span>;~j;j=edge[j].nxt)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(!edge[j].cap&amp;&amp;!(j&amp;<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                        k = edge[j].to;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e=first[n],j,k;~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!edge[e^<span class=\"number\">1</span>].cap&amp;&amp;(e&amp;<span class=\"number\">1</span>)&amp;&amp;!vis[edge[e].to-n])&#123;</span><br><span class=\"line\">            k = edge[e].to-n;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(k)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; name[k] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">                vis[k] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(j=first[k],k=<span class=\"number\">0</span>;~j;j=edge[j].nxt)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(!edge[j^<span class=\"number\">1</span>].cap&amp;&amp;(j&amp;<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                        k = edge[j].to - n;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\" 餐巾计划 -2\"><a class=\"markdownIt-Anchor\"href=\"# 餐巾计划 -2\"></a> 餐巾计划</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n,_P,_M,_F,_N,_S;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>(),_P = <span class=\"built_in\">read</span>(),_M = <span class=\"built_in\">read</span>(),_F = <span class=\"built_in\">read</span>(),_N = <span class=\"built_in\">read</span>(),_S = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    S = <span class=\"number\">2</span>*n+<span class=\"number\">1</span>,T=S+<span class=\"number\">1</span>,SS=T+<span class=\"number\">1</span>,TT=SS+<span class=\"number\">1</span>;</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        Addedge(i+n,TT,inf,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        Addedge(i,i+n,inf-x,<span class=\"number\">0</span>);</span><br><span class=\"line\">        Addedge(i,T,x,<span class=\"number\">0</span>);</span><br><span class=\"line\">        Addedge(S,i+n,x,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        Addedge(SS,i,inf,_P);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i!=n) Addedge(i,i+<span class=\"number\">1</span>,inf,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i+_M&lt;=n) Addedge(i+n,i+_M,inf,_F);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i+_N&lt;=n) Addedge(i+n,i+_N,inf,_S);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Addedge(TT,SS,inf,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,mcmf());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    solve();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mi>o</mi><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">Loj</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8777699999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">L</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span></span></span></span>上去掉了一题：机器人路径规划问题，所以就不做啦。</p><p><a href=\"https://loj.ac/problems/search?keyword=%E7%BD%91%E7%BB%9C%E6%B5%81+24+%E9%A2%98\" target=\"_blank\" rel=\"noopener\">网络流24(23)题题面</a></p>","more":"<p>[TOC]</p><h1 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\"></a> 题解</h1><h2 id=\"搭配飞行员\"><a class=\"markdownIt-Anchor\" href=\"#搭配飞行员\"></a> 搭配飞行员</h2><p>​\t题解：<strong>网络最大流</strong></p><p>​\t二分图最大匹配，可以用容易实现的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>H</mi><mi>u</mi><mi>n</mi><mi>g</mi><mi>a</mi><mi>r</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">Hungary</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8777699999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.08125em\">H</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span></span></span></span>算法<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mi mathvariant=\"normal\">/</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3/n(m+n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>，也可以用网络流建图，用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>D</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">Dinic</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">D</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">c</span></span></span></span>跑二分图的复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msqrt><mi>n</mi></msqrt><mo>∗</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\sqrt n*m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.05028em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8002800000000001em\"><span class=\"svg-align\" style=\"top:-3em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord mathdefault\" style=\"padding-left:.833em\">n</span></span><span style=\"top:-2.76028em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"hide-tail\" style=\"min-width:.853em;height:1.08em\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,\n-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,\n-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,\n35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,\n-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467\ns-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422\ns-65,47,-65,47z M834 80H400000v40H845z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.23972em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span></span></span></span>别问我为什么。</p><p>​\t新建源点S，汇点T，从S向每个正驾驶连一条容量为1的边，每个副驾驶向T连一条容量为1的边，对于每个可以匹配的正驾驶和副驾驶，从正驾驶向副驾驶连一条容量为1的边，跑出来的最大流就是答案。</p><h2 id=\"太空飞行计划\"><a class=\"markdownIt-Anchor\" href=\"#太空飞行计划\"></a> 太空飞行计划</h2><p>​\t题解：<strong>网络最小割</strong></p><p>​\t不妨假设全部收益都得到，而不花费费用。新建源点S，汇点T。</p><p>​\t从S向每个实验连一条容量为收益的边，每个实验向器械连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span></span></span></span>的边，每个器械向 T连一条容量为购买费用的边。</p><p>​\t此时求最小割，如果在S集，说明这个实验做，如果在T集，说明这个实验不做。</p><p>​\t显然，容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span></span></span></span>的边不能被割去，所以如果在S集，必须满足右边全部的实验器材都买了。那么S-最小割就是答案。（最小割=最大流，证明见算导或相关论文）</p><h2 id=\"最小路径覆盖\"><a class=\"markdownIt-Anchor\" href=\"#最小路径覆盖\"></a> 最小路径覆盖</h2><p>​\t题解：<strong>网络最大流</strong></p><p>​\t新建源点S，汇点T。</p><p>​\t我们把每个点拆成两个点<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>i</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">i_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.80952em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>i</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">i_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.80952em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span>，对于边<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo>−</mo><mo>&gt;</mo><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">i-&gt;j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.74285em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span></span></span></span>，连一条<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>i</mi><mn>1</mn></msub><mo>−</mo><mo>&gt;</mo><msub><mi>j</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">i_1-&gt;j_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.80952em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.05724em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span>,容量为1的边，对于每个点，连<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05764em\">S</span></span></span></span>到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>i</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">i_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.80952em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span>容量为1的边，连<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>i</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">i_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.80952em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span>到T容量为1的边。</p><p>​\t此时求最大流，如果流过一条<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>i</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">i_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.80952em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span>到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>j</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">j_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.05724em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span>的边，说明可以把以<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span>结尾的点和以<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span></span></span></span>开头的两条路径合并起来，变成一条路径。而答案要最小路径覆盖，也就是总点数-合并的次数（最大流）。</p><p>​\t因为是DAG，所以不会出现环。</p><h2 id=\"魔术球问题\"><a class=\"markdownIt-Anchor\" href=\"#魔术球问题\"></a> 魔术球问题</h2><p>​\t题解：<strong>网络最大流</strong></p><p>​\t如果我们已知答案<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mi>n</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">Ans</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span></span></span></span>，要判断放1~Ans最少要几根柱子，我们可以这么做：</p><p>​\t对于每个数字<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span>，如果存在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span></span></span></span>，满足<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi><mo>&gt;</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">j&gt;i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span>，并且<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo>+</mo><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">i+j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.74285em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span></span></span></span>是完全平方数，那么从<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span>到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span></span></span></span>连一条边，连完之后显然这是一个DAG，求出最小路径覆盖就是需要的柱子（做法同最小路径覆盖）</p><p>​\t那么这时候我们可以二分答案然后判定，但是基于残量网络的优秀性质，我们可以直接枚举答案，对于一个新节点，重新加入相关边，并在残量网络上跑最大流。到枚举到第一个不可行的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mi>n</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">Ans</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span></span></span></span>，答案就是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mi>n</mi><mi>s</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">Ans-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.76666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span></p><p>​\t输出方案的时候删掉最后两个点，重新跑最大流（或者删除相关容量）。</p><h2 id=\"圆桌聚餐\"><a class=\"markdownIt-Anchor\" href=\"#圆桌聚餐\"></a> 圆桌聚餐</h2><p>​\t题解：<strong>网络最大流</strong></p><p>​\t新建源点S，汇点T。</p><p>​\t从S到每个单位容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>r</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">r_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.58056em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.02778em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span>的边，从圆桌向T连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">C_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.83333em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.07153em\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.07153em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span>的边，每个单位向每个圆桌连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span>的边。</p><p>​\t跑最大流后看哪些边被流过即可。</p><h2 id=\"最长递增子序列\"><a class=\"markdownIt-Anchor\" href=\"#最长递增子序列\"></a> 最长递增子序列</h2><p>​\t题解：<strong>网络最大流</strong></p><p>​\t注意题目是非严格递增QAQ。</p><p>​\t第一问是经典的DP（可以用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>做法水），此时得到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span></span></span></span>数组<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>表示<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span>结尾的最长</p><p>​\t第二问可以把每个点拆点，限制流量不超过1（从入点到出点容量为1的边），从S向<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>为1的入点容量为1的边，从<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">ans</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span></span></span></span>的出点边向T连一条容量为1的边。</p><p>​\t对于可以转移的，并且<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn><mo>=</mo><mi>f</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">(</mo><mi>i</mi><mo>&lt;</mo><mi>j</mi><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>&lt;</mo><mo>=</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f[i]+1=f[j](i&lt;j,a[i]&lt;=a[j])</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span></span></span></span>，从i的出点向j的入点一条容量为1的边，然后跑网络最大流即可。</p><p>​\t对于第三问，只需要把1和n的容量限制加上<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span></span></span></span>即可。此时再跑网络最大流即可。</p><h2 id=\"试题库\"><a class=\"markdownIt-Anchor\" href=\"#试题库\"></a> 试题库</h2><p>​\t题解：<strong>网路最大流</strong></p><p>​\t新建源点S，汇点T。</p><p>​\t试题向类型建容量为1 的边，源点S向试题连容量为1的边，类型向汇点T连容量为需要题数的边，跑网络最大流看是否满流。</p><p>​\t输出方案看哪些试题向类型的边被流过。</p><h2 id=\"方格取数\"><a class=\"markdownIt-Anchor\" href=\"#方格取数\"></a> 方格取数</h2><p>​\t题解：<strong>网络最小割</strong></p><p>​\t首先对网格进行黑白染色。</p><p>​\t然后假设得到了所有答案。</p><p>​\t新建源点S，汇点T，从S向所有白色格子连一条容量为其值的边，所有黑色格子向T连一条容量为其值的边，所有白色格子向其相邻的黑色格子连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span></span></span></span>的边，容易发现此时求最小割即最少减少的答案——如果要选一个白色格子，必须保证其相邻的黑色格子不选（割掉），选黑色格子同理。</p><h2 id=\"餐巾计划\"><a class=\"markdownIt-Anchor\" href=\"#餐巾计划\"></a> 餐巾计划</h2><p>​\t题解：<strong>有上下界的最小费用流</strong></p><p>​\t把每天拆点，定义为入点和出点。</p><p>​\t从入点到出点连一条上下界容量都为当天需要毛巾，费用为0的边，表示这天使用了这么多毛巾。</p><p>​\t从S向所有入点连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span></span></span></span>，费用为购买新毛巾的价格，表示每天都可以新购入毛巾。——此处建图也可以全部第一天买。</p><p>​\t从每天的入点向下一天（如果有）的入点连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span></span></span></span>，费用为0的边，表示前一天没用过的下一天还能用。</p><p>​\t从每天的出点向慢洗后那天的入点连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span></span></span></span>，费用为慢洗的价格的边。</p><p>​\t从每天的出点向快洗后那天的入点连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span></span></span></span>，费用为快洗的价格的边。</p><p>​\t从每一天的出点向T连一条边，表示用过了扔了。</p><p>​\t此时跑上下界最小费用最大流即可。（显然有解）</p><h2 id=\"软件补丁\"><a class=\"markdownIt-Anchor\" href=\"#软件补丁\"></a> 软件补丁</h2><p>​\t题解：<strong>状态压缩,最短路</strong></p><p>​\t把拥有bug压缩成一个二进制状态，依次判断m条可否转移（可以不显示建图）。类似于最短路做法，时间复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(2^nm)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.664392em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span></span></span></span></p><h2 id=\"数字梯形\"><a class=\"markdownIt-Anchor\" href=\"#数字梯形\"></a> 数字梯形</h2><p>​\t题解：<strong>最大费用最大流</strong></p><p>​\tPS：这是一个等腰梯形</p><p>​\t对于第一问。</p><p>​\t对每个点拆点，中间连一条容量为1，费用为其值的边（实现可以用其值的相反数）</p><p>​\t从源点S向第一层的每一个点连一条容量为1，费用为0的边。</p><p>​\t对于每个点的出点，向它左下角和右下角的点的入点连一条容量为1，费用为0的边。</p><p>​\t从最后一层的出点向T点连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span></span></span></span>，费用为0的边。</p><p>​\t此时求最大费用最大流，即为所要结果</p><p>​\t对于第二问，在第一问基础上只需要将每个点拆开的中间容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span></span></span></span>即可。</p><p>​\t对于第三问，在第二问基础上只需要将到左下角，右下角的边的容量改成(增加)<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span></span></span></span>即可。</p><h2 id=\"运输问题\"><a class=\"markdownIt-Anchor\" href=\"#运输问题\"></a> 运输问题</h2><p>​\t题解：<strong>最小费用最大流,最大费用最大流</strong></p><p>​\t新建源点S，汇点T。</p><p>​\t从源点S到所有仓库一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.58056em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span>费用为0的边，从所有商店到汇点容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>b</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">b_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.980548em;vertical-align:-.286108em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span></span></span></span>费用为0的边。从每个仓库到每个商店连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span></span></span></span>,费用为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>c</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">c[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>的边，跑最小费用最大流和最大费用最大流（只需要把边取反，再答案取反即可）</p><h2 id=\"分配问题\"><a class=\"markdownIt-Anchor\" href=\"#分配问题\"></a> 分配问题</h2><p>​\t题解：<strong>最小费用最大流,最大费用最大流</strong></p><p>​\t新建源点S，汇点T。</p><p>​\t从源点S到所有仓库一条容量为1费用为0的边，从所有商店到汇点容量为1费用为0的边。从第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span>个仓库到第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span></span></span></span>个商店连一条容量为1,费用为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>c</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">c[i][j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span></span></span></span>的边，跑最小费用最大流和最大费用最大流（只需要把边取反，再答案取反即可）</p><h2 id=\"负载平衡\"><a class=\"markdownIt-Anchor\" href=\"#负载平衡\"></a> 负载平衡</h2><p>​\t题解：<strong>最小费用最大流</strong></p><p>​\t将每个数都减去平均数，得到A数组。</p><p>​\t对于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">A[i]&gt;0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">0</span></span></span></span>的，从S向<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span>连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>的边，否则从<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span>向T连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">-A[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">−</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>的边</p><p>​\t每个点向相邻的两个点（注意是环）连容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span></span></span></span>，费用为1的边。</p><p>​\t跑最小费用最大流即是答案。</p><h2 id=\"最长-k-可重区间集\"><a class=\"markdownIt-Anchor\" href=\"#最长-k-可重区间集\"></a> 最长 k 可重区间集</h2><p>​\t题解：<strong>最大费用最大流</strong></p><p>​\t首先离散化。</p><p>​\t定义<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>w</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">w[i] = r[i]-l[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02691em\">w</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>表示选择这条线段的收益。</p><p>​\t对于每个点，从<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span>到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.74285em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span>连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span></span></span></span>，费用为0的边。</p><p>​\t从S向第一个点连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07153em\">K</span></span></span></span>，费用为0的边。</p><p>​\t从最后一个点向T连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07153em\">K</span></span></span></span>，费用为0的边。</p><p>​\t对于每条线段，从<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">l[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">r[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>连一条容量为1，费用为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>w</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">w[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02691em\">w</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>的边。</p><p>​\t此时跑S到T的最大费用最大流就是答案。</p><p>​\t每条增广路是单向的，会经过若干线段到达T，每个点最多只经过K次。</p><h2 id=\"最长k可重线段集问题\"><a class=\"markdownIt-Anchor\" href=\"#最长k可重线段集问题\"></a> 最长k可重线段集问题</h2><p>​\t题解：<strong>最大费用最大流</strong></p><p>​\t做法同上，定义<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>w</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>d</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mi>e</mi><mi>g</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">w[i] = dist(Segment)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02691em\">w</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.05764em\">S</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span>，注意是开线段。</p><p>​\t由于可能有和y轴平行的线段，作一下处理：</p><p>​\t对于每个<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">l[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">r[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>都乘上2。</p><p>​\t如果<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">l[i]=r[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>，那么<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">l[i]-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span>，否则<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">l[i]+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span></p><p>​\t注意到这样的话不会对其它线段造成影响，而且这个点也最多K次。</p><h2 id=\"星际转移\"><a class=\"markdownIt-Anchor\" href=\"#星际转移\"></a> 星际转移</h2><p>​\t题解：<strong>网络最大流</strong></p><p>​\t枚举答案，对于小于等于答案的每个时刻，建立那个时候的地球，各空间站，月球这些点。</p><p>​\t从S向0时刻的地球连一条容量为k的边。</p><p>​\t从上一个时刻的点向这个时刻连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span></span></span></span>的边，表示可以滞留。</p><p>​\t从上一个时刻太空船所在位置的点向这个时刻太空船所在位置的点连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>H</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">H[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.08125em\">H</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>的边表示可以转移。</p><p>​\t从每个时刻的月球向T连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span></span></span></span>的边，表示登月就结束。</p><p>​\t如果满流，说明答案可行，输出。</p><p>​\t如果(k+2)*(n+2)次后还不行说明不可行（或者用并查集单独判断是否联通）</p><h2 id=\"孤岛营救问题\"><a class=\"markdownIt-Anchor\" href=\"#孤岛营救问题\"></a> 孤岛营救问题</h2><p>​\t题解：<strong>状态压缩,最短路</strong></p><p>​\t注意钥匙🔑数量<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>&lt;</mo><mo>=</mo><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">&lt;=10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.5782em;vertical-align:-.0391em\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span>所以用一个二进制表示有哪些钥匙，然后跑分层图BFS得到最短路即可。</p><h2 id=\"航空路线问题\"><a class=\"markdownIt-Anchor\" href=\"#航空路线问题\"></a> 航空路线问题</h2><p>​\t题解：<strong>最大费用最大流</strong></p><p>​\t把每个城市拆点，1号节点和n号节点之间入点和出点连容量为2，费用为1的边，其它节点连容量为1费用为1的边。对于可以到达的，从出点到入点连容量为1（如果是1号点到n号点，连容量为2），费用为0的边。</p><p>​\t从1号点的入点到n号点的出点跑最大费用最大流，其实就是跑出两条路径。</p><p>​\t输出方案可以顺着哪些被流过的边，正着倒着做一下。</p><h2 id=\"汽车加油行驶问题\"><a class=\"markdownIt-Anchor\" href=\"#汽车加油行驶问题\"></a> 汽车加油行驶问题</h2><p>​\t题解：<strong>最短路</strong></p><p>​\t注意到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi><mo>&lt;</mo><mo>=</mo><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">k&lt;=10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.73354em;vertical-align:-.0391em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span>，我们定义一个节点<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo separator=\"true\">,</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(i,j,k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">)</span></span></span></span>表示在位置<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(i,j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">)</span></span></span></span>，其剩余油量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span></span></span></span>，那么从一个点向周围的点，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x,y,k-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>连边。</p><p>​\t如果到达的哪个点是加油站，那么应该是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">满</mi><mi mathvariant=\"normal\">油</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(i,j,满油)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord cjk_fallback\">满</span><span class=\"mord cjk_fallback\">油</span><span class=\"mclose\">)</span></span></span></span>连边。</p><p>​\t此时求<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">满</mi><mi mathvariant=\"normal\">油</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1,1,满油)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord cjk_fallback\">满</span><span class=\"mord cjk_fallback\">油</span><span class=\"mclose\">)</span></span></span></span>到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>n</mi><mo separator=\"true\">,</mo><mn>0</mn><mtext> </mtext><mi mathvariant=\"normal\">满</mi><mi mathvariant=\"normal\">油</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(n,n,0~满油)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">0</span><span class=\"mspace nobreak\"> </span><span class=\"mord cjk_fallback\">满</span><span class=\"mord cjk_fallback\">油</span><span class=\"mclose\">)</span></span></span></span>的最短路即可。</p><h2 id=\"深海机器人问题\"><a class=\"markdownIt-Anchor\" href=\"#深海机器人问题\"></a> 深海机器人问题</h2><p>​\t题解：<strong>最大费用最大流</strong></p><p>​\t新建源点S，汇点T，每个点向右边，下面的点连2条边，第一条容量为1，费用为价值，第二条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span></span></span></span>，费用为0，S到可以进入点容量为1，费用为0，可出去到T一条容量为1，费用为0的边，跑S到T的最大费用最大流即可。</p><h2 id=\"火星探险问题\"><a class=\"markdownIt-Anchor\" href=\"#火星探险问题\"></a> 火星探险问题</h2><p>​\t题解：<strong>最大费用最大流</strong></p><p>​\t每个点拆点，中间的边同上题，相邻的出点到入点，S到(1,1,入)一条容量为car，费用为0的边，最后一个点的出点到T容量为car，费用为0的边，求最大费用最大流。输出方案的时候只需要DFS一下，做完一条把流量返还即可。</p><h2 id=\"骑士共存问题\"><a class=\"markdownIt-Anchor\" href=\"#骑士共存问题\"></a> 骑士共存问题</h2><p>​\t题解：<strong>网络最小割</strong></p><p>​\t首先黑白染色，然后类似与方格染色建图，也就是先假设全部都选，然后减去最小割就是答案。</p><h1 id=\"模板\"><a class=\"markdownIt-Anchor\" href=\"#模板\"></a> 模板</h1><h2 id=\"头文件\"><a class=\"markdownIt-Anchor\" href=\"#头文件\"></a> 头文件</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Hello Wolrd</span></span><br><span class=\"line\"><span class=\"comment\">//There is Special Pig Jiong in the world. </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x3f3f3f3f</span>,oo = inf;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RG register</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> __wzp[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">15</span>|<span class=\"number\">1</span>],*__S=__wzp+<span class=\"number\">32768</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc() (__S&gt;=__wzp+32768?(__wzp[fread(__wzp,sizeof(char),1&lt;&lt;15,stdin)]=EOF),*((__S=__wzp)++):*(__S++))</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RG ll x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;RG <span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ll x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)x=-x,pc(<span class=\"string\">'-'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">10</span>)<span class=\"built_in\">write</span>(x/<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rd read</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mp make_pair</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sqr(x) ((x)*(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(RG int i=(a);i&lt;(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fin(x) &#123;freopen(#x<span class=\"meta-string\">\".in\"</span>,<span class=\"meta-string\">\"r\"</span>,stdin);&#125;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y1 ________y1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = ;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> M = ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOCAL </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> LOCAL</span></span><br><span class=\"line\">    fin(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"dinic模板\"><a class=\"markdownIt-Anchor\" href=\"#dinic模板\"></a> Dinic模板</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//配合T模板使用 </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N ????</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M ????</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,nxt,cap;</span><br><span class=\"line\">    Edge()&#123;&#125;</span><br><span class=\"line\">    Edge(<span class=\"keyword\">int</span> to,<span class=\"keyword\">int</span> nxt,<span class=\"keyword\">int</span> cap):to(to),nxt(nxt),cap(cap)&#123;&#125;;</span><br><span class=\"line\">&#125;edge[M*<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> first[N],cur[N],nume;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    edge[nume] = Edge(b,first[a],c);first[a] = nume++;</span><br><span class=\"line\">    edge[nume] = Edge(a,first[b],<span class=\"number\">0</span>);first[b] = nume++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> q[N],dis[N],S,T;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u,v,front,rear;mem(dis,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(front=rear=<span class=\"number\">0</span>,dis[u=q[rear++]=T]=<span class=\"number\">1</span>;front&lt;rear;)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u=q[front++],e=first[u];~e;e=edge[e].nxt)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(edge[e^<span class=\"number\">1</span>].cap &amp;&amp; !~dis[v=edge[e].to])dis[q[rear++]=v]=dis[u]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dis[S]!=<span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> flow)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u==T)<span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> used = <span class=\"number\">0</span>,d,v;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> &amp;e=cur[u];~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(edge[e].cap &amp;&amp; dis[v=edge[e].to]==dis[u]<span class=\"number\">-1</span> &amp;&amp; (d = dfs(v,<span class=\"built_in\">min</span>(flow-used,edge[e].cap))))</span><br><span class=\"line\">            edge[e].cap -= d,edge[e^<span class=\"number\">1</span>].cap += d,used += d;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(used == flow) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!used)dis[u]=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> used;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dinic</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;bfs();ans+=dfs(S,inf))</span><br><span class=\"line\">        rep(i,<span class=\"number\">0</span>,N) cur[i] = first[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    S = ???,T = ???;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"spfa费用流模板\"><a class=\"markdownIt-Anchor\" href=\"#spfa费用流模板\"></a> SPFA费用流模板</h2><p>PS：最小费用最大流</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//配合T模板使用 </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1005 </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 20005 </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> S,T;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,nxt,cap,cost;</span><br><span class=\"line\">    Edge()&#123;&#125;</span><br><span class=\"line\">    Edge(<span class=\"keyword\">int</span> to,<span class=\"keyword\">int</span> nxt,<span class=\"keyword\">int</span> cap,<span class=\"keyword\">int</span> cost):to(to),nxt(nxt),cap(cap),cost(cost)&#123;&#125;</span><br><span class=\"line\">&#125;edge[<span class=\"number\">2</span>*M];</span><br><span class=\"line\"><span class=\"keyword\">int</span> first[N],nume,n,m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> cap,<span class=\"keyword\">int</span> cost)</span></span>&#123;</span><br><span class=\"line\">    edge[nume] = Edge(b,first[a],cap,cost);first[a] = nume++;</span><br><span class=\"line\">    edge[nume] = Edge(a,first[b],<span class=\"number\">0</span>,-cost);first[b] = nume++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[N],vis[N],pre[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">spfa</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    mem(dis,<span class=\"number\">0x3f</span>);</span><br><span class=\"line\">    mem(vis,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    mem(pre,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    dis[S]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    vis[S]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    q.push(S);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q.front();q.pop();</span><br><span class=\"line\">        vis[u] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e=first[u];~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = edge[e].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(edge[e].cap&amp;&amp;dis[v]&gt;dis[u]+edge[e].cost)&#123;</span><br><span class=\"line\">                dis[v]=dis[u]+edge[e].cost;</span><br><span class=\"line\">                pre[v] = e;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!vis[v])&#123;</span><br><span class=\"line\">                    q.push(v);</span><br><span class=\"line\">                    vis[v]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dis[T]!=inf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mcmf</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> minflow,maxflow=<span class=\"number\">0</span>,mincost=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(spfa())&#123;</span><br><span class=\"line\">        minflow = inf;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=pre[T];~i;i=pre[edge[i^<span class=\"number\">1</span>].to])</span><br><span class=\"line\">            minflow = <span class=\"built_in\">min</span>(minflow,edge[i].cap);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=pre[T];~i;i=pre[edge[i^<span class=\"number\">1</span>].to])</span><br><span class=\"line\">            edge[i].cap -= minflow,</span><br><span class=\"line\">            edge[i^<span class=\"number\">1</span>].cap += minflow;</span><br><span class=\"line\">        mincost += minflow * dis[T];</span><br><span class=\"line\">        maxflow += minflow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mincost;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    S = ??,T = ??;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"部分代码的部分\"><a class=\"markdownIt-Anchor\" href=\"#部分代码的部分\"></a> 部分代码的部分</h1><p>出于<s>懒惰</s>给大家独立思考的目的，上面很多不详细，这里贴部分代码。</p><p>但是又出于<s>懒惰</s>美观，只帖部分代码的部分。</p><p>缺少部分一般为变量定义（自己写吧）和最大流（最小割)，或者最小（大）费用最大流，这个往上面看吧。</p><h2 id=\"骑士共存问题-2\"><a class=\"markdownIt-Anchor\" href=\"#骑士共存问题-2\"></a> 骑士共存问题</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> encode(a,b) ((a) * (n) + (b) + (1))</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,ans,A[<span class=\"number\">205</span>][<span class=\"number\">205</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dx[<span class=\"number\">8</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dy[<span class=\"number\">8</span>]=&#123;<span class=\"number\">2</span>,<span class=\"number\">-2</span>,<span class=\"number\">2</span>,<span class=\"number\">-2</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    S = <span class=\"number\">0</span>,T = n*n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>(),m = rd();</span><br><span class=\"line\">    ans = n*n-m;</span><br><span class=\"line\">    mem(A,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    rep(i,<span class=\"number\">0</span>,m)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = rd(),y = rd();</span><br><span class=\"line\">        A[x<span class=\"number\">-1</span>][y<span class=\"number\">-1</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    rep(i,<span class=\"number\">0</span>,n)rep(j,<span class=\"number\">0</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[i][j]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((i+j)&amp;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            Addedge(S,encode(i,j),<span class=\"number\">1</span>);</span><br><span class=\"line\">            rep(d,<span class=\"number\">0</span>,<span class=\"number\">8</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x = i + dx[d],y = j + dy[d];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>||y&lt;<span class=\"number\">0</span>||x&gt;=n||y&gt;=n||A[x][y]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                Addedge(encode(i,j),encode(x,y),inf);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            Addedge(encode(i,j),T,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans-dinic());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"火星探险问题-2\"><a class=\"markdownIt-Anchor\" href=\"#火星探险问题-2\"></a> 火星探险问题</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> P,Q,<span class=\"built_in\">turn</span>[<span class=\"number\">233</span>];</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> encode(a,b) ((a) * (Q) + (b) + 1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==P<span class=\"number\">-1</span>&amp;&amp;y==Q<span class=\"number\">-1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a=encode(x,y)*<span class=\"number\">2</span>,b=encode(x+<span class=\"number\">1</span>,y)*<span class=\"number\">2</span><span class=\"number\">-1</span>,c=encode(x,y+<span class=\"number\">1</span>)*<span class=\"number\">2</span><span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==P<span class=\"number\">-1</span>)b=<span class=\"number\">-1</span>;<span class=\"keyword\">if</span>(y==Q<span class=\"number\">-1</span>)c=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e=first[a];~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(e&amp;<span class=\"number\">1</span>)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = edge[e].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[e] &gt;= edge[e^<span class=\"number\">1</span>].cap) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v==b)&#123;</span><br><span class=\"line\">            ++vis[e];</span><br><span class=\"line\">            <span class=\"built_in\">turn</span>[++*<span class=\"built_in\">turn</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            dfs(x+<span class=\"number\">1</span>,y);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v==c)&#123;</span><br><span class=\"line\">            ++vis[e];</span><br><span class=\"line\">            <span class=\"built_in\">turn</span>[++*<span class=\"built_in\">turn</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            dfs(x,y+<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> car = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    Q = <span class=\"built_in\">read</span>(),P = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    S = <span class=\"number\">0</span>,T = P*Q*<span class=\"number\">2</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Addedge(S,<span class=\"number\">1</span>,car,<span class=\"number\">0</span>);</span><br><span class=\"line\">    Addedge(encode(P<span class=\"number\">-1</span>,Q<span class=\"number\">-1</span>)*<span class=\"number\">2</span>,T,car,<span class=\"number\">0</span>);</span><br><span class=\"line\">    rep(i,<span class=\"number\">0</span>,P)rep(j,<span class=\"number\">0</span>,Q)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>) Addedge(encode(i,j)*<span class=\"number\">2</span><span class=\"number\">-1</span>,encode(i,j)*<span class=\"number\">2</span>,inf,<span class=\"number\">0</span>); <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==<span class=\"number\">2</span>) Addedge(encode(i,j)*<span class=\"number\">2</span><span class=\"number\">-1</span>,encode(i,j)*<span class=\"number\">2</span>,inf,<span class=\"number\">0</span>),</span><br><span class=\"line\">                 Addedge(encode(i,j)*<span class=\"number\">2</span><span class=\"number\">-1</span>,encode(i,j)*<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i!=P<span class=\"number\">-1</span>)Addedge(encode(i,j)*<span class=\"number\">2</span>,encode(i+<span class=\"number\">1</span>,j)*<span class=\"number\">2</span><span class=\"number\">-1</span>,inf,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j!=Q<span class=\"number\">-1</span>)Addedge(encode(i,j)*<span class=\"number\">2</span>,encode(i,j+<span class=\"number\">1</span>)*<span class=\"number\">2</span><span class=\"number\">-1</span>,inf,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mcmf();</span><br><span class=\"line\">    mem(vis,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=car;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">turn</span>[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        dfs(<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=<span class=\"built_in\">turn</span>[<span class=\"number\">0</span>];j++)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>,i,<span class=\"built_in\">turn</span>[j]);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"深海机器人问题-2\"><a class=\"markdownIt-Anchor\" href=\"#深海机器人问题-2\"></a> 深海机器人问题</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> pos[<span class=\"number\">233</span>][<span class=\"number\">233</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> A=rd(),B=rd(),p=rd(),q=rd();</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    rep(i,<span class=\"number\">0</span>,p+<span class=\"number\">1</span>)rep(j,<span class=\"number\">0</span>,q+<span class=\"number\">1</span>)pos[i][j]=++tot;</span><br><span class=\"line\">    S=tot+<span class=\"number\">1</span>,T=S+<span class=\"number\">1</span>;</span><br><span class=\"line\">    rep(i,<span class=\"number\">0</span>,p+<span class=\"number\">1</span>)rep(j,<span class=\"number\">0</span>,q)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        Addedge(pos[i][j],pos[i][j+<span class=\"number\">1</span>],<span class=\"number\">1</span>,-x);</span><br><span class=\"line\">        Addedge(pos[i][j],pos[i][j+<span class=\"number\">1</span>],inf,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    rep(j,<span class=\"number\">0</span>,q+<span class=\"number\">1</span>)rep(i,<span class=\"number\">0</span>,p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">        Addedge(pos[i][j],pos[i+<span class=\"number\">1</span>][j],<span class=\"number\">1</span>,-x) ;</span><br><span class=\"line\">        Addedge(pos[i][j],pos[i+<span class=\"number\">1</span>][j],inf,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(A--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = rd(),x=rd(),y=rd();</span><br><span class=\"line\">        Addedge(S,pos[x][y],k,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(B--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = rd(),x=rd(),y=rd();</span><br><span class=\"line\">        Addedge(pos[x][y],T,k,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,-mcmf());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"数字梯形-2\"><a class=\"markdownIt-Anchor\" href=\"#数字梯形-2\"></a> 数字梯形</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    m = <span class=\"built_in\">read</span>(),n = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    S = tot++,T = tot++;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m+i<span class=\"number\">-1</span>;j++)&#123;</span><br><span class=\"line\">            id[i][j][<span class=\"number\">0</span>] = tot++;</span><br><span class=\"line\">            id[i][j][<span class=\"number\">1</span>] = tot++;</span><br><span class=\"line\">            Addedge(id[i][j][<span class=\"number\">0</span>],id[i][j][<span class=\"number\">1</span>],<span class=\"number\">1</span>,-<span class=\"built_in\">read</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m+i<span class=\"number\">-1</span>;j++)&#123;</span><br><span class=\"line\">            Addedge(id[i][j][<span class=\"number\">1</span>],id[i+<span class=\"number\">1</span>][j][<span class=\"number\">0</span>],<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">            Addedge(id[i][j][<span class=\"number\">1</span>],id[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>][<span class=\"number\">0</span>],<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)</span><br><span class=\"line\">        Addedge(S,id[<span class=\"number\">1</span>][i][<span class=\"number\">0</span>],<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n+m<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        Addedge(id[n][i][<span class=\"number\">1</span>],T,inf,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,-mcmf());</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nume;i+=<span class=\"number\">2</span>) edge[i].cap+=edge[i^<span class=\"number\">1</span>].cap,edge[i^<span class=\"number\">1</span>].cap=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m+i<span class=\"number\">-1</span>;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> e = pos[id[i][j][<span class=\"number\">0</span>]][id[i][j][<span class=\"number\">1</span>]];</span><br><span class=\"line\">            edge[e].cap = inf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,-mcmf());</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nume;i+=<span class=\"number\">2</span>) edge[i].cap+=edge[i^<span class=\"number\">1</span>].cap,edge[i^<span class=\"number\">1</span>].cap=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m+i<span class=\"number\">-1</span>;j++)&#123;</span><br><span class=\"line\">            edge[pos[id[i][j][<span class=\"number\">1</span>]][id[i+<span class=\"number\">1</span>][j][<span class=\"number\">0</span>]]].cap = inf;</span><br><span class=\"line\">            edge[pos[id[i][j][<span class=\"number\">1</span>]][id[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>][<span class=\"number\">0</span>]]].cap = inf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,-mcmf());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"最长k可重区间集\"><a class=\"markdownIt-Anchor\" href=\"#最长k可重区间集\"></a> 最长K可重区间集</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> l[N],y[N*<span class=\"number\">2</span>],r[N],w[N],K;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>(),K = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        l[i] = <span class=\"built_in\">read</span>(),r[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l[i]&gt;=r[i])swap(l[i],r[i]);</span><br><span class=\"line\">        w[i] = r[i]-l[i];</span><br><span class=\"line\">        y[++*y] = l[i],y[++*y] = r[i];</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    sort(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y);</span><br><span class=\"line\">    *y = unique(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y) - y - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        l[i] = lower_bound(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y,l[i]) - y;</span><br><span class=\"line\">        r[i] = lower_bound(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y,r[i]) - y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    S = <span class=\"number\">0</span>,T = <span class=\"number\">2</span>**y + <span class=\"number\">1</span>;</span><br><span class=\"line\">    Addedge(S,<span class=\"number\">1</span>,K,<span class=\"number\">0</span>);</span><br><span class=\"line\">    Addedge(<span class=\"number\">2</span>**y,T,K,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">2</span>**y;i++) Addedge(i,i+<span class=\"number\">1</span>,inf,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) Addedge(l[i],r[i],<span class=\"number\">1</span>,-w[i]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,-mcmf());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"航空路线问题-2\"><a class=\"markdownIt-Anchor\" href=\"#航空路线问题-2\"></a> 航空路线问题</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>,<span class=\"keyword\">int</span>&gt; id;</span><br><span class=\"line\"><span class=\"built_in\">string</span> name[<span class=\"number\">205</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>();m = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> str;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; str;</span><br><span class=\"line\">        id[str] = i;</span><br><span class=\"line\">        name[i] = str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    S = <span class=\"number\">1</span>;T = n*<span class=\"number\">2</span>;</span><br><span class=\"line\">    Addedge(<span class=\"number\">1</span>,<span class=\"number\">1</span>+n,<span class=\"number\">2</span>,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        Addedge(i,i+n,<span class=\"number\">1</span>,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Addedge(n,n+n,<span class=\"number\">2</span>,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> str;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; str;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = id[str];</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; str;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = id[str];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&gt;y) swap(x,y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>&amp;&amp;y==n)Addedge(x+n,y,<span class=\"number\">2</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> Addedge(x+n,y,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = mcmf(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ans == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">\"No Solution!\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans<span class=\"number\">-2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; name[<span class=\"number\">1</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    mem(vis,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e=first[n+<span class=\"number\">1</span>],j,k;~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!edge[e].cap&amp;&amp;!(e&amp;<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">            k = edge[e].to;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(k)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; name[k] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">                vis[k] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(j=first[k+n],k=<span class=\"number\">0</span>;~j;j=edge[j].nxt)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(!edge[j].cap&amp;&amp;!(j&amp;<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                        k = edge[j].to;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e=first[n],j,k;~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!edge[e^<span class=\"number\">1</span>].cap&amp;&amp;(e&amp;<span class=\"number\">1</span>)&amp;&amp;!vis[edge[e].to-n])&#123;</span><br><span class=\"line\">            k = edge[e].to-n;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(k)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; name[k] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">                vis[k] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(j=first[k],k=<span class=\"number\">0</span>;~j;j=edge[j].nxt)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(!edge[j^<span class=\"number\">1</span>].cap&amp;&amp;(j&amp;<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                        k = edge[j].to - n;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"餐巾计划-2\"><a class=\"markdownIt-Anchor\" href=\"#餐巾计划-2\"></a> 餐巾计划</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n,_P,_M,_F,_N,_S;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>(),_P = <span class=\"built_in\">read</span>(),_M = <span class=\"built_in\">read</span>(),_F = <span class=\"built_in\">read</span>(),_N = <span class=\"built_in\">read</span>(),_S = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    S = <span class=\"number\">2</span>*n+<span class=\"number\">1</span>,T=S+<span class=\"number\">1</span>,SS=T+<span class=\"number\">1</span>,TT=SS+<span class=\"number\">1</span>;</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        Addedge(i+n,TT,inf,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        Addedge(i,i+n,inf-x,<span class=\"number\">0</span>);</span><br><span class=\"line\">        Addedge(i,T,x,<span class=\"number\">0</span>);</span><br><span class=\"line\">        Addedge(S,i+n,x,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        Addedge(SS,i,inf,_P);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i!=n) Addedge(i,i+<span class=\"number\">1</span>,inf,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i+_M&lt;=n) Addedge(i+n,i+_M,inf,_F);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i+_N&lt;=n) Addedge(i+n,i+_N,inf,_S);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Addedge(TT,SS,inf,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,mcmf());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    solve();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"hihoCoder1252 Kejin Game","_content":"\n#### 题意\n\n​\t有一颗技能树，每个技能有一些“先修技能”，必须把这些“先修技能”全部点完才能学习这个技能，这个技能树是个DAG。由于是个氪金游戏，点某个技能需要一些花费，作为rmb玩家，可以把技能树的某条边去掉，也就是说某个技能少了一个先修技能，当然这也需要花费。还可以直接花费金钱学习某个技能而无视其先修技能。 \n问：在初始什么技能都没有的情况下，要点某个给定的技能需要多少钱？\n\n<!--more-->\n\n#### 题解\n\n​\t用最小割的思想来做。\n\n​\t考虑重新构图，把每个点拆成两个点$i$和$i'$，对于直接学习某个技能，我们在$i$到$i'$之间连一条容量为其花费的边。这样只要割去这条边，左边和右边直接断开。\n\n​\t我们从源点S向每个点连一条容量为普通学习费用的边。\n\n​\t并且我们对于原来的一条边(u->v)，我们从$u'$连到$v$这样一条容量为消灭这条边的费用的边。\n\n​\t最后我们从要求的$s'$向T连一条$inf$的边。\n\n​\t注意到这里的每一条割都意味着一种学习方法。\n\n​\t由于没有从S直接连到$i'$的边，意味着到$i'$，也就是修i的技能，只有前面都断了，那么前面断了可以是这个点直接学习，也可以是之前的边满足都割去，然后再割去S到$i$的普通学习的边。\n\n​\t那么只要求最小割（最大流），就可以得到花费最小的学习方法了。\n\n```c++\n//Hello Wolrd\n//There is Special Pig Jiong in the world.\n#include<cstdio>\n#include<cstring> \n#include<cstdlib> \n#include<cctype>\n#include<algorithm>\n#include<bitset> \n#include<vector> \n#include<set> \n#include<map> \n#include<ctime> \nusing namespace std;\ntypedef unsigned long long ull;\ntypedef long long ll;\ntypedef pair<int,int> pii;\n#define pc putchar\n#define RG register\nchar __wzp[1<<15|1],*__S=__wzp+32768;\n#ifdef LOCAL \n\t#define gc() getchar()\n#else\n\t#define gc() (__S>=__wzp+32768?(__wzp[fread(__wzp,sizeof(char),1<<15,stdin)]=EOF),*((__S=__wzp)++):*(__S++))\n#endif\ninline ll read(){\n\tRG ll x=0,f=1;RG char c=gc();\n\tfor(;!isdigit(c);c=gc())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n\treturn x*f;\n}\nconst int oo = 0x3f3f3f3f,inf = oo;\n#define mem(x,v) memset(x,v,sizeof(x))\n#define pb push_back\n#define mp make_pair\n#define wait system(\"pause\")\n#define rep(i,a,b) for(RG int i=(a);i<(b);++i)\n#define file(x) {freopen(#x\".in\",\"r\",stdin);freopen(#x\".out\",\"w\",stdout);}\n#define writeln(x) printf(\"%d\\n\",x);\n#define N 505*2+233\n#define M 100990 + N * 2 + 1\n#define S 0\n#define T n+n+1\nstruct Edge{\n\tint to,nxt,cap;\n\tEdge(){}\n\tEdge(int to,int nxt,int cap):to(to),nxt(nxt),cap(cap){}\n}edge[M*2];\nint first[N],nume,cur[N];\nvoid Addedge(int a,int b,int c){\n\tedge[nume] = Edge(b,first[a],c);first[a] = nume++;\n\tedge[nume] = Edge(a,first[b],0);first[b] = nume++;\n}\nint q[N],dis[N],n;\nbool bfs(){\n\tint v,front,rear;mem(dis,-1);\n\tfor(front=rear=0,dis[q[rear++]=T]=1;front<rear;)\n\t\tfor (int u=q[front++],e=first[u];~e;e=edge[e].nxt)\n\t\t\tif(edge[e^1].cap && !~dis[v=edge[e].to])dis[q[rear++]=v]=dis[u]+1;\n\treturn dis[S]!=-1;\n}\n\nint dfs(int u,int flow){\n\tif(u==T)return flow;\n\tint used = 0,d,v;\n\tfor (int &e=cur[u];~e;e=edge[e].nxt){\n\t\tif(edge[e].cap && dis[v=edge[e].to]==dis[u]-1 && (d = dfs(v,min(flow-used,edge[e].cap))))\n\t\t\tedge[e].cap -= d,edge[e^1].cap += d,used += d;\n\t\tif(used == flow) break;\n\t}\n\tif(!used)dis[u]=-1;\n\treturn used;\n}\n\nint dinic(){\n\tint ans = 0;\n\tfor(;bfs();ans+=dfs(S,inf))\n\t\trep(i,S,T+1) cur[i] = first[i];\n\treturn ans;\n}\n\nint m,s;\nint main(){\n\tint kase = read();\n\twhile(kase--){\n\t\tmem(first,-1);nume = 0;\n\t\tn = read(),m = read(),s = read();\n\t\twhile(m--){\n\t\t\tint a = read(),b = read(),c = read();\n\t\t\tAddedge(a+n,b,c);//氪一条边 \n\t\t}\n\t\tfor (int i=1;i<=n;i++){\n\t\t\tint x = read();\n\t\t\tAddedge(S,i,x);\n\t\t}\n\t\tfor (int i=1;i<=n;i++){\n\t\t\tint x = read();\n\t\t\tAddedge(i,n+i,x);\n\t\t}\n\t\tAddedge(s+n,T,inf);\n\t\tprintf(\"%d\\n\",dinic());\n\t}\n\treturn 0;\n}\n```\n\n","source":"_posts/hihoCoder1252 Kejin Game/hihoCoder1252 Kejin Game.md","raw":"---\ntitle: hihoCoder1252 Kejin Game\ntags: \n - hihoCoder\n - 网络流\n---\n\n#### 题意\n\n​\t有一颗技能树，每个技能有一些“先修技能”，必须把这些“先修技能”全部点完才能学习这个技能，这个技能树是个DAG。由于是个氪金游戏，点某个技能需要一些花费，作为rmb玩家，可以把技能树的某条边去掉，也就是说某个技能少了一个先修技能，当然这也需要花费。还可以直接花费金钱学习某个技能而无视其先修技能。 \n问：在初始什么技能都没有的情况下，要点某个给定的技能需要多少钱？\n\n<!--more-->\n\n#### 题解\n\n​\t用最小割的思想来做。\n\n​\t考虑重新构图，把每个点拆成两个点$i$和$i'$，对于直接学习某个技能，我们在$i$到$i'$之间连一条容量为其花费的边。这样只要割去这条边，左边和右边直接断开。\n\n​\t我们从源点S向每个点连一条容量为普通学习费用的边。\n\n​\t并且我们对于原来的一条边(u->v)，我们从$u'$连到$v$这样一条容量为消灭这条边的费用的边。\n\n​\t最后我们从要求的$s'$向T连一条$inf$的边。\n\n​\t注意到这里的每一条割都意味着一种学习方法。\n\n​\t由于没有从S直接连到$i'$的边，意味着到$i'$，也就是修i的技能，只有前面都断了，那么前面断了可以是这个点直接学习，也可以是之前的边满足都割去，然后再割去S到$i$的普通学习的边。\n\n​\t那么只要求最小割（最大流），就可以得到花费最小的学习方法了。\n\n```c++\n//Hello Wolrd\n//There is Special Pig Jiong in the world.\n#include<cstdio>\n#include<cstring> \n#include<cstdlib> \n#include<cctype>\n#include<algorithm>\n#include<bitset> \n#include<vector> \n#include<set> \n#include<map> \n#include<ctime> \nusing namespace std;\ntypedef unsigned long long ull;\ntypedef long long ll;\ntypedef pair<int,int> pii;\n#define pc putchar\n#define RG register\nchar __wzp[1<<15|1],*__S=__wzp+32768;\n#ifdef LOCAL \n\t#define gc() getchar()\n#else\n\t#define gc() (__S>=__wzp+32768?(__wzp[fread(__wzp,sizeof(char),1<<15,stdin)]=EOF),*((__S=__wzp)++):*(__S++))\n#endif\ninline ll read(){\n\tRG ll x=0,f=1;RG char c=gc();\n\tfor(;!isdigit(c);c=gc())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n\treturn x*f;\n}\nconst int oo = 0x3f3f3f3f,inf = oo;\n#define mem(x,v) memset(x,v,sizeof(x))\n#define pb push_back\n#define mp make_pair\n#define wait system(\"pause\")\n#define rep(i,a,b) for(RG int i=(a);i<(b);++i)\n#define file(x) {freopen(#x\".in\",\"r\",stdin);freopen(#x\".out\",\"w\",stdout);}\n#define writeln(x) printf(\"%d\\n\",x);\n#define N 505*2+233\n#define M 100990 + N * 2 + 1\n#define S 0\n#define T n+n+1\nstruct Edge{\n\tint to,nxt,cap;\n\tEdge(){}\n\tEdge(int to,int nxt,int cap):to(to),nxt(nxt),cap(cap){}\n}edge[M*2];\nint first[N],nume,cur[N];\nvoid Addedge(int a,int b,int c){\n\tedge[nume] = Edge(b,first[a],c);first[a] = nume++;\n\tedge[nume] = Edge(a,first[b],0);first[b] = nume++;\n}\nint q[N],dis[N],n;\nbool bfs(){\n\tint v,front,rear;mem(dis,-1);\n\tfor(front=rear=0,dis[q[rear++]=T]=1;front<rear;)\n\t\tfor (int u=q[front++],e=first[u];~e;e=edge[e].nxt)\n\t\t\tif(edge[e^1].cap && !~dis[v=edge[e].to])dis[q[rear++]=v]=dis[u]+1;\n\treturn dis[S]!=-1;\n}\n\nint dfs(int u,int flow){\n\tif(u==T)return flow;\n\tint used = 0,d,v;\n\tfor (int &e=cur[u];~e;e=edge[e].nxt){\n\t\tif(edge[e].cap && dis[v=edge[e].to]==dis[u]-1 && (d = dfs(v,min(flow-used,edge[e].cap))))\n\t\t\tedge[e].cap -= d,edge[e^1].cap += d,used += d;\n\t\tif(used == flow) break;\n\t}\n\tif(!used)dis[u]=-1;\n\treturn used;\n}\n\nint dinic(){\n\tint ans = 0;\n\tfor(;bfs();ans+=dfs(S,inf))\n\t\trep(i,S,T+1) cur[i] = first[i];\n\treturn ans;\n}\n\nint m,s;\nint main(){\n\tint kase = read();\n\twhile(kase--){\n\t\tmem(first,-1);nume = 0;\n\t\tn = read(),m = read(),s = read();\n\t\twhile(m--){\n\t\t\tint a = read(),b = read(),c = read();\n\t\t\tAddedge(a+n,b,c);//氪一条边 \n\t\t}\n\t\tfor (int i=1;i<=n;i++){\n\t\t\tint x = read();\n\t\t\tAddedge(S,i,x);\n\t\t}\n\t\tfor (int i=1;i<=n;i++){\n\t\t\tint x = read();\n\t\t\tAddedge(i,n+i,x);\n\t\t}\n\t\tAddedge(s+n,T,inf);\n\t\tprintf(\"%d\\n\",dinic());\n\t}\n\treturn 0;\n}\n```\n\n","slug":"hihoCoder1252 Kejin Game/hihoCoder1252 Kejin Game","published":1,"date":"2021-08-28T13:02:40.645Z","updated":"2021-08-28T13:02:40.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvso34x001pvfnuc31t30vu","content":"<h4 id=\"题意\"><a class=\"markdownIt-Anchor\" href=\"# 题意\"></a> 题意 </h4><p>​\t有一颗技能树，每个技能有一些“先修技能”，必须把这些“先修技能”全部点完才能学习这个技能，这个技能树是个 DAG。由于是个氪金游戏，点某个技能需要一些花费，作为 rmb 玩家，可以把技能树的某条边去掉，也就是说某个技能少了一个先修技能，当然这也需要花费。还可以直接花费金钱学习某个技能而无视其先修技能。<br> 问：在初始什么技能都没有的情况下，要点某个给定的技能需要多少钱？</p><a id=\"more\"></a><h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"# 题解\"></a> 题解 </h4><p>​\t用最小割的思想来做。</p><p>​\t考虑重新构图，把每个点拆成两个点<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>i</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">i&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.751892em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.751892em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>，对于直接学习某个技能，我们在 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>i</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">i&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.751892em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.751892em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>之间连一条容量为其花费的边。这样只要割去这条边，左边和右边直接断开。</p><p>​\t我们从源点 S 向每个点连一条容量为普通学习费用的边。</p><p>​\t并且我们对于原来的一条边 (u-&gt;v)，我们从<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>u</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">u&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.751892em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord mathdefault\">u</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.751892em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> 连到 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span></span></span></span> 这样一条容量为消灭这条边的费用的边。</p><p>​\t最后我们从要求的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>s</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">s&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.751892em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.751892em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> 向 T 连一条 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span></span></span></span> 的边。</p><p>​\t注意到这里的每一条割都意味着一种学习方法。</p><p>​\t由于没有从 S 直接连到 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>i</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">i&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.751892em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.751892em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> 的边，意味着到 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>i</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">i&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.751892em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.751892em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>，也就是修 i 的技能，只有前面都断了，那么前面断了可以是这个点直接学习，也可以是之前的边满足都割去，然后再割去 S 到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 的普通学习的边。</p><p>​\t那么只要求最小割（最大流），就可以得到花费最小的学习方法了。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Hello Wolrd</span></span><br><span class=\"line\"><span class=\"comment\">//There is Special Pig Jiong in the world.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bitset&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctime&gt; </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RG register</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> __wzp[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">15</span>|<span class=\"number\">1</span>],*__S=__wzp+<span class=\"number\">32768</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> LOCAL </span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc() getchar()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc() (__S&gt;=__wzp+32768?(__wzp[fread(__wzp,sizeof(char),1&lt;&lt;15,stdin)]=EOF),*((__S=__wzp)++):*(__S++))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RG ll x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;RG <span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = <span class=\"number\">0x3f3f3f3f</span>,inf = oo;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mp make_pair</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> wait system(<span class=\"meta-string\">\"pause\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(RG int i=(a);i&lt;(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> file(x) &#123;freopen(#x<span class=\"meta-string\">\".in\"</span>,<span class=\"meta-string\">\"r\"</span>,stdin);freopen(#x<span class=\"meta-string\">\".out\"</span>,<span class=\"meta-string\">\"w\"</span>,stdout);&#125;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> writeln(x) printf(<span class=\"meta-string\">\"%d\\n\"</span>,x);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 505*2+233</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 100990 + N * 2 + 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> T n+n+1</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,nxt,cap;</span><br><span class=\"line\">    Edge()&#123;&#125;</span><br><span class=\"line\">    Edge(<span class=\"keyword\">int</span> to,<span class=\"keyword\">int</span> nxt,<span class=\"keyword\">int</span> cap):to(to),nxt(nxt),cap(cap)&#123;&#125;</span><br><span class=\"line\">&#125;edge[M*<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> first[N],nume,cur[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    edge[nume] = Edge(b,first[a],c);first[a] = nume++;</span><br><span class=\"line\">    edge[nume] = Edge(a,first[b],<span class=\"number\">0</span>);first[b] = nume++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> q[N],dis[N],n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v,front,rear;mem(dis,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(front=rear=<span class=\"number\">0</span>,dis[q[rear++]=T]=<span class=\"number\">1</span>;front&lt;rear;)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u=q[front++],e=first[u];~e;e=edge[e].nxt)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(edge[e^<span class=\"number\">1</span>].cap &amp;&amp; !~dis[v=edge[e].to])dis[q[rear++]=v]=dis[u]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dis[S]!=<span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> flow)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u==T)<span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> used = <span class=\"number\">0</span>,d,v;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> &amp;e=cur[u];~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(edge[e].cap &amp;&amp; dis[v=edge[e].to]==dis[u]<span class=\"number\">-1</span> &amp;&amp; (d = dfs(v,<span class=\"built_in\">min</span>(flow-used,edge[e].cap))))</span><br><span class=\"line\">            edge[e].cap -= d,edge[e^<span class=\"number\">1</span>].cap += d,used += d;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(used == flow) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!used)dis[u]=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> used;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dinic</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;bfs();ans+=dfs(S,inf))</span><br><span class=\"line\">        rep(i,S,T+<span class=\"number\">1</span>) cur[i] = first[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> m,s;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> kase = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(kase--)&#123;</span><br><span class=\"line\">        mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">        n = <span class=\"built_in\">read</span>(),m = <span class=\"built_in\">read</span>(),s = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = <span class=\"built_in\">read</span>(),b = <span class=\"built_in\">read</span>(),c = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">            Addedge(a+n,b,c);<span class=\"comment\">// 氪一条边 </span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">            Addedge(S,i,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">            Addedge(i,n+i,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Addedge(s+n,T,inf);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,dinic());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"题意\"><a class=\"markdownIt-Anchor\" href=\"#题意\"></a> 题意</h4><p>​\t有一颗技能树，每个技能有一些“先修技能”，必须把这些“先修技能”全部点完才能学习这个技能，这个技能树是个DAG。由于是个氪金游戏，点某个技能需要一些花费，作为rmb玩家，可以把技能树的某条边去掉，也就是说某个技能少了一个先修技能，当然这也需要花费。还可以直接花费金钱学习某个技能而无视其先修技能。<br>问：在初始什么技能都没有的情况下，要点某个给定的技能需要多少钱？</p>","more":"<h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\"></a> 题解</h4><p>​\t用最小割的思想来做。</p><p>​\t考虑重新构图，把每个点拆成两个点<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>i</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">i&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.751892em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.751892em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>，对于直接学习某个技能，我们在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span>到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>i</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">i&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.751892em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.751892em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>之间连一条容量为其花费的边。这样只要割去这条边，左边和右边直接断开。</p><p>​\t我们从源点S向每个点连一条容量为普通学习费用的边。</p><p>​\t并且我们对于原来的一条边(u-&gt;v)，我们从<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>u</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">u&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.751892em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord mathdefault\">u</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.751892em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>连到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span></span></span></span>这样一条容量为消灭这条边的费用的边。</p><p>​\t最后我们从要求的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>s</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">s&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.751892em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.751892em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>向T连一条<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">inf</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span></span></span></span>的边。</p><p>​\t注意到这里的每一条割都意味着一种学习方法。</p><p>​\t由于没有从S直接连到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>i</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">i&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.751892em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.751892em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>的边，意味着到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>i</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">i&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.751892em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.751892em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>，也就是修i的技能，只有前面都断了，那么前面断了可以是这个点直接学习，也可以是之前的边满足都割去，然后再割去S到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span>的普通学习的边。</p><p>​\t那么只要求最小割（最大流），就可以得到花费最小的学习方法了。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Hello Wolrd</span></span><br><span class=\"line\"><span class=\"comment\">//There is Special Pig Jiong in the world.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bitset&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctime&gt; </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RG register</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> __wzp[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">15</span>|<span class=\"number\">1</span>],*__S=__wzp+<span class=\"number\">32768</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> LOCAL </span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc() getchar()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc() (__S&gt;=__wzp+32768?(__wzp[fread(__wzp,sizeof(char),1&lt;&lt;15,stdin)]=EOF),*((__S=__wzp)++):*(__S++))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RG ll x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;RG <span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = <span class=\"number\">0x3f3f3f3f</span>,inf = oo;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mp make_pair</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> wait system(<span class=\"meta-string\">\"pause\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(RG int i=(a);i&lt;(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> file(x) &#123;freopen(#x<span class=\"meta-string\">\".in\"</span>,<span class=\"meta-string\">\"r\"</span>,stdin);freopen(#x<span class=\"meta-string\">\".out\"</span>,<span class=\"meta-string\">\"w\"</span>,stdout);&#125;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> writeln(x) printf(<span class=\"meta-string\">\"%d\\n\"</span>,x);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 505*2+233</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 100990 + N * 2 + 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> T n+n+1</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,nxt,cap;</span><br><span class=\"line\">    Edge()&#123;&#125;</span><br><span class=\"line\">    Edge(<span class=\"keyword\">int</span> to,<span class=\"keyword\">int</span> nxt,<span class=\"keyword\">int</span> cap):to(to),nxt(nxt),cap(cap)&#123;&#125;</span><br><span class=\"line\">&#125;edge[M*<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> first[N],nume,cur[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    edge[nume] = Edge(b,first[a],c);first[a] = nume++;</span><br><span class=\"line\">    edge[nume] = Edge(a,first[b],<span class=\"number\">0</span>);first[b] = nume++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> q[N],dis[N],n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v,front,rear;mem(dis,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(front=rear=<span class=\"number\">0</span>,dis[q[rear++]=T]=<span class=\"number\">1</span>;front&lt;rear;)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u=q[front++],e=first[u];~e;e=edge[e].nxt)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(edge[e^<span class=\"number\">1</span>].cap &amp;&amp; !~dis[v=edge[e].to])dis[q[rear++]=v]=dis[u]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dis[S]!=<span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> flow)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u==T)<span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> used = <span class=\"number\">0</span>,d,v;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> &amp;e=cur[u];~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(edge[e].cap &amp;&amp; dis[v=edge[e].to]==dis[u]<span class=\"number\">-1</span> &amp;&amp; (d = dfs(v,<span class=\"built_in\">min</span>(flow-used,edge[e].cap))))</span><br><span class=\"line\">            edge[e].cap -= d,edge[e^<span class=\"number\">1</span>].cap += d,used += d;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(used == flow) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!used)dis[u]=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> used;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dinic</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;bfs();ans+=dfs(S,inf))</span><br><span class=\"line\">        rep(i,S,T+<span class=\"number\">1</span>) cur[i] = first[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> m,s;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> kase = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(kase--)&#123;</span><br><span class=\"line\">        mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">        n = <span class=\"built_in\">read</span>(),m = <span class=\"built_in\">read</span>(),s = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = <span class=\"built_in\">read</span>(),b = <span class=\"built_in\">read</span>(),c = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">            Addedge(a+n,b,c);<span class=\"comment\">//氪一条边 </span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">            Addedge(S,i,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">            Addedge(i,n+i,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Addedge(s+n,T,inf);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,dinic());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"前缀和优化数列递推","_content":"\n$f_0 = 1$\n\n$f_n = \\sum_{i=0}^{n-1}f_i$\n\n$n\\le10^4$\n\n~~考虑使用不完全归纳法。~~\n\n$f_o=1,f_1=1,f_2=2,f_3=4,f_4=8 ... $\n\n~~唉，这东西好像就是二的幂次啊，是不是高精度莽一波就没了。~~\n\n<!--more-->\n\n对于上面的递推式，一个做法是可以采用前缀和的优化方法：\n\n即用 $sum_n = \\sum_{i=0}^{n}f_i$ 来支持快速转移。\n\n\n\n#### 转移系数为多项式\n\n考虑另一个问题：\n\n>`Alice` 有一个多项式\n>\n>$$F(x) = \\sum_{i=0}^{m}a_ix^i$$\n>\n>`Alice` 还有一个递推式\n>\n>$$f_0 = 1 $$\n>\n>$$f_i = ((b_i \\times (\\sum_{j=0}^{i-1}f_j \\times F(i-j))) \\bmod P) \\,\\operatorname{xor}\\,c_i$$\n>\n>其中 $P = 10^9 + 7$\n>\n>$A \\,\\operatorname{xor}\\, B$ 表示 $A$ 与 $B$ 的二进制不进位加法\n>\n>其中 $n,m,\\{a_n\\},\\{b_n\\},\\{c_n\\}$ 是已知的。\n>\n>`Alice` 想知道 $(\\sum_{i=1}^{n}f[i]\\times i^2) \\bmod P$，请你帮助他求出这个值。\n>\n>要求时间复杂度 $O(nm)$\n\n\n\n考虑前缀和优化转移。\n\n维护$\\sum f_i \\times F(x-i)$ 这样一个多项式\n\n求值的时候只需要把 $x=i$ 代入就能得到之前的答案。\n\n**如何维护多项式？**\n\n一种常见的做法是维护数列的差分：\n\n具体的，考虑一个已知多项式 $F(x)$。\n\n维护 $F(x)$，我们可以维护 $F$ 的 $0 .. m$ 阶差分\n\n例如，多项式$F(x)$ ， 满足$F(0..5) = (0,1,4,9,16,25)$\n\n$0,1,4,9,16,25$\n\n$1,3,5,7,9,...$\n\n$2,2,2,2,...$\n\n记第 $i$ 行第 $j$ 个元素的值为 $a_{i,j}$\n\n$a_{i,j} = a_{i,j-1} + a_{i-1,j+1}$\n\n我们需要求的值相当于是$a_{0,n}$\n\n容易通过前一列可以 $O(m)$ 求出下一列。\n\n对于一个新增的 $f_n$ 的贡献，我们需要把 $f_n * F(x-n)$ 加入前缀和的统计中。\n\n考虑两个多项式 $F,G$ ，$F+G$ 的差分数组的每一个位置就是 $F$的差分数组上的值 + $G$的差分数组上的值。\n\n显然当我们确定一列的值之后，我们就能确定整个矩阵的所有值，而随着 $i$ 的递增，一个方便的做法是我们只维护第 $i$ 列的元素，没移动一个 $i$ 求出下一列。\n\n容易发现 $F(x-n)$ 对于第 $n$ 列的贡献和 $F(x)$ 对于第 $0$ 列的贡献是一样的。\n\n因此我们预处理求出贡献的系数，只需要 $O(m)$ 的时间复杂度就可以将 $f_n*F(x-n)$ 的贡献加入到差分数组中。\n\n\n\n另一种做法是使用下降幂维护。\n\n>https://www.luogu.com.cn/paste/w35384yw\n\n容易发现这两种做法本质相同。\n\n\n\n以及另一种不是那么优秀的做法：\n\n我发现如果对于所有 $i∈[0,n-1]$ 我将所有 $F(x-i)$ 都预处理好，问题是非常方便的。\n\n考虑使用点值来存储一个多项式，那么我可以方便的进行多项式平移的操作。\n\n对于一个通过点值存储的多项式，可以通过拉格朗日插值来快速求出某个点的值。\n\n如果我们维护的是连续的点值，只需要求出 $F(-m)\\sim F(n)$ ，即 $O(n+m)$ 个值，就可以快速得到整个多项式在平移 $0\\sim n-1$ 个位置之后的值。\n\n但是很遗憾，因为有拉格朗日插值，这个做法的常数较大。\n\n> 但该做法扩展性较强，如规定只有一些位置才能快速转移，直接使用该做法的时间复杂度依然是 $O(nm)$ 的，而另外两个做法直接实现是 $O(nm^2)$的，可能还需要一些转化才能达到更有的复杂度（没想过）\n>\n> 比如解决下面一个问题\n\n> $F$ 是一个多项式\n>\n> `Alice` 还有一个递推式\n>\n> $$f_0 = 1 $$\n>\n> $$f_i = \\sum_{j=0}^{i-1}f_j \\times F(i-j),col_i\\ne col_j$$\n>\n> 其中 $n,m,{col_n}$ 是已知的。\n>\n> `Alice` 想知道 $(\\sum_{i=1}^{n}f[i]\\times i^2) \\bmod P$，请你帮助他求出这个值。\n\n\n\n#### 转移系数为递推式\n\n当然，转移系数也可能不是多项式。\n\n>`Alice` 有一个递推式\n>\n>给出 $F(0),F(1) .. F(m-1)$\n>\n>以及递推关系 $F(n) = \\sum_{i=1}^{m} a_i \\times F(n-i)$\n>\n>`Alice` 还有一个递推式\n>\n>$$f_0 = 1 $$\n>\n>$$f_i = ((b_i \\times (\\sum_{j=0}^{i-1}f_j \\times F(i-j))) \\bmod P) \\,\\operatorname{xor}\\,c_i$$\n>\n>其中 $P = 10^9 + 7$\n>\n>$A \\,\\operatorname{xor}\\, B$ 表示 $A$ 与 $B$ 的二进制不进位加法\n>\n>其中 $n,m,\\{a_n\\},\\{b_n\\},\\{c_n\\}$ 是已知的。\n>\n>`Alice` 想知道 $(\\sum_{i=1}^{n}f[i]\\times i^2) \\bmod P$，请你帮助他求出这个值。\n\n首先我们可以很容易想到一个基于常系数齐次线性递推的做法。\n\n即根据 **凯莱-哈密顿定理** 和 **零化多项式** ，发现每个 $F(n)$ 都可以写成 $F(0) \\sim F(m-1)$ 的线性组合。\n\n具体的，维护 $\\sum_{j=0}^{n} f_j*\\times F(n-j) x^{n-j}$ 对零化多项式取膜后的结果，发现往后转移转移一个位置相当于整个多项式乘上一个 $x$ ， 再进行取膜。由于移动一位只会有一项多余，因此直接实现的时间复杂度依然是 $O(m)$ 的。\n\n至于递推式的零化多项式……应该已经烂大街了。\n\n其实也可以直接理解成直接递推……\n\n\n\n当然，我们还有另外一个做法。\n\n在阐述这个做法之前，我们假设一个前提：**我们知道递推式的通项公式**，即 $F(n) = \\sum_{i=1}^{m} a_i \\times b_i^n$\n\n根据前缀和优化数列递推的思路，我们对于每一个 $i$ ，都维护 $a_i\\sum_{j=0}^{n} f_j \\times b_i^{n-j}$ ， 发现移动一位只需要乘上一个 $b_i$ 即可，非常方便。\n\n> 值得注意的是，这个做法可以进行一个小小的扩展。\n>\n> 比如解决下面一个问题\n\n> $F$ 是一个递推式\n>\n> `Alice` 还有一个递推式\n>\n> $$f_0 = 1 $$\n>\n> $$f_i = \\sum_{j=0}^{i-1}f_j \\times F(i-j),col_i\\ne col_j$$\n>\n> 其中 $n,m,{col_n}$ 是已知的。\n>\n> `Alice` 想知道 $(\\sum_{i=1}^{n}f[i]\\times i^2) \\bmod P$，请你帮助他求出这个值。\n\n关于求递推式通项公式，可以参考 **具体数学 7.3 解递归式**\n\n> 如果保证特征多项式没有重根或许会好做很多。\n\n当递推式是固定的情况下，可以手动解通项公式。\n\n\n\n\n\n感谢 `zzd233` 与我交流讨论相关问题与解法","source":"_posts/一些想写下的东西/prob1.md","raw":"---\ntitle: 前缀和优化数列递推\ntags:\n - 多项式\n - 递推\n---\n\n$f_0 = 1$\n\n$f_n = \\sum_{i=0}^{n-1}f_i$\n\n$n\\le10^4$\n\n~~考虑使用不完全归纳法。~~\n\n$f_o=1,f_1=1,f_2=2,f_3=4,f_4=8 ... $\n\n~~唉，这东西好像就是二的幂次啊，是不是高精度莽一波就没了。~~\n\n<!--more-->\n\n对于上面的递推式，一个做法是可以采用前缀和的优化方法：\n\n即用 $sum_n = \\sum_{i=0}^{n}f_i$ 来支持快速转移。\n\n\n\n#### 转移系数为多项式\n\n考虑另一个问题：\n\n>`Alice` 有一个多项式\n>\n>$$F(x) = \\sum_{i=0}^{m}a_ix^i$$\n>\n>`Alice` 还有一个递推式\n>\n>$$f_0 = 1 $$\n>\n>$$f_i = ((b_i \\times (\\sum_{j=0}^{i-1}f_j \\times F(i-j))) \\bmod P) \\,\\operatorname{xor}\\,c_i$$\n>\n>其中 $P = 10^9 + 7$\n>\n>$A \\,\\operatorname{xor}\\, B$ 表示 $A$ 与 $B$ 的二进制不进位加法\n>\n>其中 $n,m,\\{a_n\\},\\{b_n\\},\\{c_n\\}$ 是已知的。\n>\n>`Alice` 想知道 $(\\sum_{i=1}^{n}f[i]\\times i^2) \\bmod P$，请你帮助他求出这个值。\n>\n>要求时间复杂度 $O(nm)$\n\n\n\n考虑前缀和优化转移。\n\n维护$\\sum f_i \\times F(x-i)$ 这样一个多项式\n\n求值的时候只需要把 $x=i$ 代入就能得到之前的答案。\n\n**如何维护多项式？**\n\n一种常见的做法是维护数列的差分：\n\n具体的，考虑一个已知多项式 $F(x)$。\n\n维护 $F(x)$，我们可以维护 $F$ 的 $0 .. m$ 阶差分\n\n例如，多项式$F(x)$ ， 满足$F(0..5) = (0,1,4,9,16,25)$\n\n$0,1,4,9,16,25$\n\n$1,3,5,7,9,...$\n\n$2,2,2,2,...$\n\n记第 $i$ 行第 $j$ 个元素的值为 $a_{i,j}$\n\n$a_{i,j} = a_{i,j-1} + a_{i-1,j+1}$\n\n我们需要求的值相当于是$a_{0,n}$\n\n容易通过前一列可以 $O(m)$ 求出下一列。\n\n对于一个新增的 $f_n$ 的贡献，我们需要把 $f_n * F(x-n)$ 加入前缀和的统计中。\n\n考虑两个多项式 $F,G$ ，$F+G$ 的差分数组的每一个位置就是 $F$的差分数组上的值 + $G$的差分数组上的值。\n\n显然当我们确定一列的值之后，我们就能确定整个矩阵的所有值，而随着 $i$ 的递增，一个方便的做法是我们只维护第 $i$ 列的元素，没移动一个 $i$ 求出下一列。\n\n容易发现 $F(x-n)$ 对于第 $n$ 列的贡献和 $F(x)$ 对于第 $0$ 列的贡献是一样的。\n\n因此我们预处理求出贡献的系数，只需要 $O(m)$ 的时间复杂度就可以将 $f_n*F(x-n)$ 的贡献加入到差分数组中。\n\n\n\n另一种做法是使用下降幂维护。\n\n>https://www.luogu.com.cn/paste/w35384yw\n\n容易发现这两种做法本质相同。\n\n\n\n以及另一种不是那么优秀的做法：\n\n我发现如果对于所有 $i∈[0,n-1]$ 我将所有 $F(x-i)$ 都预处理好，问题是非常方便的。\n\n考虑使用点值来存储一个多项式，那么我可以方便的进行多项式平移的操作。\n\n对于一个通过点值存储的多项式，可以通过拉格朗日插值来快速求出某个点的值。\n\n如果我们维护的是连续的点值，只需要求出 $F(-m)\\sim F(n)$ ，即 $O(n+m)$ 个值，就可以快速得到整个多项式在平移 $0\\sim n-1$ 个位置之后的值。\n\n但是很遗憾，因为有拉格朗日插值，这个做法的常数较大。\n\n> 但该做法扩展性较强，如规定只有一些位置才能快速转移，直接使用该做法的时间复杂度依然是 $O(nm)$ 的，而另外两个做法直接实现是 $O(nm^2)$的，可能还需要一些转化才能达到更有的复杂度（没想过）\n>\n> 比如解决下面一个问题\n\n> $F$ 是一个多项式\n>\n> `Alice` 还有一个递推式\n>\n> $$f_0 = 1 $$\n>\n> $$f_i = \\sum_{j=0}^{i-1}f_j \\times F(i-j),col_i\\ne col_j$$\n>\n> 其中 $n,m,{col_n}$ 是已知的。\n>\n> `Alice` 想知道 $(\\sum_{i=1}^{n}f[i]\\times i^2) \\bmod P$，请你帮助他求出这个值。\n\n\n\n#### 转移系数为递推式\n\n当然，转移系数也可能不是多项式。\n\n>`Alice` 有一个递推式\n>\n>给出 $F(0),F(1) .. F(m-1)$\n>\n>以及递推关系 $F(n) = \\sum_{i=1}^{m} a_i \\times F(n-i)$\n>\n>`Alice` 还有一个递推式\n>\n>$$f_0 = 1 $$\n>\n>$$f_i = ((b_i \\times (\\sum_{j=0}^{i-1}f_j \\times F(i-j))) \\bmod P) \\,\\operatorname{xor}\\,c_i$$\n>\n>其中 $P = 10^9 + 7$\n>\n>$A \\,\\operatorname{xor}\\, B$ 表示 $A$ 与 $B$ 的二进制不进位加法\n>\n>其中 $n,m,\\{a_n\\},\\{b_n\\},\\{c_n\\}$ 是已知的。\n>\n>`Alice` 想知道 $(\\sum_{i=1}^{n}f[i]\\times i^2) \\bmod P$，请你帮助他求出这个值。\n\n首先我们可以很容易想到一个基于常系数齐次线性递推的做法。\n\n即根据 **凯莱-哈密顿定理** 和 **零化多项式** ，发现每个 $F(n)$ 都可以写成 $F(0) \\sim F(m-1)$ 的线性组合。\n\n具体的，维护 $\\sum_{j=0}^{n} f_j*\\times F(n-j) x^{n-j}$ 对零化多项式取膜后的结果，发现往后转移转移一个位置相当于整个多项式乘上一个 $x$ ， 再进行取膜。由于移动一位只会有一项多余，因此直接实现的时间复杂度依然是 $O(m)$ 的。\n\n至于递推式的零化多项式……应该已经烂大街了。\n\n其实也可以直接理解成直接递推……\n\n\n\n当然，我们还有另外一个做法。\n\n在阐述这个做法之前，我们假设一个前提：**我们知道递推式的通项公式**，即 $F(n) = \\sum_{i=1}^{m} a_i \\times b_i^n$\n\n根据前缀和优化数列递推的思路，我们对于每一个 $i$ ，都维护 $a_i\\sum_{j=0}^{n} f_j \\times b_i^{n-j}$ ， 发现移动一位只需要乘上一个 $b_i$ 即可，非常方便。\n\n> 值得注意的是，这个做法可以进行一个小小的扩展。\n>\n> 比如解决下面一个问题\n\n> $F$ 是一个递推式\n>\n> `Alice` 还有一个递推式\n>\n> $$f_0 = 1 $$\n>\n> $$f_i = \\sum_{j=0}^{i-1}f_j \\times F(i-j),col_i\\ne col_j$$\n>\n> 其中 $n,m,{col_n}$ 是已知的。\n>\n> `Alice` 想知道 $(\\sum_{i=1}^{n}f[i]\\times i^2) \\bmod P$，请你帮助他求出这个值。\n\n关于求递推式通项公式，可以参考 **具体数学 7.3 解递归式**\n\n> 如果保证特征多项式没有重根或许会好做很多。\n\n当递推式是固定的情况下，可以手动解通项公式。\n\n\n\n\n\n感谢 `zzd233` 与我交流讨论相关问题与解法","slug":"一些想写下的东西/prob1","published":1,"date":"2021-08-28T13:02:40.642Z","updated":"2021-08-28T13:02:40.642Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvso34y001qvfnuhgrj1cjp","content":"<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f_0 = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>n</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>f</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">f_n = \\sum_{i=0}^{n-1}f_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.253718em;vertical-align:-.29971000000000003em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.954008em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29971000000000003em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding=\"application/x-tex\">n\\le10^4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.7719400000000001em;vertical-align:-.13597em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.8141079999999999em;vertical-align:0\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span></p><p><s>考虑使用不完全归纳法。</s></p><p>$f_o=1,f_1=1,f_2=2,f_3=4,f_4=8 … $</p><p><s>唉，这东西好像就是二的幂次啊，是不是高精度莽一波就没了。</s></p><a id=\"more\"></a><p>对于上面的递推式，一个做法是可以采用前缀和的优化方法：</p><p>即用 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>u</mi><msub><mi>m</mi><mi>n</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><msub><mi>f</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">sum_n = \\sum_{i=0}^{n}f_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.58056em;vertical-align:-.15em\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord\"><span class=\"mord mathdefault\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-.29971000000000003em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.804292em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29971000000000003em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span> 来支持快速转移。</p><h4 id=\"转移系数为多项式\"><a class=\"markdownIt-Anchor\" href=\"# 转移系数为多项式\"></a> 转移系数为多项式 </h4><p> 考虑另一个问题：</p><blockquote><p><code>Alice</code> 有一个多项式 </p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>m</mi></munderover><msub><mi>a</mi><mi>i</mi></msub><msup><mi>x</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">F(x) = \\sum_{i=0}^{m}a_ix^i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.929066em;vertical-align:-1.277669em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em\"><span style=\"top:-1.872331em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.050005em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8746639999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span></p><p><code>Alice</code> 还有一个递推式</p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f_0 = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span></span></p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>i</mi></msub><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><msub><mi>b</mi><mi>i</mi></msub><mo>×</mo><mo stretchy=\"false\">(</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>f</mi><mi>j</mi></msub><mo>×</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mi>j</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mtext> </mtext><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mi>P</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mi mathvariant=\"normal\">xor</mi><mo>⁡</mo><mtext> </mtext><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">f_i = ((b_i \\times (\\sum_{j=0}^{i-1}f_j \\times F(i-j))) \\bmod P) \\,\\operatorname{xor}\\,c_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.2254460000000007em;vertical-align:-1.4137769999999998em\"></span><span class=\"mopen\">(</span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8116690000000006em\"><span style=\"top:-1.872331em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.050005em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4137769999999998em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span><span class=\"mbin\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mop\"><span class=\"mord mathrm\">x</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">r</span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span></span></p><p> 其中 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">P = 10^9 + 7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.897438em;vertical-align:-.08333em\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">7</span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mtext> </mtext><mi mathvariant=\"normal\">xor</mi><mo>⁡</mo><mtext> </mtext><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\,\\operatorname{xor}\\, B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mop\"><span class=\"mord mathrm\">x</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">r</span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05017em\">B</span></span></span></span> 表示 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">A</span></span></span></span> 与 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05017em\">B</span></span></span></span> 的二进制不进位加法 </p><p> 其中 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">{</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">{</mo><msub><mi>b</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">{</mo><msub><mi>c</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">n,m,\\{a_n\\},\\{b_n\\},\\{c_n\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span> 是已知的。</p><p><code>Alice</code> 想知道 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>×</mo><msup><mi>i</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mtext> </mtext><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">(\\sum_{i=1}^{n}f[i]\\times i^2) \\bmod P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-.29971000000000003em\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.804292em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29971000000000003em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span><span class=\"mbin\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span></span></span></span>，请你帮助他求出这个值。</p><p>要求时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nm)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span></span></span></span></p></blockquote><p>考虑前缀和优化转移。</p><p>维护 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∑</mo><msub><mi>f</mi><mi>i</mi></msub><mo>×</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum f_i \\times F(x-i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-.25001em\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span></span></span></span> 这样一个多项式</p><p> 求值的时候只需要把 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>=</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">x=i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 代入就能得到之前的答案。</p><p><strong>如何维护多项式？</strong></p><p>一种常见的做法是维护数列的差分：</p><p>具体的，考虑一个已知多项式 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>。</p><p>维护 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>，我们可以维护 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span></span></span></span> 的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0..</mn><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">0 .. m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord mathdefault\">m</span></span></span></span> 阶差分 </p><p> 例如，多项式 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> ， 满足<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mn>0..5</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>9</mn><mo separator=\"true\">,</mo><mn>16</mn><mo separator=\"true\">,</mo><mn>25</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(0..5) = (0,1,4,9,16,25)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">9</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mclose\">)</span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>9</mn><mo separator=\"true\">,</mo><mn>16</mn><mo separator=\"true\">,</mo><mn>25</mn></mrow><annotation encoding=\"application/x-tex\">0,1,4,9,16,25</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8388800000000001em;vertical-align:-.19444em\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">9</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>7</mn><mo separator=\"true\">,</mo><mn>9</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">1,3,5,7,9,...</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8388800000000001em;vertical-align:-.19444em\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">7</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">9</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">2,2,2,2,...</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8388800000000001em;vertical-align:-.19444em\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span></span></span></span></p><p> 记第 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 行第 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span></span></span></span> 个元素的值为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{i,j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.716668em;vertical-align:-.286108em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub><mo>=</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>j</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{i,j} = a_{i,j-1} + a_{i-1,j+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.716668em;vertical-align:-.286108em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.8694379999999999em;vertical-align:-.286108em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.716668em;vertical-align:-.286108em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span></span></span></span></p><p>我们需要求的值相当于是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mi>n</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{0,n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.716668em;vertical-align:-.286108em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.301108em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span></span></span></span></p><p> 容易通过前一列可以 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span></span></span></span> 求出下一列。</p><p>对于一个新增的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">f_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span> 的贡献，我们需要把 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>n</mi></msub><mo>∗</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f_n * F(x-n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> 加入前缀和的统计中。</p><p>考虑两个多项式 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo separator=\"true\">,</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">F,G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8777699999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">G</span></span></span></span> ，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo>+</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">F+G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.76666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">G</span></span></span></span> 的差分数组的每一个位置就是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span></span></span></span>的差分数组上的值 + <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">G</span></span></span></span>的差分数组上的值。</p><p>显然当我们确定一列的值之后，我们就能确定整个矩阵的所有值，而随着 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 的递增，一个方便的做法是我们只维护第 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 列的元素，没移动一个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 求出下一列。</p><p>容易发现 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x-n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> 对于第 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">n</span></span></span></span> 列的贡献和 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> 对于第 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">0</span></span></span></span> 列的贡献是一样的。</p><p>因此我们预处理求出贡献的系数，只需要 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span></span></span></span> 的时间复杂度就可以将 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>n</mi></msub><mo>∗</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f_n*F(x-n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> 的贡献加入到差分数组中。</p><p>另一种做法是使用下降幂维护。</p><blockquote><p><a href=\"https://www.luogu.com.cn/paste/w35384yw\" target=\"_blank\" rel=\"noopener\">https://www.luogu.com.cn/paste/w35384yw</a></p></blockquote><p>容易发现这两种做法本质相同。</p><p>以及另一种不是那么优秀的做法：</p><p>我发现如果对于所有 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">i∈[0,n-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.69862em;vertical-align:-.0391em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> 我将所有 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x-i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span></span></span></span> 都预处理好，问题是非常方便的。</p><p>考虑使用点值来存储一个多项式，那么我可以方便的进行多项式平移的操作。</p><p>对于一个通过点值存储的多项式，可以通过拉格朗日插值来快速求出某个点的值。</p><p>如果我们维护的是连续的点值，只需要求出 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mo>−</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo>∼</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(-m)\\sim F(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> ，即 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n+m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span></span></span></span> 个值，就可以快速得到整个多项式在平移 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>∼</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0\\sim n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span> 个位置之后的值。</p><p>但是很遗憾，因为有拉格朗日插值，这个做法的常数较大。</p><blockquote><p>但该做法扩展性较强，如规定只有一些位置才能快速转移，直接使用该做法的时间复杂度依然是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nm)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span></span></span></span> 的，而另外两个做法直接实现是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msup><mi>m</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nm^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord\"><span class=\"mord mathdefault\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>的，可能还需要一些转化才能达到更有的复杂度（没想过）</p><p>比如解决下面一个问题 </p></blockquote><blockquote><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span></span></span></span> 是一个多项式</p><p><code>Alice</code> 还有一个递推式</p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f_0 = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span></span></p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>i</mi></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>f</mi><mi>j</mi></msub><mo>×</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mi>j</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>c</mi><mi>o</mi><msub><mi>l</mi><mi>i</mi></msub><mi mathvariant=\"normal\">≠</mi><mi>c</mi><mi>o</mi><msub><mi>l</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">f_i = \\sum_{j=0}^{i-1}f_j \\times F(i-j),col_i\\ne col_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.2254460000000007em;vertical-align:-1.4137769999999998em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8116690000000006em\"><span style=\"top:-1.872331em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.050005em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4137769999999998em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.01968em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.69444em\"><span style=\"top:-3em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.19444em\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.980548em;vertical-align:-.286108em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:-.01968em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span></span></span></span></span></p><p> 其中 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo separator=\"true\">,</mo><mrow><mi>c</mi><mi>o</mi><msub><mi>l</mi><mi>n</mi></msub></mrow></mrow><annotation encoding=\"application/x-tex\">n,m,{col_n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:-.01968em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span></span> 是已知的。</p><p><code>Alice</code> 想知道 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>×</mo><msup><mi>i</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mtext> </mtext><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">(\\sum_{i=1}^{n}f[i]\\times i^2) \\bmod P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-.29971000000000003em\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.804292em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29971000000000003em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span><span class=\"mbin\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span></span></span></span>，请你帮助他求出这个值。</p></blockquote><h4 id=\"转移系数为递推式\"><a class=\"markdownIt-Anchor\" href=\"# 转移系数为递推式\"></a> 转移系数为递推式 </h4><p> 当然，转移系数也可能不是多项式。</p><blockquote><p><code>Alice</code> 有一个递推式 </p><p> 给出 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi>F</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(0),F(1) .. F(m-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p><p>以及递推关系 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><mo>×</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(n) = \\sum_{i=1}^{m} a_i \\times F(n-i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-.29971000000000003em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.804292em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29971000000000003em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span></span></span></span></p><p><code>Alice</code> 还有一个递推式 </p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f_0 = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span></span></p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>i</mi></msub><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><msub><mi>b</mi><mi>i</mi></msub><mo>×</mo><mo stretchy=\"false\">(</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>f</mi><mi>j</mi></msub><mo>×</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mi>j</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mtext> </mtext><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mi>P</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mi mathvariant=\"normal\">xor</mi><mo>⁡</mo><mtext> </mtext><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">f_i = ((b_i \\times (\\sum_{j=0}^{i-1}f_j \\times F(i-j))) \\bmod P) \\,\\operatorname{xor}\\,c_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.2254460000000007em;vertical-align:-1.4137769999999998em\"></span><span class=\"mopen\">(</span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8116690000000006em\"><span style=\"top:-1.872331em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.050005em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4137769999999998em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span><span class=\"mbin\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mop\"><span class=\"mord mathrm\">x</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">r</span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span></span></p><p> 其中 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">P = 10^9 + 7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.897438em;vertical-align:-.08333em\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">7</span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mtext> </mtext><mi mathvariant=\"normal\">xor</mi><mo>⁡</mo><mtext> </mtext><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\,\\operatorname{xor}\\, B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mop\"><span class=\"mord mathrm\">x</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">r</span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05017em\">B</span></span></span></span> 表示 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">A</span></span></span></span> 与 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05017em\">B</span></span></span></span> 的二进制不进位加法 </p><p> 其中 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">{</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">{</mo><msub><mi>b</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">{</mo><msub><mi>c</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">n,m,\\{a_n\\},\\{b_n\\},\\{c_n\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span> 是已知的。</p><p><code>Alice</code> 想知道 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>×</mo><msup><mi>i</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mtext> </mtext><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">(\\sum_{i=1}^{n}f[i]\\times i^2) \\bmod P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-.29971000000000003em\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.804292em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29971000000000003em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span><span class=\"mbin\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span></span></span></span>，请你帮助他求出这个值。</p></blockquote><p>首先我们可以很容易想到一个基于常系数齐次线性递推的做法。</p><p>即根据 <strong>凯莱 - 哈密顿定理 </strong> 和 <strong> 零化多项式 </strong> ，发现每个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> 都可以写成 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>∼</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(0) \\sim F(m-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 的线性组合。</p><p> 具体的，维护 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><msub><mi>f</mi><mi>j</mi></msub><mo>∗</mo><mo>×</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>j</mi><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mi>j</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_{j=0}^{n} f_j*\\times F(n-j) x^{n-j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.24011em;vertical-align:-.43581800000000004em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.804292em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.43581800000000004em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">×</span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0746639999999998em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.824664em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span></span></span></span></span></span></span></span></span> 对零化多项式取膜后的结果，发现往后转移转移一个位置相当于整个多项式乘上一个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span></span></span></span> ， 再进行取膜。由于移动一位只会有一项多余，因此直接实现的时间复杂度依然是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span></span></span></span> 的。</p><p>至于递推式的零化多项式……应该已经烂大街了。</p><p>其实也可以直接理解成直接递推……</p><p>当然，我们还有另外一个做法。</p><p>在阐述这个做法之前，我们假设一个前提：<strong>我们知道递推式的通项公式 </strong>，即 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><mo>×</mo><msubsup><mi>b</mi><mi>i</mi><mi>n</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">F(n) = \\sum_{i=1}^{m} a_i \\times b_i^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-.29971000000000003em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.804292em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29971000000000003em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.953104em;vertical-align:-.258664em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.664392em\"><span style=\"top:-2.441336em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.258664em\"><span></span></span></span></span></span></span></span></span></span></p><p> 根据前缀和优化数列递推的思路，我们对于每一个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> ，都维护 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><msub><mi>f</mi><mi>j</mi></msub><mo>×</mo><msubsup><mi>b</mi><mi>i</mi><mrow><mi>n</mi><mo>−</mo><mi>j</mi></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">a_i\\sum_{j=0}^{n} f_j \\times b_i^{n-j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.24011em;vertical-align:-.43581800000000004em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.804292em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.43581800000000004em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.219436em;vertical-align:-.276864em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.942572em\"><span style=\"top:-2.4231360000000004em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1809080000000005em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.276864em\"><span></span></span></span></span></span></span></span></span></span> ， 发现移动一位只需要乘上一个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">b_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.84444em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span> 即可，非常方便。</p><blockquote><p>值得注意的是，这个做法可以进行一个小小的扩展。</p><p>比如解决下面一个问题 </p></blockquote><blockquote><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span></span></span></span> 是一个递推式</p><p><code>Alice</code> 还有一个递推式</p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f_0 = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span></span></p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>i</mi></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>f</mi><mi>j</mi></msub><mo>×</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mi>j</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>c</mi><mi>o</mi><msub><mi>l</mi><mi>i</mi></msub><mi mathvariant=\"normal\">≠</mi><mi>c</mi><mi>o</mi><msub><mi>l</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">f_i = \\sum_{j=0}^{i-1}f_j \\times F(i-j),col_i\\ne col_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.2254460000000007em;vertical-align:-1.4137769999999998em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8116690000000006em\"><span style=\"top:-1.872331em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.050005em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4137769999999998em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.01968em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.69444em\"><span style=\"top:-3em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.19444em\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.980548em;vertical-align:-.286108em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:-.01968em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span></span></span></span></span></p><p> 其中 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo separator=\"true\">,</mo><mrow><mi>c</mi><mi>o</mi><msub><mi>l</mi><mi>n</mi></msub></mrow></mrow><annotation encoding=\"application/x-tex\">n,m,{col_n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:-.01968em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span></span> 是已知的。</p><p><code>Alice</code> 想知道 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>×</mo><msup><mi>i</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mtext> </mtext><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">(\\sum_{i=1}^{n}f[i]\\times i^2) \\bmod P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-.29971000000000003em\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.804292em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29971000000000003em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span><span class=\"mbin\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span></span></span></span>，请你帮助他求出这个值。</p></blockquote><p>关于求递推式通项公式，可以参考 <strong>具体数学 7.3 解递归式 </strong></p><blockquote><p> 如果保证特征多项式没有重根或许会好做很多。</p></blockquote><p>当递推式是固定的情况下，可以手动解通项公式。</p><p>感谢 <code>zzd233</code> 与我交流讨论相关问题与解法</p>","site":{"data":{}},"excerpt":"<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f_0 = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>n</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>f</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">f_n = \\sum_{i=0}^{n-1}f_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.253718em;vertical-align:-.29971000000000003em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.954008em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29971000000000003em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding=\"application/x-tex\">n\\le10^4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.7719400000000001em;vertical-align:-.13597em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.8141079999999999em;vertical-align:0\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span></p><p><s>考虑使用不完全归纳法。</s></p><p>$f_o=1,f_1=1,f_2=2,f_3=4,f_4=8 … $</p><p><s>唉，这东西好像就是二的幂次啊，是不是高精度莽一波就没了。</s></p>","more":"<p>对于上面的递推式，一个做法是可以采用前缀和的优化方法：</p><p>即用 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>u</mi><msub><mi>m</mi><mi>n</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><msub><mi>f</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">sum_n = \\sum_{i=0}^{n}f_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.58056em;vertical-align:-.15em\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord\"><span class=\"mord mathdefault\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-.29971000000000003em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.804292em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29971000000000003em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span> 来支持快速转移。</p><h4 id=\"转移系数为多项式\"><a class=\"markdownIt-Anchor\" href=\"#转移系数为多项式\"></a> 转移系数为多项式</h4><p>考虑另一个问题：</p><blockquote><p><code>Alice</code> 有一个多项式</p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>m</mi></munderover><msub><mi>a</mi><mi>i</mi></msub><msup><mi>x</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">F(x) = \\sum_{i=0}^{m}a_ix^i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.929066em;vertical-align:-1.277669em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em\"><span style=\"top:-1.872331em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.050005em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8746639999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span></p><p><code>Alice</code> 还有一个递推式</p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f_0 = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span></span></p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>i</mi></msub><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><msub><mi>b</mi><mi>i</mi></msub><mo>×</mo><mo stretchy=\"false\">(</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>f</mi><mi>j</mi></msub><mo>×</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mi>j</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mtext> </mtext><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mi>P</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mi mathvariant=\"normal\">xor</mi><mo>⁡</mo><mtext> </mtext><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">f_i = ((b_i \\times (\\sum_{j=0}^{i-1}f_j \\times F(i-j))) \\bmod P) \\,\\operatorname{xor}\\,c_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.2254460000000007em;vertical-align:-1.4137769999999998em\"></span><span class=\"mopen\">(</span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8116690000000006em\"><span style=\"top:-1.872331em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.050005em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4137769999999998em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span><span class=\"mbin\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mop\"><span class=\"mord mathrm\">x</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">r</span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span></span></p><p>其中 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">P = 10^9 + 7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.897438em;vertical-align:-.08333em\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">7</span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mtext> </mtext><mi mathvariant=\"normal\">xor</mi><mo>⁡</mo><mtext> </mtext><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\,\\operatorname{xor}\\, B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mop\"><span class=\"mord mathrm\">x</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">r</span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05017em\">B</span></span></span></span> 表示 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">A</span></span></span></span> 与 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05017em\">B</span></span></span></span> 的二进制不进位加法</p><p>其中 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">{</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">{</mo><msub><mi>b</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">{</mo><msub><mi>c</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">n,m,\\{a_n\\},\\{b_n\\},\\{c_n\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span> 是已知的。</p><p><code>Alice</code> 想知道 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>×</mo><msup><mi>i</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mtext> </mtext><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">(\\sum_{i=1}^{n}f[i]\\times i^2) \\bmod P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-.29971000000000003em\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.804292em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29971000000000003em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span><span class=\"mbin\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span></span></span></span>，请你帮助他求出这个值。</p><p>要求时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nm)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span></span></span></span></p></blockquote><p>考虑前缀和优化转移。</p><p>维护<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∑</mo><msub><mi>f</mi><mi>i</mi></msub><mo>×</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum f_i \\times F(x-i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-.25001em\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span></span></span></span> 这样一个多项式</p><p>求值的时候只需要把 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>=</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">x=i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 代入就能得到之前的答案。</p><p><strong>如何维护多项式？</strong></p><p>一种常见的做法是维护数列的差分：</p><p>具体的，考虑一个已知多项式 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>。</p><p>维护 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>，我们可以维护 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span></span></span></span> 的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0..</mn><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">0 .. m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord mathdefault\">m</span></span></span></span> 阶差分</p><p>例如，多项式<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> ， 满足<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mn>0..5</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>9</mn><mo separator=\"true\">,</mo><mn>16</mn><mo separator=\"true\">,</mo><mn>25</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(0..5) = (0,1,4,9,16,25)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">9</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mclose\">)</span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>9</mn><mo separator=\"true\">,</mo><mn>16</mn><mo separator=\"true\">,</mo><mn>25</mn></mrow><annotation encoding=\"application/x-tex\">0,1,4,9,16,25</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8388800000000001em;vertical-align:-.19444em\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">9</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>7</mn><mo separator=\"true\">,</mo><mn>9</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">1,3,5,7,9,...</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8388800000000001em;vertical-align:-.19444em\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">7</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">9</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">2,2,2,2,...</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8388800000000001em;vertical-align:-.19444em\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span></span></span></span></p><p>记第 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 行第 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.85396em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span></span></span></span> 个元素的值为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{i,j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.716668em;vertical-align:-.286108em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub><mo>=</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>j</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{i,j} = a_{i,j-1} + a_{i-1,j+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.716668em;vertical-align:-.286108em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.8694379999999999em;vertical-align:-.286108em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.716668em;vertical-align:-.286108em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span></span></span></span></p><p>我们需要求的值相当于是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mi>n</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{0,n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.716668em;vertical-align:-.286108em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.301108em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span></span></span></span></p><p>容易通过前一列可以 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span></span></span></span> 求出下一列。</p><p>对于一个新增的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">f_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span> 的贡献，我们需要把 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>n</mi></msub><mo>∗</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f_n * F(x-n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> 加入前缀和的统计中。</p><p>考虑两个多项式 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo separator=\"true\">,</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">F,G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8777699999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">G</span></span></span></span> ，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo>+</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">F+G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.76666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">G</span></span></span></span> 的差分数组的每一个位置就是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span></span></span></span>的差分数组上的值 + <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">G</span></span></span></span>的差分数组上的值。</p><p>显然当我们确定一列的值之后，我们就能确定整个矩阵的所有值，而随着 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 的递增，一个方便的做法是我们只维护第 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 列的元素，没移动一个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 求出下一列。</p><p>容易发现 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x-n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> 对于第 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">n</span></span></span></span> 列的贡献和 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> 对于第 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">0</span></span></span></span> 列的贡献是一样的。</p><p>因此我们预处理求出贡献的系数，只需要 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span></span></span></span> 的时间复杂度就可以将 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>n</mi></msub><mo>∗</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f_n*F(x-n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> 的贡献加入到差分数组中。</p><p>另一种做法是使用下降幂维护。</p><blockquote><p><a href=\"https://www.luogu.com.cn/paste/w35384yw\" target=\"_blank\" rel=\"noopener\">https://www.luogu.com.cn/paste/w35384yw</a></p></blockquote><p>容易发现这两种做法本质相同。</p><p>以及另一种不是那么优秀的做法：</p><p>我发现如果对于所有 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">i∈[0,n-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.69862em;vertical-align:-.0391em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> 我将所有 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x-i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span></span></span></span> 都预处理好，问题是非常方便的。</p><p>考虑使用点值来存储一个多项式，那么我可以方便的进行多项式平移的操作。</p><p>对于一个通过点值存储的多项式，可以通过拉格朗日插值来快速求出某个点的值。</p><p>如果我们维护的是连续的点值，只需要求出 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mo>−</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo>∼</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(-m)\\sim F(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> ，即 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n+m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span></span></span></span> 个值，就可以快速得到整个多项式在平移 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>∼</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0\\sim n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span> 个位置之后的值。</p><p>但是很遗憾，因为有拉格朗日插值，这个做法的常数较大。</p><blockquote><p>但该做法扩展性较强，如规定只有一些位置才能快速转移，直接使用该做法的时间复杂度依然是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nm)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span></span></span></span> 的，而另外两个做法直接实现是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msup><mi>m</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nm^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord\"><span class=\"mord mathdefault\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>的，可能还需要一些转化才能达到更有的复杂度（没想过）</p><p>比如解决下面一个问题</p></blockquote><blockquote><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span></span></span></span> 是一个多项式</p><p><code>Alice</code> 还有一个递推式</p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f_0 = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span></span></p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>i</mi></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>f</mi><mi>j</mi></msub><mo>×</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mi>j</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>c</mi><mi>o</mi><msub><mi>l</mi><mi>i</mi></msub><mi mathvariant=\"normal\">≠</mi><mi>c</mi><mi>o</mi><msub><mi>l</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">f_i = \\sum_{j=0}^{i-1}f_j \\times F(i-j),col_i\\ne col_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.2254460000000007em;vertical-align:-1.4137769999999998em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8116690000000006em\"><span style=\"top:-1.872331em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.050005em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4137769999999998em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.01968em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.69444em\"><span style=\"top:-3em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.19444em\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.980548em;vertical-align:-.286108em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:-.01968em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span></span></span></span></span></p><p>其中 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo separator=\"true\">,</mo><mrow><mi>c</mi><mi>o</mi><msub><mi>l</mi><mi>n</mi></msub></mrow></mrow><annotation encoding=\"application/x-tex\">n,m,{col_n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:-.01968em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span></span> 是已知的。</p><p><code>Alice</code> 想知道 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>×</mo><msup><mi>i</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mtext> </mtext><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">(\\sum_{i=1}^{n}f[i]\\times i^2) \\bmod P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-.29971000000000003em\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.804292em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29971000000000003em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span><span class=\"mbin\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span></span></span></span>，请你帮助他求出这个值。</p></blockquote><h4 id=\"转移系数为递推式\"><a class=\"markdownIt-Anchor\" href=\"#转移系数为递推式\"></a> 转移系数为递推式</h4><p>当然，转移系数也可能不是多项式。</p><blockquote><p><code>Alice</code> 有一个递推式</p><p>给出 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi>F</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(0),F(1) .. F(m-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p><p>以及递推关系 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><mo>×</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(n) = \\sum_{i=1}^{m} a_i \\times F(n-i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-.29971000000000003em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.804292em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29971000000000003em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span></span></span></span></p><p><code>Alice</code> 还有一个递推式</p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f_0 = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span></span></p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>i</mi></msub><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><msub><mi>b</mi><mi>i</mi></msub><mo>×</mo><mo stretchy=\"false\">(</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>f</mi><mi>j</mi></msub><mo>×</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mi>j</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mtext> </mtext><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mi>P</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mi mathvariant=\"normal\">xor</mi><mo>⁡</mo><mtext> </mtext><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">f_i = ((b_i \\times (\\sum_{j=0}^{i-1}f_j \\times F(i-j))) \\bmod P) \\,\\operatorname{xor}\\,c_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.2254460000000007em;vertical-align:-1.4137769999999998em\"></span><span class=\"mopen\">(</span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8116690000000006em\"><span style=\"top:-1.872331em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.050005em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4137769999999998em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span><span class=\"mbin\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mop\"><span class=\"mord mathrm\">x</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">r</span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span></span></p><p>其中 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">P = 10^9 + 7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.897438em;vertical-align:-.08333em\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">7</span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mtext> </mtext><mi mathvariant=\"normal\">xor</mi><mo>⁡</mo><mtext> </mtext><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\,\\operatorname{xor}\\, B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mop\"><span class=\"mord mathrm\">x</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">r</span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05017em\">B</span></span></span></span> 表示 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">A</span></span></span></span> 与 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05017em\">B</span></span></span></span> 的二进制不进位加法</p><p>其中 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">{</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">{</mo><msub><mi>b</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">{</mo><msub><mi>c</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">n,m,\\{a_n\\},\\{b_n\\},\\{c_n\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathdefault\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span> 是已知的。</p><p><code>Alice</code> 想知道 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>×</mo><msup><mi>i</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mtext> </mtext><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">(\\sum_{i=1}^{n}f[i]\\times i^2) \\bmod P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-.29971000000000003em\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.804292em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29971000000000003em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span><span class=\"mbin\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span></span></span></span>，请你帮助他求出这个值。</p></blockquote><p>首先我们可以很容易想到一个基于常系数齐次线性递推的做法。</p><p>即根据 <strong>凯莱-哈密顿定理</strong> 和 <strong>零化多项式</strong> ，发现每个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> 都可以写成 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>∼</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(0) \\sim F(m-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 的线性组合。</p><p>具体的，维护 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><msub><mi>f</mi><mi>j</mi></msub><mo>∗</mo><mo>×</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>j</mi><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mi>j</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_{j=0}^{n} f_j*\\times F(n-j) x^{n-j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.24011em;vertical-align:-.43581800000000004em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.804292em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.43581800000000004em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">×</span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0746639999999998em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.824664em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span></span></span></span></span></span></span></span></span> 对零化多项式取膜后的结果，发现往后转移转移一个位置相当于整个多项式乘上一个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span></span></span></span> ， 再进行取膜。由于移动一位只会有一项多余，因此直接实现的时间复杂度依然是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span></span></span></span> 的。</p><p>至于递推式的零化多项式……应该已经烂大街了。</p><p>其实也可以直接理解成直接递推……</p><p>当然，我们还有另外一个做法。</p><p>在阐述这个做法之前，我们假设一个前提：<strong>我们知道递推式的通项公式</strong>，即 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><mo>×</mo><msubsup><mi>b</mi><mi>i</mi><mi>n</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">F(n) = \\sum_{i=1}^{m} a_i \\times b_i^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-.29971000000000003em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.804292em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29971000000000003em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.953104em;vertical-align:-.258664em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.664392em\"><span style=\"top:-2.441336em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.258664em\"><span></span></span></span></span></span></span></span></span></span></p><p>根据前缀和优化数列递推的思路，我们对于每一个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> ，都维护 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><msub><mi>f</mi><mi>j</mi></msub><mo>×</mo><msubsup><mi>b</mi><mi>i</mi><mrow><mi>n</mi><mo>−</mo><mi>j</mi></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">a_i\\sum_{j=0}^{n} f_j \\times b_i^{n-j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.24011em;vertical-align:-.43581800000000004em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.804292em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.43581800000000004em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.219436em;vertical-align:-.276864em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.942572em\"><span style=\"top:-2.4231360000000004em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span><span style=\"top:-3.1809080000000005em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.276864em\"><span></span></span></span></span></span></span></span></span></span> ， 发现移动一位只需要乘上一个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">b_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.84444em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span> 即可，非常方便。</p><blockquote><p>值得注意的是，这个做法可以进行一个小小的扩展。</p><p>比如解决下面一个问题</p></blockquote><blockquote><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span></span></span></span> 是一个递推式</p><p><code>Alice</code> 还有一个递推式</p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f_0 = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span></span></p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>f</mi><mi>i</mi></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>f</mi><mi>j</mi></msub><mo>×</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mi>j</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>c</mi><mi>o</mi><msub><mi>l</mi><mi>i</mi></msub><mi mathvariant=\"normal\">≠</mi><mi>c</mi><mi>o</mi><msub><mi>l</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">f_i = \\sum_{j=0}^{i-1}f_j \\times F(i-j),col_i\\ne col_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.2254460000000007em;vertical-align:-1.4137769999999998em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8116690000000006em\"><span style=\"top:-1.872331em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.050005em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4137769999999998em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:-.10764em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:-.01968em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.69444em\"><span style=\"top:-3em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.19444em\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.980548em;vertical-align:-.286108em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.311664em\"><span style=\"top:-2.5500000000000003em;margin-left:-.01968em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.286108em\"><span></span></span></span></span></span></span></span></span></span></span></p><p>其中 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo separator=\"true\">,</mo><mrow><mi>c</mi><mi>o</mi><msub><mi>l</mi><mi>n</mi></msub></mrow></mrow><annotation encoding=\"application/x-tex\">n,m,{col_n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:-.01968em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span></span> 是已知的。</p><p><code>Alice</code> 想知道 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>×</mo><msup><mi>i</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mtext> </mtext><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">(\\sum_{i=1}^{n}f[i]\\times i^2) \\bmod P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-.29971000000000003em\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.804292em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29971000000000003em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span><span class=\"mbin\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mspace\" style=\"margin-right:.05555555555555555em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span></span></span></span>，请你帮助他求出这个值。</p></blockquote><p>关于求递推式通项公式，可以参考 <strong>具体数学 7.3 解递归式</strong></p><blockquote><p>如果保证特征多项式没有重根或许会好做很多。</p></blockquote><p>当递推式是固定的情况下，可以手动解通项公式。</p><p>感谢 <code>zzd233</code> 与我交流讨论相关问题与解法</p>"},{"title":"生成函数学习笔记","_content":"\n挖坑不填\n\n等有空了大概会填的吧\n\n<!--more-->\n\n#### 生成函数定义\n\n$G(x) = g_0+g_1x+g_2x^2+…… = \\sum_{n>=0} g_nx^n$，我们称$G$或者$G(z)$是数列$<g_0,g_1,...>$的生成函数。\n\n#### 常用生成函数\n\n$$\n\\sum_{n>=0}[n=0]z^n = 1\\\\\n\\sum_{n>=0}z^n = \\frac{1}{1-z}\\\\\\sum_{n>=0}(-1)^nz^n = \\frac{1}{1+z}\\\\\\sum_{n>=0}\\binom{m}{i}z^n = (1+z)^m\\\\\\sum_{n>=0}\\binom{n+m-1}{n}z^n = \\frac{1}{(1-z)^m}\\\\\\sum_{n>=1}\\frac{1}{n}z^n = \\ln\\frac{1}{1-z}\\\\\\sum_{n>=1}\\frac{(-1)^{n+1}}{n}z^n = \\ln(1+z)\\\\\\sum_{n>=0}\\frac{1}{n!}z^n = e^x \n$$\n\n\n写到这里发现自己不会$\\ln$这玩意儿\n\n感觉自己多项式也一窍不通……发现自己$ln$是啥都不知道\n\n$exp$是怎么定义来着的?$exp(A(x)) = \\sum_{i>=0}\\frac{A^i(x)}{i!}$\n\n$ln$只知道一个结论：$ln(x) = \\frac{1}{x}$，所以$ln(f(x)) = \\int\\frac{f'(x)}{f(x)}$？大概就是对的吧\n\n把$f(x) = e^{g(x)}$代进去，发现$ln(e^{g(x)}) = \\int\\frac{e^g(x)*g'(x)}{e^{g(x)}} = g(x)$\n\n看起来非常真。嗯。\n\n#### 生成函数运算\n\n是生成函数的一些运算，大概就是多项式的一些运算。\n\n有一个就是求前缀和就是卷积上$<1 ,1,1,1,...> = \\frac{1}{1-z}$\n\n#### 简单生成函数求法\n\n举一个例子吧，比如说斐波那切数列的生成函数，因为有$f(x)=f(x-1)+f(x-2)$有$F = xF + x^2F + 1$，所以是$F = \\frac{1}{1-x-x^2}$\n\n#### 解递归式\n\n大概就是知道生成函数求通项公式，看起来在做数列题的时候可能会有点用？\n\n##### 一类特殊的生成函数\n\n大概是分母可以进行部分分式分解的\n\n一个需要证明的东西：\n\n$R(z) = \\frac{P(z)}{Q(z)}$，其中$P$,$Q$是多项式，然后要求R的第n项的系数。\n\n根据刚才的东西，我们知道\n$$\n\\frac{1}{(1-px)^{m+1}} = \\sum_{n>=0}\\binom{m+n}{m}p^nz^n\n$$\n这东西可以快速算它的一个位置上的值。\n\n然后如果是若干个上面的东西的和\n$$\n\\frac{a_1}{(1-p_1x)^{m_1}} + \\frac{a_2}{(1-p_2x)^{m_2}}+...\n$$\n也是很好求的，只需要把每一项的系数加起来就行了。\n\n然后可以证明对于$R(0) \\not= \\infty$的有理函数$R(x)$都可以表示成$R(x) = S(x) + T(x)$，其中S是上面那个形式，T是一个多项式。【不知道为什么，不会证明】\n\n所以主要是要部分分式分解。\n\n先考虑如何把下面的那些$p_i$求出来。\n\n假如$Q(x) = q_0+q_1x+...+q_mx^m | q_0\\not=0,q_m\\not=0$\n\n我们令$Q^R(x) = q_0x^m+...+q_m$\t\n\n有$Q^R(x) = q0(x-\\rho_0)(x-\\rho_1)...(x-\\rho_m)$\n\n有$Q(x) = q0(1-\\rho_0x)(1-\\rho_1x)...(1-\\rho_mx)$\n\n也就是$Q^R$的根是$Q$的根的倒数。\n\n也就是，我们对$Q^R$进行求根，就能得到这若干个$\\rho$的值，**先假设这些$\\rho$都不相同（有相同不会）**。\n\n然后是主要分解部分\n\n大概就是如果一个函数本来是\n$$\n\\frac{P(x)}{Q(x)}=\\frac{P(x)}{(1-\\rho_1x)(1-\\rho_2x)(1-\\rho_3x)...}\n$$\n那么可以把它分解成\n$$\n\\frac{a_1}{1-\\rho_1x} + \\frac{a_2}{1-\\rho_2x} ……\n$$\n其中$a_1,a_2$这些都是常数，这个东西就是可以直接算结论的了。\n\n嗯，感觉手解递推式的话上面手动分解，下面手动待定系数来求就行了。\n\n那如何用计算机来做这个部分分式分解呢？（还是要$\\rho$不同的情况）\n\n$a_i$就是$a_i = \\Large \\frac{P(\\frac{1}{\\rho_i})}{Q_i(\\frac{1}{\\rho_i})}$\n\n$Q_i(x) = Q(x) / (1-\\rho_ix)$\n\n这东西证明大概就是，把这n个点代进去，发现和原来的式子的答案都是一样的。\n\n具体就是，通分之后，只有一个乘积的式子是有值的，剩下的都是0，然后又值的那个式子和原式子是一样的。\n\n然后怎么快速计算$Q_i(\\frac{1}{\\rho_i})$\n\n这东西就直接对Q求导，然后直接把$\\frac{1}{\\rho_i}$代到$Q'$里面就行了。\n\n这东西用多项式多点求值可以在两个log的复杂度里面做出来。\n\n\n\n#### \n\n​\t\t","source":"_posts/学习笔记/Generating-function-notes.md","raw":"---\ntitle: 生成函数学习笔记\ntag:\n - 生成函数\n - 多项式\n---\n\n挖坑不填\n\n等有空了大概会填的吧\n\n<!--more-->\n\n#### 生成函数定义\n\n$G(x) = g_0+g_1x+g_2x^2+…… = \\sum_{n>=0} g_nx^n$，我们称$G$或者$G(z)$是数列$<g_0,g_1,...>$的生成函数。\n\n#### 常用生成函数\n\n$$\n\\sum_{n>=0}[n=0]z^n = 1\\\\\n\\sum_{n>=0}z^n = \\frac{1}{1-z}\\\\\\sum_{n>=0}(-1)^nz^n = \\frac{1}{1+z}\\\\\\sum_{n>=0}\\binom{m}{i}z^n = (1+z)^m\\\\\\sum_{n>=0}\\binom{n+m-1}{n}z^n = \\frac{1}{(1-z)^m}\\\\\\sum_{n>=1}\\frac{1}{n}z^n = \\ln\\frac{1}{1-z}\\\\\\sum_{n>=1}\\frac{(-1)^{n+1}}{n}z^n = \\ln(1+z)\\\\\\sum_{n>=0}\\frac{1}{n!}z^n = e^x \n$$\n\n\n写到这里发现自己不会$\\ln$这玩意儿\n\n感觉自己多项式也一窍不通……发现自己$ln$是啥都不知道\n\n$exp$是怎么定义来着的?$exp(A(x)) = \\sum_{i>=0}\\frac{A^i(x)}{i!}$\n\n$ln$只知道一个结论：$ln(x) = \\frac{1}{x}$，所以$ln(f(x)) = \\int\\frac{f'(x)}{f(x)}$？大概就是对的吧\n\n把$f(x) = e^{g(x)}$代进去，发现$ln(e^{g(x)}) = \\int\\frac{e^g(x)*g'(x)}{e^{g(x)}} = g(x)$\n\n看起来非常真。嗯。\n\n#### 生成函数运算\n\n是生成函数的一些运算，大概就是多项式的一些运算。\n\n有一个就是求前缀和就是卷积上$<1 ,1,1,1,...> = \\frac{1}{1-z}$\n\n#### 简单生成函数求法\n\n举一个例子吧，比如说斐波那切数列的生成函数，因为有$f(x)=f(x-1)+f(x-2)$有$F = xF + x^2F + 1$，所以是$F = \\frac{1}{1-x-x^2}$\n\n#### 解递归式\n\n大概就是知道生成函数求通项公式，看起来在做数列题的时候可能会有点用？\n\n##### 一类特殊的生成函数\n\n大概是分母可以进行部分分式分解的\n\n一个需要证明的东西：\n\n$R(z) = \\frac{P(z)}{Q(z)}$，其中$P$,$Q$是多项式，然后要求R的第n项的系数。\n\n根据刚才的东西，我们知道\n$$\n\\frac{1}{(1-px)^{m+1}} = \\sum_{n>=0}\\binom{m+n}{m}p^nz^n\n$$\n这东西可以快速算它的一个位置上的值。\n\n然后如果是若干个上面的东西的和\n$$\n\\frac{a_1}{(1-p_1x)^{m_1}} + \\frac{a_2}{(1-p_2x)^{m_2}}+...\n$$\n也是很好求的，只需要把每一项的系数加起来就行了。\n\n然后可以证明对于$R(0) \\not= \\infty$的有理函数$R(x)$都可以表示成$R(x) = S(x) + T(x)$，其中S是上面那个形式，T是一个多项式。【不知道为什么，不会证明】\n\n所以主要是要部分分式分解。\n\n先考虑如何把下面的那些$p_i$求出来。\n\n假如$Q(x) = q_0+q_1x+...+q_mx^m | q_0\\not=0,q_m\\not=0$\n\n我们令$Q^R(x) = q_0x^m+...+q_m$\t\n\n有$Q^R(x) = q0(x-\\rho_0)(x-\\rho_1)...(x-\\rho_m)$\n\n有$Q(x) = q0(1-\\rho_0x)(1-\\rho_1x)...(1-\\rho_mx)$\n\n也就是$Q^R$的根是$Q$的根的倒数。\n\n也就是，我们对$Q^R$进行求根，就能得到这若干个$\\rho$的值，**先假设这些$\\rho$都不相同（有相同不会）**。\n\n然后是主要分解部分\n\n大概就是如果一个函数本来是\n$$\n\\frac{P(x)}{Q(x)}=\\frac{P(x)}{(1-\\rho_1x)(1-\\rho_2x)(1-\\rho_3x)...}\n$$\n那么可以把它分解成\n$$\n\\frac{a_1}{1-\\rho_1x} + \\frac{a_2}{1-\\rho_2x} ……\n$$\n其中$a_1,a_2$这些都是常数，这个东西就是可以直接算结论的了。\n\n嗯，感觉手解递推式的话上面手动分解，下面手动待定系数来求就行了。\n\n那如何用计算机来做这个部分分式分解呢？（还是要$\\rho$不同的情况）\n\n$a_i$就是$a_i = \\Large \\frac{P(\\frac{1}{\\rho_i})}{Q_i(\\frac{1}{\\rho_i})}$\n\n$Q_i(x) = Q(x) / (1-\\rho_ix)$\n\n这东西证明大概就是，把这n个点代进去，发现和原来的式子的答案都是一样的。\n\n具体就是，通分之后，只有一个乘积的式子是有值的，剩下的都是0，然后又值的那个式子和原式子是一样的。\n\n然后怎么快速计算$Q_i(\\frac{1}{\\rho_i})$\n\n这东西就直接对Q求导，然后直接把$\\frac{1}{\\rho_i}$代到$Q'$里面就行了。\n\n这东西用多项式多点求值可以在两个log的复杂度里面做出来。\n\n\n\n#### \n\n​\t\t","slug":"学习笔记/Generating-function-notes","published":1,"date":"2021-08-28T13:02:40.635Z","updated":"2021-08-28T13:02:40.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvso34z001svfnugmx04pyy","content":"<p>挖坑不填 </p><p> 等有空了大概会填的吧 </p><a id=\"more\"></a><h4 id=\"生成函数定义\"><a class=\"markdownIt-Anchor\" href=\"# 生成函数定义\"></a> 生成函数定义</h4><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>g</mi><mn>0</mn></msub><mo>+</mo><msub><mi>g</mi><mn>1</mn></msub><mi>x</mi><mo>+</mo><msub><mi>g</mi><mn>2</mn></msub><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mo>…</mo><mo>…</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow></msub><msub><mi>g</mi><mi>n</mi></msub><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">G(x) = g_0+g_1x+g_2x^2+…… = \\sum_{n&gt;=0} g_nx^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">G</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.7777700000000001em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.7777700000000001em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.07708em;vertical-align:-.32708000000000004em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15139799999999992em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.32708000000000004em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.664392em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span>，我们称<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">G</span></span></span></span> 或者 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G(z)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">G</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"mclose\">)</span></span></span></span> 是数列 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>&lt;</mo><msub><mi>g</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>g</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>&gt;</mo></mrow><annotation encoding=\"application/x-tex\">&lt;g_0,g_1,...&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.5782em;vertical-align:-.0391em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.7335400000000001em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span></span></span></span> 的生成函数。</p><h4 id=\"常用生成函数\"><a class=\"markdownIt-Anchor\" href=\"# 常用生成函数\"></a> 常用生成函数 </h4><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><munder><mo>∑</mo><mrow><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow></munder><mo stretchy=\"false\">[</mo><mi>n</mi><mo>=</mo><mn>0</mn><mo stretchy=\"false\">]</mo><msup><mi>z</mi><mi>n</mi></msup><mo>=</mo><mn>1</mn><mspace linebreak=\"newline\"></mspace><munder><mo>∑</mo><mrow><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow></munder><msup><mi>z</mi><mi>n</mi></msup><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>z</mi></mrow></mfrac><mspace linebreak=\"newline\"></mspace><munder><mo>∑</mo><mrow><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow></munder><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi>n</mi></msup><msup><mi>z</mi><mi>n</mi></msup><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><mi>z</mi></mrow></mfrac><mspace linebreak=\"newline\"></mspace><munder><mo>∑</mo><mrow><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow></munder><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mi>m</mi><mi>i</mi></mfrac><mo fence=\"true\">)</mo></mrow><msup><mi>z</mi><mi>n</mi></msup><mo>=</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>z</mi><msup><mo stretchy=\"false\">)</mo><mi>m</mi></msup><mspace linebreak=\"newline\"></mspace><munder><mo>∑</mo><mrow><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow></munder><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>n</mi><mo>+</mo><mi>m</mi><mo>−</mo><mn>1</mn></mrow><mi>n</mi></mfrac><mo fence=\"true\">)</mo></mrow><msup><mi>z</mi><mi>n</mi></msup><mo>=</mo><mfrac><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>z</mi><msup><mo stretchy=\"false\">)</mo><mi>m</mi></msup></mrow></mfrac><mspace linebreak=\"newline\"></mspace><munder><mo>∑</mo><mrow><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>1</mn></mrow></munder><mfrac><mn>1</mn><mi>n</mi></mfrac><msup><mi>z</mi><mi>n</mi></msup><mo>=</mo><mi>ln</mi><mo>⁡</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>z</mi></mrow></mfrac><mspace linebreak=\"newline\"></mspace><munder><mo>∑</mo><mrow><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>1</mn></mrow></munder><mfrac><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><mi>n</mi></mfrac><msup><mi>z</mi><mi>n</mi></msup><mo>=</mo><mi>ln</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><munder><mo>∑</mo><mrow><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow></munder><mfrac><mn>1</mn><mrow><mi>n</mi><mo stretchy=\"false\">!</mo></mrow></mfrac><msup><mi>z</mi><mi>n</mi></msup><mo>=</mo><msup><mi>e</mi><mi>x</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_{n&gt;=0}[n=0]z^n = 1\\\\ \\sum_{n&gt;=0}z^n = \\frac{1}{1-z}\\\\\\sum_{n&gt;=0}(-1)^nz^n = \\frac{1}{1+z}\\\\\\sum_{n&gt;=0}\\binom{m}{i}z^n = (1+z)^m\\\\\\sum_{n&gt;=0}\\binom{n+m-1}{n}z^n = \\frac{1}{(1-z)^m}\\\\\\sum_{n&gt;=1}\\frac{1}{n}z^n = \\ln\\frac{1}{1-z}\\\\\\sum_{n&gt;=1}\\frac{(-1)^{n+1}}{n}z^n = \\ln(1+z)\\\\\\sum_{n&gt;=0}\\frac{1}{n!}z^n = e^x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.344488em;vertical-align:-1.294483em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em\"><span style=\"top:-1.8828869999999998em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.294483em\"><span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:2.344488em;vertical-align:-1.294483em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em\"><span style=\"top:-1.8828869999999998em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.294483em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.09077em;vertical-align:-.7693300000000001em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7693300000000001em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:2.344488em;vertical-align:-1.294483em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em\"><span style=\"top:-1.8828869999999998em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.294483em\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.09077em;vertical-align:-.7693300000000001em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7693300000000001em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:2.744483em;vertical-align:-1.294483em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em\"><span style=\"top:-1.8828869999999998em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.294483em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0\"><span class=\"delimsizing size3\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1075599999999999em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.686em\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:2.744483em;vertical-align:-1.294483em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em\"><span style=\"top:-1.8828869999999998em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.294483em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0\"><span class=\"delimsizing size3\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.686em\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.25744em;vertical-align:-.936em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.590392em\"><span style=\"top:-2.9890000000000003em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.936em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:2.615923em;vertical-align:-1.294483em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em\"><span style=\"top:-1.8828869999999998em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.294483em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.686em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.09077em;vertical-align:-.7693300000000001em\"></span><span class=\"mop\">ln</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7693300000000001em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:2.785591em;vertical-align:-1.294483em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em\"><span style=\"top:-1.8828869999999998em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.294483em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.686em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mop\">ln</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:2.615923em;vertical-align:-1.294483em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em\"><span style=\"top:-1.8828869999999998em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.294483em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"mclose\">!</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.686em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.7143919999999999em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span></span></span></span></span></span></span></span></span></p><p> 写到这里发现自己不会 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ln</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\ln</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.69444em;vertical-align:0\"></span><span class=\"mop\">ln</span></span></span></span> 这玩意儿 </p><p> 感觉自己多项式也一窍不通……发现自己 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">ln</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">n</span></span></span></span> 是啥都不知道 </p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>e</mi><mi>x</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">exp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.625em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">p</span></span></span></span> 是怎么定义来着的?<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>i</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow></msub><mfrac><mrow><msup><mi>A</mi><mi>i</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>i</mi><mo stretchy=\"false\">!</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">exp(A(x)) = \\sum_{i&gt;=0}\\frac{A^i(x)}{i!}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.46146em;vertical-align:-.345em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.16195399999999993em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.32708000000000004em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.11646em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mclose mtight\">!</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.485em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.9020857142857143em\"><span style=\"top:-2.931em;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.5em\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.345em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">ln</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">n</span></span></span></span>只知道一个结论：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>x</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">ln(x) = \\frac{1}{x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-.345em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.845108em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.345em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>，所以 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mo>∫</mo><mfrac><mrow><msup><mi>f</mi><mo mathvariant=\"normal\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">ln(f(x)) = \\int\\frac{f&#x27;(x)}{f(x)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.58448em;vertical-align:-.52em\"></span><span class=\"mop op-symbol small-op\" style=\"margin-right:.19445em;position:relative;top:-.0005599999999999772em\">∫</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.06448em\"><span style=\"top:-2.655em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.10764em\">f</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.485em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8278285714285715em\"><span style=\"top:-2.931em;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.5em\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.52em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>？大概就是对的吧</p><p> 把<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>e</mi><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">f(x) = e^{g(x)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.8879999999999999em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8879999999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.03588em\">g</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span>代进去，发现 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>n</mi><mo stretchy=\"false\">(</mo><msup><mi>e</mi><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mo>∫</mo><mfrac><mrow><msup><mi>e</mi><mi>g</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><msup><mi>g</mi><mo mathvariant=\"normal\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><msup><mi>e</mi><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></msup></mfrac><mo>=</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">ln(e^{g(x)}) = \\int\\frac{e^g(x)*g&#x27;(x)}{e^{g(x)}} = g(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8879999999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.03588em\">g</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.449905em;vertical-align:-.38542499999999996em\"></span><span class=\"mop op-symbol small-op\" style=\"margin-right:.19445em;position:relative;top:-.0005599999999999772em\">∫</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.06448em\"><span style=\"top:-2.614575em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8220357142857143em\"><span style=\"top:-2.8220357142857138em;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.5357142857142856em\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.03588em\">g</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.485em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7385428571428572em\"><span style=\"top:-2.931em;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.5em\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.03588em\">g</span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\">)</span><span class=\"mbin mtight\">∗</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.03588em\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8278285714285715em\"><span style=\"top:-2.931em;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.5em\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.38542499999999996em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span></p><p> 看起来非常真。嗯。</p><h4 id=\"生成函数运算\"><a class=\"markdownIt-Anchor\" href=\"# 生成函数运算\"></a> 生成函数运算 </h4><p> 是生成函数的一些运算，大概就是多项式的一些运算。</p><p>有一个就是求前缀和就是卷积上 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>&lt;</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>&gt;</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>z</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">&lt;1 ,1,1,1,...&gt; = \\frac{1}{1-z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.5782em;vertical-align:-.0391em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.8388800000000001em;vertical-align:-.19444em\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2484389999999999em;vertical-align:-.403331em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.845108em\"><span style=\"top:-2.655em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.04398em\">z</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.403331em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></p><h4 id=\"简单生成函数求法\"><a class=\"markdownIt-Anchor\" href=\"# 简单生成函数求法\"></a> 简单生成函数求法</h4><p> 举一个例子吧，比如说斐波那切数列的生成函数，因为有 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)=f(x-1)+f(x-2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span> 有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo>=</mo><mi>x</mi><mi>F</mi><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup><mi>F</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">F = xF + x^2F + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.76666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.897438em;vertical-align:-.08333em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span>，所以是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>x</mi><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">F = \\frac{1}{1-x-x^2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2484389999999999em;vertical-align:-.403331em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.845108em\"><span style=\"top:-2.655em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7463142857142857em\"><span style=\"top:-2.786em;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.5em\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.403331em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></p><h4 id=\"解递归式\"><a class=\"markdownIt-Anchor\" href=\"# 解递归式\"></a> 解递归式</h4><p> 大概就是知道生成函数求通项公式，看起来在做数列题的时候可能会有点用？</p><h5 id=\"一类特殊的生成函数\"><a class=\"markdownIt-Anchor\" href=\"# 一类特殊的生成函数\"></a> 一类特殊的生成函数 </h5><p> 大概是分母可以进行部分分式分解的 </p><p> 一个需要证明的东西：</p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">R(z) = \\frac{P(z)}{Q(z)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.00773em\">R</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.53em;vertical-align:-.52em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em\"><span style=\"top:-2.655em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">Q</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.04398em\">z</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.485em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.13889em\">P</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.04398em\">z</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.52em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>，其中 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8777699999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">Q</span></span></span></span> 是多项式，然后要求 R 的第 n 项的系数。</p><p>根据刚才的东西，我们知道 </p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mrow><mi>m</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow></mfrac><mo>=</mo><munder><mo>∑</mo><mrow><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow></munder><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>m</mi><mo>+</mo><mi>n</mi></mrow><mi>m</mi></mfrac><mo fence=\"true\">)</mo></mrow><msup><mi>p</mi><mi>n</mi></msup><msup><mi>z</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{(1-px)^{m+1}} = \\sum_{n&gt;=0}\\binom{m+n}{m}p^nz^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.25744em;vertical-align:-.936em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.740108em\"><span style=\"top:-2.989em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.936em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.744483em;vertical-align:-1.294483em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em\"><span style=\"top:-1.8828869999999998em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.294483em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0\"><span class=\"delimsizing size3\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.26033em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">m</span></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord mathdefault\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.686em\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span></p><p> 这东西可以快速算它的一个位置上的值。</p><p>然后如果是若干个上面的东西的和 </p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><msub><mi>a</mi><mn>1</mn></msub><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>p</mi><mn>1</mn></msub><mi>x</mi><msup><mo stretchy=\"false\">)</mo><msub><mi>m</mi><mn>1</mn></msub></msup></mrow></mfrac><mo>+</mo><mfrac><msub><mi>a</mi><mn>2</mn></msub><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>p</mi><mn>2</mn></msub><mi>x</mi><msup><mo stretchy=\"false\">)</mo><msub><mi>m</mi><mn>2</mn></msub></msup></mrow></mfrac><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\frac{a_1}{(1-p_1x)^{m_1}} + \\frac{a_2}{(1-p_2x)^{m_2}}+...</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.04356em;vertical-align:-.936em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1075599999999999em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.590392em\"><span style=\"top:-2.989em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31731428571428577em\"><span style=\"top:-2.357em;margin-left:0;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.5em\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.143em\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.936em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.04356em;vertical-align:-.936em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1075599999999999em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.590392em\"><span style=\"top:-2.989em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31731428571428577em\"><span style=\"top:-2.357em;margin-left:0;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.5em\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.143em\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.936em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.10556em;vertical-align:0\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span></span></span></span></span></p><p> 也是很好求的，只需要把每一项的系数加起来就行了。</p><p>然后可以证明对于 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>≠</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">R(0) \\not= \\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.00773em\">R</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.69444em\"><span style=\"top:-3em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.19444em\"><span></span></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord\">∞</span></span></span></span> 的有理函数 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.00773em\">R</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> 都可以表示成 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>S</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R(x) = S(x) + T(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.00773em\">R</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05764em\">S</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>，其中 S 是上面那个形式，T 是一个多项式。【不知道为什么，不会证明】</p><p> 所以主要是要部分分式分解。</p><p>先考虑如何把下面的那些 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">p_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.625em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span> 求出来。</p><p>假如 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>q</mi><mn>0</mn></msub><mo>+</mo><msub><mi>q</mi><mn>1</mn></msub><mi>x</mi><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>+</mo><msub><mi>q</mi><mi>m</mi></msub><msup><mi>x</mi><mi>m</mi></msup><mi mathvariant=\"normal\">∣</mi><msub><mi>q</mi><mn>0</mn></msub><mo>≠</mo><mn>0</mn><mo separator=\"true\">,</mo><msub><mi>q</mi><mi>m</mi></msub><mo>≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">Q(x) = q_0+q_1x+...+q_mx^m | q_0\\not=0,q_m\\not=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.7777700000000001em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.7777700000000001em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.664392em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.69444em\"><span style=\"top:-3em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.19444em\"><span></span></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.69444em\"><span style=\"top:-3em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.19444em\"><span></span></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">0</span></span></span></span></p><p> 我们令 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>Q</mi><mi>R</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>q</mi><mn>0</mn></msub><msup><mi>x</mi><mi>m</mi></msup><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>+</mo><msub><mi>q</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">Q^R(x) = q_0x^m+...+q_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">Q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8413309999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.00773em\">R</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.858832em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.664392em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.625em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span></p><p> 有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>Q</mi><mi>R</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>q</mi><mn>0</mn><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><msub><mi>ρ</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><msub><mi>ρ</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><msub><mi>ρ</mi><mi>m</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Q^R(x) = q0(x-\\rho_0)(x-\\rho_1)...(x-\\rho_m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">Q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8413309999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.00773em\">R</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"mord\">0</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p><p>有 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>q</mi><mn>0</mn><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>ρ</mi><mn>0</mn></msub><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>ρ</mi><mn>1</mn></msub><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>ρ</mi><mi>m</mi></msub><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Q(x) = q0(1-\\rho_0x)(1-\\rho_1x)...(1-\\rho_mx)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"mord\">0</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span></p><p> 也就是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>Q</mi><mi>R</mi></msup></mrow><annotation encoding=\"application/x-tex\">Q^R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.035771em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">Q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8413309999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.00773em\">R</span></span></span></span></span></span></span></span></span></span></span> 的根是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8777699999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">Q</span></span></span></span> 的根的倒数。</p><p>也就是，我们对 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>Q</mi><mi>R</mi></msup></mrow><annotation encoding=\"application/x-tex\">Q^R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.035771em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">Q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8413309999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.00773em\">R</span></span></span></span></span></span></span></span></span></span></span> 进行求根，就能得到这若干个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.625em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">ρ</span></span></span></span> 的值，<strong>先假设这些 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.625em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">ρ</span></span></span></span> 都不相同（有相同不会）</strong>。</p><p>然后是主要分解部分 </p><p> 大概就是如果一个函数本来是 </p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>ρ</mi><mn>1</mn></msub><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>ρ</mi><mn>2</mn></msub><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>ρ</mi><mn>3</mn></msub><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{P(x)}{Q(x)}=\\frac{P(x)}{(1-\\rho_1x)(1-\\rho_2x)(1-\\rho_3x)...}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.363em;vertical-align:-.936em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.936em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.363em;vertical-align:-.936em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.936em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p><p> 那么可以把它分解成 </p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><msub><mi>a</mi><mn>1</mn></msub><mrow><mn>1</mn><mo>−</mo><msub><mi>ρ</mi><mn>1</mn></msub><mi>x</mi></mrow></mfrac><mo>+</mo><mfrac><msub><mi>a</mi><mn>2</mn></msub><mrow><mn>1</mn><mo>−</mo><msub><mi>ρ</mi><mn>2</mn></msub><mi>x</mi></mrow></mfrac><mo>…</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">\\frac{a_1}{1-\\rho_1x} + \\frac{a_2}{1-\\rho_2x} ……</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.988em;vertical-align:-.8804400000000001em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1075599999999999em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8804400000000001em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.988em;vertical-align:-.8804400000000001em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1075599999999999em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8804400000000001em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"minner\">…</span></span></span></span></span></p><p> 其中 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">a_1,a_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.625em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span> 这些都是常数，这个东西就是可以直接算结论的了。</p><p>嗯，感觉手解递推式的话上面手动分解，下面手动待定系数来求就行了。</p><p>那如何用计算机来做这个部分分式分解呢？（还是要 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.625em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">ρ</span></span></span></span> 不同的情况）</p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.58056em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span>就是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><mstyle mathsize=\"1.44em\"><mfrac><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mfrac><mn>1</mn><msub><mi>ρ</mi><mi>i</mi></msub></mfrac><mo stretchy=\"false\">)</mo></mrow><mrow><msub><mi>Q</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mfrac><mn>1</mn><msub><mi>ρ</mi><mi>i</mi></msub></mfrac><mo stretchy=\"false\">)</mo></mrow></mfrac></mstyle></mrow><annotation encoding=\"application/x-tex\">a_i = \\Large \\frac{P(\\frac{1}{\\rho_i})}{Q_i(\\frac{1}{\\rho_i})}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.58056em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9936239999999996em;vertical-align:-1.1368119999999997em\"></span><span class=\"mord sizing reset-size6 size8\"><span class=\"mopen nulldelimiter sizing reset-size8 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2894527777777778em\"><span style=\"top:-2.6031194444444448em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size8 size6 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.845108em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.3448em\"><span style=\"top:-2.3852800000000003em;margin-left:0;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"mord mathdefault mtight\">i</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31472em\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.5653039999999999em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.7025722222222224em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size8 size6 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.13889em\">P</span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.845108em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.3448em\"><span style=\"top:-2.3852800000000003em;margin-left:0;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"mord mathdefault mtight\">i</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31472em\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.5653039999999999em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7894527777777777em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size8 size6\"></span></span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>Q</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>ρ</mi><mi>i</mi></msub><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Q_i(x) = Q(x) / (1-\\rho_ix)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span></p><p> 这东西证明大概就是，把这 n 个点代进去，发现和原来的式子的答案都是一样的。</p><p>具体就是，通分之后，只有一个乘积的式子是有值的，剩下的都是 0，然后又值的那个式子和原式子是一样的。</p><p>然后怎么快速计算 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>Q</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mfrac><mn>1</mn><msub><mi>ρ</mi><mi>i</mi></msub></mfrac><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Q_i(\\frac{1}{\\rho_i})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.326216em;vertical-align:-.481108em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.845108em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.3280857142857143em\"><span style=\"top:-2.357em;margin-left:0;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.5em\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.143em\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.481108em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span></span></span></span></p><p> 这东西就直接对 Q 求导，然后直接把 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mn>1</mn><msub><mi>ρ</mi><mi>i</mi></msub></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{\\rho_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.326216em;vertical-align:-.481108em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.845108em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.3280857142857143em\"><span style=\"top:-2.357em;margin-left:0;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.5em\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.143em\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.481108em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> 代到 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>Q</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">Q&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.946332em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">Q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.751892em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> 里面就行了。</p><p>这东西用多项式多点求值可以在两个 log 的复杂度里面做出来。</p><h4><a class=\"markdownIt-Anchor\" href=\"#\"></a></h4><p>​</p>","site":{"data":{}},"excerpt":"<p>挖坑不填</p><p>等有空了大概会填的吧</p>","more":"<h4 id=\"生成函数定义\"><a class=\"markdownIt-Anchor\" href=\"#生成函数定义\"></a> 生成函数定义</h4><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>g</mi><mn>0</mn></msub><mo>+</mo><msub><mi>g</mi><mn>1</mn></msub><mi>x</mi><mo>+</mo><msub><mi>g</mi><mn>2</mn></msub><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mo>…</mo><mo>…</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow></msub><msub><mi>g</mi><mi>n</mi></msub><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">G(x) = g_0+g_1x+g_2x^2+…… = \\sum_{n&gt;=0} g_nx^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">G</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.7777700000000001em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.7777700000000001em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.07708em;vertical-align:-.32708000000000004em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15139799999999992em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.32708000000000004em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.664392em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span>，我们称<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">G</span></span></span></span>或者<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G(z)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">G</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"mclose\">)</span></span></span></span>是数列<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>&lt;</mo><msub><mi>g</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>g</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>&gt;</mo></mrow><annotation encoding=\"application/x-tex\">&lt;g_0,g_1,...&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.5782em;vertical-align:-.0391em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.7335400000000001em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span></span></span></span>的生成函数。</p><h4 id=\"常用生成函数\"><a class=\"markdownIt-Anchor\" href=\"#常用生成函数\"></a> 常用生成函数</h4><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><munder><mo>∑</mo><mrow><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow></munder><mo stretchy=\"false\">[</mo><mi>n</mi><mo>=</mo><mn>0</mn><mo stretchy=\"false\">]</mo><msup><mi>z</mi><mi>n</mi></msup><mo>=</mo><mn>1</mn><mspace linebreak=\"newline\"></mspace><munder><mo>∑</mo><mrow><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow></munder><msup><mi>z</mi><mi>n</mi></msup><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>z</mi></mrow></mfrac><mspace linebreak=\"newline\"></mspace><munder><mo>∑</mo><mrow><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow></munder><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi>n</mi></msup><msup><mi>z</mi><mi>n</mi></msup><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><mi>z</mi></mrow></mfrac><mspace linebreak=\"newline\"></mspace><munder><mo>∑</mo><mrow><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow></munder><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mi>m</mi><mi>i</mi></mfrac><mo fence=\"true\">)</mo></mrow><msup><mi>z</mi><mi>n</mi></msup><mo>=</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>z</mi><msup><mo stretchy=\"false\">)</mo><mi>m</mi></msup><mspace linebreak=\"newline\"></mspace><munder><mo>∑</mo><mrow><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow></munder><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>n</mi><mo>+</mo><mi>m</mi><mo>−</mo><mn>1</mn></mrow><mi>n</mi></mfrac><mo fence=\"true\">)</mo></mrow><msup><mi>z</mi><mi>n</mi></msup><mo>=</mo><mfrac><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>z</mi><msup><mo stretchy=\"false\">)</mo><mi>m</mi></msup></mrow></mfrac><mspace linebreak=\"newline\"></mspace><munder><mo>∑</mo><mrow><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>1</mn></mrow></munder><mfrac><mn>1</mn><mi>n</mi></mfrac><msup><mi>z</mi><mi>n</mi></msup><mo>=</mo><mi>ln</mi><mo>⁡</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>z</mi></mrow></mfrac><mspace linebreak=\"newline\"></mspace><munder><mo>∑</mo><mrow><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>1</mn></mrow></munder><mfrac><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><mi>n</mi></mfrac><msup><mi>z</mi><mi>n</mi></msup><mo>=</mo><mi>ln</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><munder><mo>∑</mo><mrow><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow></munder><mfrac><mn>1</mn><mrow><mi>n</mi><mo stretchy=\"false\">!</mo></mrow></mfrac><msup><mi>z</mi><mi>n</mi></msup><mo>=</mo><msup><mi>e</mi><mi>x</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_{n&gt;=0}[n=0]z^n = 1\\\\ \\sum_{n&gt;=0}z^n = \\frac{1}{1-z}\\\\\\sum_{n&gt;=0}(-1)^nz^n = \\frac{1}{1+z}\\\\\\sum_{n&gt;=0}\\binom{m}{i}z^n = (1+z)^m\\\\\\sum_{n&gt;=0}\\binom{n+m-1}{n}z^n = \\frac{1}{(1-z)^m}\\\\\\sum_{n&gt;=1}\\frac{1}{n}z^n = \\ln\\frac{1}{1-z}\\\\\\sum_{n&gt;=1}\\frac{(-1)^{n+1}}{n}z^n = \\ln(1+z)\\\\\\sum_{n&gt;=0}\\frac{1}{n!}z^n = e^x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.344488em;vertical-align:-1.294483em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em\"><span style=\"top:-1.8828869999999998em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.294483em\"><span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:2.344488em;vertical-align:-1.294483em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em\"><span style=\"top:-1.8828869999999998em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.294483em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.09077em;vertical-align:-.7693300000000001em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7693300000000001em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:2.344488em;vertical-align:-1.294483em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em\"><span style=\"top:-1.8828869999999998em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.294483em\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.09077em;vertical-align:-.7693300000000001em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7693300000000001em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:2.744483em;vertical-align:-1.294483em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em\"><span style=\"top:-1.8828869999999998em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.294483em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0\"><span class=\"delimsizing size3\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1075599999999999em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.686em\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:2.744483em;vertical-align:-1.294483em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em\"><span style=\"top:-1.8828869999999998em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.294483em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0\"><span class=\"delimsizing size3\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.686em\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.25744em;vertical-align:-.936em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.590392em\"><span style=\"top:-2.9890000000000003em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.936em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:2.615923em;vertical-align:-1.294483em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em\"><span style=\"top:-1.8828869999999998em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.294483em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.686em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.09077em;vertical-align:-.7693300000000001em\"></span><span class=\"mop\">ln</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7693300000000001em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:2.785591em;vertical-align:-1.294483em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em\"><span style=\"top:-1.8828869999999998em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.294483em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.686em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mop\">ln</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:2.615923em;vertical-align:-1.294483em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em\"><span style=\"top:-1.8828869999999998em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.294483em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"mclose\">!</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.686em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.7143919999999999em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span></span></span></span></span></span></span></span></span></p><p>写到这里发现自己不会<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ln</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\ln</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.69444em;vertical-align:0\"></span><span class=\"mop\">ln</span></span></span></span>这玩意儿</p><p>感觉自己多项式也一窍不通……发现自己<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">ln</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">n</span></span></span></span>是啥都不知道</p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>e</mi><mi>x</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">exp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.625em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">p</span></span></span></span>是怎么定义来着的?<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>i</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow></msub><mfrac><mrow><msup><mi>A</mi><mi>i</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>i</mi><mo stretchy=\"false\">!</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">exp(A(x)) = \\sum_{i&gt;=0}\\frac{A^i(x)}{i!}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.46146em;vertical-align:-.345em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.16195399999999993em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.32708000000000004em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.11646em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mclose mtight\">!</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.485em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.9020857142857143em\"><span style=\"top:-2.931em;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.5em\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.345em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">ln</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">n</span></span></span></span>只知道一个结论：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>x</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">ln(x) = \\frac{1}{x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-.345em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.845108em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.345em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>，所以<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mo>∫</mo><mfrac><mrow><msup><mi>f</mi><mo mathvariant=\"normal\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">ln(f(x)) = \\int\\frac{f&#x27;(x)}{f(x)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.58448em;vertical-align:-.52em\"></span><span class=\"mop op-symbol small-op\" style=\"margin-right:.19445em;position:relative;top:-.0005599999999999772em\">∫</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.06448em\"><span style=\"top:-2.655em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.10764em\">f</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.485em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.10764em\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8278285714285715em\"><span style=\"top:-2.931em;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.5em\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.52em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>？大概就是对的吧</p><p>把<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>e</mi><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">f(x) = e^{g(x)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.8879999999999999em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8879999999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.03588em\">g</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span>代进去，发现<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>n</mi><mo stretchy=\"false\">(</mo><msup><mi>e</mi><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mo>∫</mo><mfrac><mrow><msup><mi>e</mi><mi>g</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><msup><mi>g</mi><mo mathvariant=\"normal\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><msup><mi>e</mi><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></msup></mfrac><mo>=</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">ln(e^{g(x)}) = \\int\\frac{e^g(x)*g&#x27;(x)}{e^{g(x)}} = g(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8879999999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.03588em\">g</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.449905em;vertical-align:-.38542499999999996em\"></span><span class=\"mop op-symbol small-op\" style=\"margin-right:.19445em;position:relative;top:-.0005599999999999772em\">∫</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.06448em\"><span style=\"top:-2.614575em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8220357142857143em\"><span style=\"top:-2.8220357142857138em;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.5357142857142856em\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.03588em\">g</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.485em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7385428571428572em\"><span style=\"top:-2.931em;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.5em\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.03588em\">g</span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\">)</span><span class=\"mbin mtight\">∗</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.03588em\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8278285714285715em\"><span style=\"top:-2.931em;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.5em\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.38542499999999996em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span></p><p>看起来非常真。嗯。</p><h4 id=\"生成函数运算\"><a class=\"markdownIt-Anchor\" href=\"#生成函数运算\"></a> 生成函数运算</h4><p>是生成函数的一些运算，大概就是多项式的一些运算。</p><p>有一个就是求前缀和就是卷积上<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>&lt;</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>&gt;</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>z</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">&lt;1 ,1,1,1,...&gt; = \\frac{1}{1-z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.5782em;vertical-align:-.0391em\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.8388800000000001em;vertical-align:-.19444em\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2484389999999999em;vertical-align:-.403331em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.845108em\"><span style=\"top:-2.655em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.04398em\">z</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.403331em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></p><h4 id=\"简单生成函数求法\"><a class=\"markdownIt-Anchor\" href=\"#简单生成函数求法\"></a> 简单生成函数求法</h4><p>举一个例子吧，比如说斐波那切数列的生成函数，因为有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)=f(x-1)+f(x-2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span>有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo>=</mo><mi>x</mi><mi>F</mi><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup><mi>F</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">F = xF + x^2F + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.76666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.897438em;vertical-align:-.08333em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span>，所以是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>x</mi><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">F = \\frac{1}{1-x-x^2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">F</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2484389999999999em;vertical-align:-.403331em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.845108em\"><span style=\"top:-2.655em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7463142857142857em\"><span style=\"top:-2.786em;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.5em\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.403331em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></p><h4 id=\"解递归式\"><a class=\"markdownIt-Anchor\" href=\"#解递归式\"></a> 解递归式</h4><p>大概就是知道生成函数求通项公式，看起来在做数列题的时候可能会有点用？</p><h5 id=\"一类特殊的生成函数\"><a class=\"markdownIt-Anchor\" href=\"#一类特殊的生成函数\"></a> 一类特殊的生成函数</h5><p>大概是分母可以进行部分分式分解的</p><p>一个需要证明的东西：</p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">R(z) = \\frac{P(z)}{Q(z)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.00773em\">R</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.53em;vertical-align:-.52em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em\"><span style=\"top:-2.655em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">Q</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.04398em\">z</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.485em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.13889em\">P</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.04398em\">z</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.52em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>，其中<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8777699999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">Q</span></span></span></span>是多项式，然后要求R的第n项的系数。</p><p>根据刚才的东西，我们知道</p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mrow><mi>m</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow></mfrac><mo>=</mo><munder><mo>∑</mo><mrow><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow></munder><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>m</mi><mo>+</mo><mi>n</mi></mrow><mi>m</mi></mfrac><mo fence=\"true\">)</mo></mrow><msup><mi>p</mi><mi>n</mi></msup><msup><mi>z</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{(1-px)^{m+1}} = \\sum_{n&gt;=0}\\binom{m+n}{m}p^nz^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.25744em;vertical-align:-.936em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.740108em\"><span style=\"top:-2.989em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.936em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.744483em;vertical-align:-1.294483em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em\"><span style=\"top:-1.8828869999999998em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">&gt;</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.294483em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0\"><span class=\"delimsizing size3\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.26033em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">m</span></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord mathdefault\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.686em\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7143919999999999em\"><span style=\"top:-3.113em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span></p><p>这东西可以快速算它的一个位置上的值。</p><p>然后如果是若干个上面的东西的和</p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><msub><mi>a</mi><mn>1</mn></msub><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>p</mi><mn>1</mn></msub><mi>x</mi><msup><mo stretchy=\"false\">)</mo><msub><mi>m</mi><mn>1</mn></msub></msup></mrow></mfrac><mo>+</mo><mfrac><msub><mi>a</mi><mn>2</mn></msub><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>p</mi><mn>2</mn></msub><mi>x</mi><msup><mo stretchy=\"false\">)</mo><msub><mi>m</mi><mn>2</mn></msub></msup></mrow></mfrac><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\frac{a_1}{(1-p_1x)^{m_1}} + \\frac{a_2}{(1-p_2x)^{m_2}}+...</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.04356em;vertical-align:-.936em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1075599999999999em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.590392em\"><span style=\"top:-2.989em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31731428571428577em\"><span style=\"top:-2.357em;margin-left:0;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.5em\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.143em\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.936em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.04356em;vertical-align:-.936em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1075599999999999em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.590392em\"><span style=\"top:-2.989em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31731428571428577em\"><span style=\"top:-2.357em;margin-left:0;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.5em\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.143em\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.936em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.10556em;vertical-align:0\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span></span></span></span></span></p><p>也是很好求的，只需要把每一项的系数加起来就行了。</p><p>然后可以证明对于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>≠</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">R(0) \\not= \\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.00773em\">R</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.69444em\"><span style=\"top:-3em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.19444em\"><span></span></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord\">∞</span></span></span></span>的有理函数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.00773em\">R</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>都可以表示成<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>S</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R(x) = S(x) + T(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.00773em\">R</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.05764em\">S</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>，其中S是上面那个形式，T是一个多项式。【不知道为什么，不会证明】</p><p>所以主要是要部分分式分解。</p><p>先考虑如何把下面的那些<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">p_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.625em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span>求出来。</p><p>假如<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>q</mi><mn>0</mn></msub><mo>+</mo><msub><mi>q</mi><mn>1</mn></msub><mi>x</mi><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>+</mo><msub><mi>q</mi><mi>m</mi></msub><msup><mi>x</mi><mi>m</mi></msup><mi mathvariant=\"normal\">∣</mi><msub><mi>q</mi><mn>0</mn></msub><mo>≠</mo><mn>0</mn><mo separator=\"true\">,</mo><msub><mi>q</mi><mi>m</mi></msub><mo>≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">Q(x) = q_0+q_1x+...+q_mx^m | q_0\\not=0,q_m\\not=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.7777700000000001em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.7777700000000001em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.664392em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.69444em\"><span style=\"top:-3em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.19444em\"><span></span></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.69444em\"><span style=\"top:-3em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.19444em\"><span></span></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">0</span></span></span></span></p><p>我们令<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>Q</mi><mi>R</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>q</mi><mn>0</mn></msub><msup><mi>x</mi><mi>m</mi></msup><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>+</mo><msub><mi>q</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">Q^R(x) = q_0x^m+...+q_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">Q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8413309999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.00773em\">R</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.858832em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.664392em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.625em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:-.03588em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span></p><p>有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>Q</mi><mi>R</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>q</mi><mn>0</mn><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><msub><mi>ρ</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><msub><mi>ρ</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><msub><mi>ρ</mi><mi>m</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Q^R(x) = q0(x-\\rho_0)(x-\\rho_1)...(x-\\rho_m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">Q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8413309999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.00773em\">R</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"mord\">0</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p><p>有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>q</mi><mn>0</mn><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>ρ</mi><mn>0</mn></msub><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>ρ</mi><mn>1</mn></msub><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>ρ</mi><mi>m</mi></msub><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Q(x) = q0(1-\\rho_0x)(1-\\rho_1x)...(1-\\rho_mx)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"mord\">0</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.151392em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span></p><p>也就是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>Q</mi><mi>R</mi></msup></mrow><annotation encoding=\"application/x-tex\">Q^R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.035771em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">Q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8413309999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.00773em\">R</span></span></span></span></span></span></span></span></span></span></span>的根是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8777699999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">Q</span></span></span></span>的根的倒数。</p><p>也就是，我们对<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>Q</mi><mi>R</mi></msup></mrow><annotation encoding=\"application/x-tex\">Q^R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.035771em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">Q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8413309999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.00773em\">R</span></span></span></span></span></span></span></span></span></span></span>进行求根，就能得到这若干个<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.625em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">ρ</span></span></span></span>的值，<strong>先假设这些<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.625em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">ρ</span></span></span></span>都不相同（有相同不会）</strong>。</p><p>然后是主要分解部分</p><p>大概就是如果一个函数本来是</p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>ρ</mi><mn>1</mn></msub><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>ρ</mi><mn>2</mn></msub><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>ρ</mi><mn>3</mn></msub><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{P(x)}{Q(x)}=\\frac{P(x)}{(1-\\rho_1x)(1-\\rho_2x)(1-\\rho_3x)...}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.363em;vertical-align:-.936em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.936em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.363em;vertical-align:-.936em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.936em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p><p>那么可以把它分解成</p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><msub><mi>a</mi><mn>1</mn></msub><mrow><mn>1</mn><mo>−</mo><msub><mi>ρ</mi><mn>1</mn></msub><mi>x</mi></mrow></mfrac><mo>+</mo><mfrac><msub><mi>a</mi><mn>2</mn></msub><mrow><mn>1</mn><mo>−</mo><msub><mi>ρ</mi><mn>2</mn></msub><mi>x</mi></mrow></mfrac><mo>…</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">\\frac{a_1}{1-\\rho_1x} + \\frac{a_2}{1-\\rho_2x} ……</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.988em;vertical-align:-.8804400000000001em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1075599999999999em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8804400000000001em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.988em;vertical-align:-.8804400000000001em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1075599999999999em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8804400000000001em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"minner\">…</span></span></span></span></span></p><p>其中<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">a_1,a_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.625em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.30110799999999993em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span>这些都是常数，这个东西就是可以直接算结论的了。</p><p>嗯，感觉手解递推式的话上面手动分解，下面手动待定系数来求就行了。</p><p>那如何用计算机来做这个部分分式分解呢？（还是要<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.625em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">ρ</span></span></span></span>不同的情况）</p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.58056em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span></span></span></span>就是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><mstyle mathsize=\"1.44em\"><mfrac><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mfrac><mn>1</mn><msub><mi>ρ</mi><mi>i</mi></msub></mfrac><mo stretchy=\"false\">)</mo></mrow><mrow><msub><mi>Q</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mfrac><mn>1</mn><msub><mi>ρ</mi><mi>i</mi></msub></mfrac><mo stretchy=\"false\">)</mo></mrow></mfrac></mstyle></mrow><annotation encoding=\"application/x-tex\">a_i = \\Large \\frac{P(\\frac{1}{\\rho_i})}{Q_i(\\frac{1}{\\rho_i})}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.58056em;vertical-align:-.15em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9936239999999996em;vertical-align:-1.1368119999999997em\"></span><span class=\"mord sizing reset-size6 size8\"><span class=\"mopen nulldelimiter sizing reset-size8 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2894527777777778em\"><span style=\"top:-2.6031194444444448em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size8 size6 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.845108em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.3448em\"><span style=\"top:-2.3852800000000003em;margin-left:0;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"mord mathdefault mtight\">i</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31472em\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.5653039999999999em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.7025722222222224em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size8 size6 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.13889em\">P</span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.845108em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.3448em\"><span style=\"top:-2.3852800000000003em;margin-left:0;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"mord mathdefault mtight\">i</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31472em\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.5653039999999999em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.7894527777777777em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size8 size6\"></span></span></span></span></span></p><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>Q</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>ρ</mi><mi>i</mi></msub><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Q_i(x) = Q(x) / (1-\\rho_ix)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span></p><p>这东西证明大概就是，把这n个点代进去，发现和原来的式子的答案都是一样的。</p><p>具体就是，通分之后，只有一个乘积的式子是有值的，剩下的都是0，然后又值的那个式子和原式子是一样的。</p><p>然后怎么快速计算<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>Q</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mfrac><mn>1</mn><msub><mi>ρ</mi><mi>i</mi></msub></mfrac><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Q_i(\\frac{1}{\\rho_i})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.326216em;vertical-align:-.481108em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.31166399999999994em\"><span style=\"top:-2.5500000000000003em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.15em\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.845108em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.3280857142857143em\"><span style=\"top:-2.357em;margin-left:0;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.5em\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.143em\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.481108em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span></span></span></span></p><p>这东西就直接对Q求导，然后直接把<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mn>1</mn><msub><mi>ρ</mi><mi>i</mi></msub></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{\\rho_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.326216em;vertical-align:-.481108em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.845108em\"><span style=\"top:-2.6550000000000002em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.3280857142857143em\"><span style=\"top:-2.357em;margin-left:0;margin-right:.07142857142857144em\"><span class=\"pstrut\" style=\"height:2.5em\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.143em\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:.04em\"></span></span><span style=\"top:-3.394em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.481108em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>代到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>Q</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">Q&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.946332em;vertical-align:-.19444em\"></span><span class=\"mord\"><span class=\"mord mathdefault\">Q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.751892em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>里面就行了。</p><p>这东西用多项式多点求值可以在两个log的复杂度里面做出来。</p><h4><a class=\"markdownIt-Anchor\" href=\"#\"></a></h4><p>​</p>"},{"title":"后缀自动机学习笔记","_content":"\n**坑，也许不填了**\n\n### 定义\n\nS的后缀自动机的节点中包含且仅包含了S所有的子串。并且其状态最简（节点尽可能少）\n\n后缀自动机（suffix automaton，简称SAM）一般由2部分组成:**DAWG**和**Suffix Link**\n\n<!--more-->\n\n#### DAWG\n\n定义$trans[x][c]$表示从节点（状态）x，加入字符c后到达的状态，可以类比AC自动机构建出的$trie$图。但它是一个**DAG** 。从根到达某一个点的路径其实就是子串的若干字符\n\n\n\n### 概念\n\n#### 1、字符串的子串。\n\n一个状态能代表字符串的子串，根据定义可以知道所有节点代表的字符串的集合的并就是S的所有子串，容易理解每个节点代表的字符串的子串都应该是不重复的。\n\n其中一个节点能表示的子串相当于root顺着trans能走到它的一些路径\n\n> 字符串`aabaabaab`中，某一个节点x表示字符串{`aab`,`ab`,`b`}\n>\n> > 为了简化状态，一个节点可以表示多个子串，如某个节点表示{`aa`}，那么可以表示第一个a，也可以表示第二个，第四个……而且得保证之后不会再有节点表示`aa`\n\n有一个性质就是，每个串都是比它长的那一个串的后缀。而且长度相差为1。\n\n#### 2、max和min\n\n定义max为某个串能表示的所有子串中长度最长的，min表示能表示的串中长度最短的。\n\n注意，min不一定为1。\n\n根据定义，$max-min+1$就是这个串能表示的所有本质不同的子串的数量。\n\n同样知道$\\sum _{i=1}^{maxnode} max[i]-min[i]+1$就是S中本质不同的字符串的数量。\n\n#### 3、$right$集合($endpos$)\n\n一个状态的$endpos$代表它能代表的子串的结束位置\n\n同时定义$Cntpos$为$|endpos|$\n\n> 字符串`aabaabaab`中，若某一个节点x表示{`aab`,`ab`,`b`}right集合有{3,6,9}，其$Cntpos$ = 3\n\n所有节点的$Cntpos$再乘上其能表示的子串大小之和就是S所有子串的数目。\n\n#### 4、转移边\n\n定义$trans(x,c)$表示状态$x$加入字符$c$后能转移到哪里。\n\n#### 5、后缀链接(Suffix Link)和parents树\n\n用$next(i)$表示$i$的后缀链接\n\n一个状态有且仅一个后缀链接，表示这个串能表示的最短子串能从哪个状态所代表的最长子串通过去点最前面那个字符得到\n\n如某个状态x表示{`aab`,`aaab`}，如果有一个状态y**包含**{`ab`}，那么x的后缀链接(Suffix Link)就连向y，如果这时候有一个状态z表示{`b`}，那么y的后缀链接转移到z。\n\n容易发现，$min(x) = max(next(x)) + 1$\n\n由于S的所有子串当且仅当在一个节点中出现，所以每个点只可能有一条后缀链接（开始节点没有后缀连接），后缀链接能构成一棵树。我们叫它前缀树或者parents树。\n\n### 举例\n\n> > 蓝色表示转移边\n>\n> > 绿色表示后缀链接\n>\n> > {}表示集合\n>\n> 比如说字符串`aab`构建的后缀自动机（注意节点个数由于可能出现无法表示的点而不一定只有串长个，这里的例子没有出现）\n>\n> 当然1号点（root）的后缀链接是连向NULL![举例](C:/Users/cqz15/Desktop/hexo%E5%A4%87%E4%BB%BD/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WF.png)\n\n那么从1走到4的路径有$1->4|1->2->4|1->2->3->4$，显然能代表3个子串\n\n2号点的right集合为{1,2}，right集合可以通过Suffix Link推得到（当前这个节点代表的和它的后缀链接链到的）\n\n### 构造\n\n我讲不清的呀\n\n丢参考链接跑\n\n[menci的博客](https://oi.men.ci/suffix-automaton-notes/)\n\n[陈老师的讲稿](https://wenku.baidu.com/view/fa02d3fff111f18582d05a81.html)\n\n具体思想就是在一个构建好的后缀自动机后面加入一个字符c。\n\n需要维护新加入节点和之前节点的trans和suffix_link。这个可以类比AC自动机。\n\n我们原来的有一个结束状态last。表示上次最后插入的那个状态。\n\n> 令之前的串为S。\n>\n> 显然last能表示的S的一些后缀。\n>\n> S到last的路径并没有包含所有后缀，因为有一些后缀是前面出现过的，根据状态最简，所以有一些后缀之前已经出现过了。\n>\n> 但是我们能够想到，最长的后缀一定是它能代表（包含）的。因为不可能有其他状态能表示。那么根据定义，last能表示的后缀是连续的一段。那么另外一些后缀根据定义，是last所指状态的后缀链接链向的。\n>\n> 例如S为`abaaab`\n>\n> 比如说last能代表{`aaab`,`aab`}，那么last的后缀链接能连向一个节点v，v代表{`ab`,`b`}。\n\n所以说，只要顺着last的后缀链接，就能到达所有后缀，只要所有后缀都能链向新节点，如果能遍历所有后缀（包括空也算后缀），就能够完成操作。\n\n但问题在于，万一加入的一个字符使得前面某个后缀已经有转移状态了呢？\n\n假设当前处理到节点v，使得$trans[v][c] != NULL$ ，令$trans[v][c]$ = o\n\n> 还是通过一个实例来理解一下\n>\n> **强烈建议各位在纸上自己画一画，特别是把代表的字符串画出来**\n>\n> S = `ababb`\n>\n> 先插入一个节点代表root，使得其max=0，令last=root\n>\n> 然后插入第一个节点，简称（1），其表示的子串为`a`，那么从root的`a`的转移便是1，此时1的max=1，同时1号点的Link指向root。令last=1\n>\n> 然后再插入第二个点（2），注意到1是最后插入的，也就是1的后缀链接能走通所有后缀，那么我们让$trans[1][b] = 2$，表示从1通过在1的所有子串后面加上一个`b`就能组成2集合的一部分。此时（2）可以表示子串{`ab`}，那么顺着后缀链接到字符串`a`的一个后缀（不妨把空也看作后缀），那么从空到（2）一条转移边，意义同上一条转移边，此时2能代表{`b`,`ab`}，令2的Link指向root，因为（2）没能代表的子串只有{空}，令last=2\n>\n> ![构造2](C:/Users/cqz15/Desktop/hexo%E5%A4%87%E4%BB%BD/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9E%84%E9%80%A02.jpg)\n>\n> 同样的道理插入第三个点，令$trans[2][a] = 3$，$max[3] = max[2]+1 = 3$（至少一定要代表当前的整个前缀。\n>\n> 那么我们再指向root，发现root已经有a的边的，强行把root的转移边指向3会引发一系列的惨案。我们注意新加入一个串还有一个子串没有处理{`a`}，但事实上，第一个节点代表的就是`a`（而1就正好是root的`a`转移所指向的点），出于最简状态，我们把3号点的Link指向1，发现什么事情都没有发生，还是满足后缀自动机的若干性质，于是令last = 3.\n>\n> ![构造3](C:/Users/cqz15/Desktop/hexo%E5%A4%87%E4%BB%BD/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9E%84%E9%80%A03.jpg)\n\n好奇怪的操作？？？？那么我们加入下一个节点\n\n与第三个节点类似的操作，指向第一个被控制的指向的那个节点），发现竟然依旧满足性\n\n![构造4](C:/Users/cqz15/Desktop/hexo%E5%A4%87%E4%BB%BD/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9E%84%E9%80%A04.jpg)\n\n是不是所有情况都可以这么处理？不是。\n\n什么情况下可以这么处理？\n\n假设当前处理到节点v，使得$trans[v][c] != NULL$ ，令$trans[v][c]$ = o\n\n当$max[v]+1 = max[o]$的时候可以直接这么处理。为什么？\n\n注意到这时候我们缺的是v的所以代表的子串在最后面加上一个字符c，所能得到的那些子串的集合。而o正好包含了这些的集合，也就包含了当前缺少的长度最长的那个串T。由于每个节点所能表示的子串都是后缀关系，显然只要它不代表长度大于T的串即可，其等价于它最长的串的长度刚好是max[v]+1，也就是当前缺少的那个串。\n\n> 继续模拟这个过程，我们加入一个字符`b`注意此时有大问题出现了\n>\n> 模拟4号节点插入5号节点，直到当前处理的v = root，因为root有一条b的转移边。\n>\n> 注意到5号节点目前代表的集合是{`ababb`,`babb`,`abb`,`bb`}如果强行把5号节点的Link指向2号节点，必然导致`ab`并不是它的子串的后缀。那么问题有点麻烦，怎么办呢？新建一个点，让它只代表{`b`}，让2号点只代表{`ab`}，然后进行一系列的操作，使得满足Link的性质。操作完成之后是这样的。具体步骤就是把2号点的所有转移边复制到6号点，再让6号点的Link指向root，让2号点的Link指向6号，让5号点的Link指向6号。\n>\n> ![构造5](C:/Users/cqz15/Desktop/hexo%E5%A4%87%E4%BB%BD/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9E%84%E9%80%A05.jpg)\n>\n> 巧妙的数据结构！\n\n很多时候，我们需要得到right集合。具体操作是，一开始在所有结束位置标记一下，然后遍历整个parents树，将其子节点的right集合合并成其的right集合——考虑parents树的性质：一个节点的祖先代表的字符串一定是它代表的字符串的后缀。\n\n### 实现\n\n要记录哪些东西？\n\n一般需要记录max，记录trans（如果字符集大小很大，一般用map来存，否则直接数组存），下面用ch表示，还要记录suffixLink，下面用next表示。\n\n```c++\nstruct SuffixAutomaton{\n\tstruct Node{\n\t\tint ch[26],next,max;\n\t}node[maxn];\n\tint start,last;\n\tint tot;\n\tSuffixAutomaton(){\n\t\ttot = 0;\n\t\tstart = last = newnode(0);\n\t}\n\tint newnode(int max){\n\t\tint x = ++tot;\n\t\tnode[x] . max = max;\n\t\tmem(node[x].ch,0);\n\t\tnode[x] . next = 0;\n\t\treturn x;\n\t}\n\tvoid extend(int c){\n\t\tint u = newnode(node[last] . max + 1),v = last;\n\t\tsize[u] = 1;\n\t\tfor(;v && !node[v].ch[c];v = node[v].next)\n\t\t\tnode[v].ch[c] = u;\n\t\tif(!v){\n\t\t\tnode[u] . next = start;\n\t\t} else\n\t\tif(node[node[v].ch[c]].max == node[v].max + 1){\n\t\t\tnode[u].next = node[v].ch[c];\n\t\t} else{\n\t\t\tint n = newnode(node[v].max+1),o = node[v].ch[c];\n\t\t\trep(k,0,26) node[n].ch[k] = node[o].ch[k];\n\t\t\tnode[n] . next = node[o].next;\n\t\t\tnode[o].next = node[u].next = n;\n\t\t\tfor(;v && node[v].ch[c] == o;v=node[v].next)\n\t\t\t\tnode[v].ch[c] = n;\n\t\t}\n\t\tlast = u;\n\t}\n}sam;\n```\n\n注：在字符集大小比较大的情况下可以把.ch[]换成map。\n\n**update：2018/9/8：**现在习惯用T[]来表示node[]，用nxt[]表示ch[]，用link表示next。下面附上带有合并right集合的。\n\n```C++\nstruct SAM{\n\tstatic const int maxm = maxn * 2;\n\tstruct node{\n\t\tint link,nxt[26],max;\n\t}T[maxm];\n\tint tot,start,last;\n\tSAM(){\n\t\ttot = 0;\n\t\tstart = last = newnode(0);\n\t}\n\tint newnode(int x){\n\t\t++tot;\n\t\tT[tot] . link = 0;\n\t\tmem(T[tot].nxt,0);\n\t\tT[tot] . max = x;\n\t\treturn tot;\n\t}\n\tint tpos[maxm];\n\tvoid extend(char c,int tmpp){\n\t\tint u = newnode(T[last].max+1),v = last;\n\t\ttpos[u] = tmpp;\n\t\tfor(;v && T[v].nxt[c] == 0;v = T[v].link){\n\t\t\tT[v] . nxt[c] = u;\n\t\t}\n\t\tif(!v){\n\t\t\tT[u] . link = start;\n\t\t} else\n\t\tif(T[v].max+1 == T[T[v].nxt[c]].max){\n\t\t\tT[u] . link = T[v] . nxt[c];\n\t\t} else{\n\t\t\tint n = newnode(T[v].max + 1),o = T[v].nxt[c];\n\t\t\trep(i,0,26) T[n] . nxt[i] = T[o] . nxt[i];\n\t\t\tT[n] . link = T[o] . link;\n\t\t\tT[o] . link = T[u] . link = n;\n\t\t\tfor(;v && T[v] . nxt[c] == o;v = T[v].link)\n\t\t\t\tT[v] . nxt[c] = n;\n\t\t}\n\t\tlast = u;\n\t}\n\tvector<int> edge[maxm];\n\tvoid dfs(int u){\n\t\tfor(auto v : edge[u]){\n\t\t\tdfs(v);\n\t\t\troot[u] = merge(root[u],root[v]);\n\t\t}\n\t}\n\tvoid init(){\n\t\tRep(i,1,tot) root[i] = 0;\n\t\tRep(i,1,tot) if(tpos[i]){\n\t\t\tinsert(root[i],1,n,tpos[i]);\n\t\t}\n\t\tRep(i,2,tot){\n\t\t\tedge[T[i] . link] . push_back(i);\n\t\t}\n\t\tdfs(1);\n\t}\n}sam;\n```\n\n\n\n### 复杂度\n\n$O(n * alpha)$，$alpha$表示字符集大小。\n\n证明这种东西，我这么菜完全不会。\n\n### 性质\n\n#### parents树\n\n一个节点的parents树上的祖先节点所代表的字符串都是这个节点所代表的字符串的后缀。\n\n换句话说，一个节点的子树中的字符串都是这个节点的字符串在前面加上若干字符得到的。\n\n**字符串S的反串的SAM里面的parents树就是S的后缀树。**这个通过理解parents树的性质很容易理解。\n\n多出来的节点是分叉的时候的显式节点，本来就有的是叶节点。然后可以利用**后缀树的LCA为两个后缀的LCP**来搞事情。\n\n#### right集合（endpos)\n\n就是这个节点所代表的字符串在原串中出现的位置的结束位置的集合。\n\n得到SAM后，我们可以得到S串的所有前缀出现的结束位置，容易发现S的所有前缀的后缀就是S的所有子串，而对于字符串S，它的后缀就是其parents树上的祖先，所以我们可以先在所有字符串S的前缀的结束位置打上一个标记，然后遍历整个树，用线段树合并可以得到right集合。\n\n\n\n### 例题\n\n#### codeforces1037H. Security\n\n**update：2018/9/8**\n\n**题意：**\n\n给你一个长度不超过1e5字符串S，接下来m个询问，每个询问给出L,R,T，T是一个总长度不超过2e5的字符串，让你取出S在区间[L,R]的部分得到一个子串SS，然后找SS的子串中字典序严格比T大的最小的字符串，如果不存在输出-1。\n\n**做法：**\n\n如果对于一个固定的前缀，那么后面一定是加上一个字符（多个字符显然更劣）。\n对于每一个，我们枚举前缀，然后枚举新的字符（满足变成的字典序要比原来的大），然后判断区间是否存在某个字符串。 \n这是一个经典的SAM问题。 \n我们先建立出后缀自动机，然后线段树合并爆出right集合，然后找到代表这个字符串的节点，并在其查询right中查询是否存在一个字符串出现在区间内。\n处理部分时间复杂度 $O(lenT * 26 * log(lenS))$\n注意到我们只需要看每一个位置的下一个即可，我们考虑把right集合作一个转化，转化成下一个字符是否可以是某个值。\n然后继续爆\"right集合\"，这样就可以得到一个前缀在字符串的某个区间能能否加某个字符，注意到这是可以状态压缩的，直接$2^{26}$存每个位置的是否可以即可。\n这样枚举下一个字符填什么，就可以$O(1)$判断了。\n处理部分时间复杂度 $O(lenT * (26 + log lenS))$。\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\n#define Rep(i,a,b) for(register int i=(a);i<=int(b);++i)\n#define Dep(i,a,b) for(register int i=(a);i>=int(b);--i)\n#define rep(i,a,b) for(register int i=(a);i<int(b);++i)\n#define mem(x,v) memset(x,v,sizeof(x))\n#define fi first\n#define se second\n#define gc getchar\n#define pc putchar\ninline ll rd(){\n    ll x=0,f=1;char c=gc();\n    for(;!isdigit(c);c=gc())if(c=='-')f=-1;\n    for(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n    return x*f;\n}\nvoid write(ll x){if(x<0)x=-x,pc('-');if(x>=10)write(x/10);putchar(x%10+'0');}\nvoid writeln(ll x){write(x);puts(\"\");}\nconst int maxn = 2e5+233;\nnamespace SegmentTree{\n\tconst int maxm = maxn * 60;\n\tint lc[maxm],rc[maxm],T[maxm],tot=0;\n\tinline void insert(int &o,int l,int r,int x,int v){\n\t\tif(!o) o = ++tot,T[o] = 0;\n\t\tT[o] |= v;\n\t\tif(l==r) return;\n\t\tint mid = (l + r) >> 1;\n\t\tif(x <= mid) insert(lc[o],l,mid,x,v); else\n\t\t\t\t\t insert(rc[o],mid+1,r,x,v);\n\t}\n\tinline int query(int o,int l,int r,int x,int y){\n\t\tif(!o) return 0;\n\t\tif(l==x && r==y) return T[o];\n\t\tint mid = (l + r) >> 1;\n\t\tif(y <= mid) return query(lc[o],l,mid,x,y); else\n\t\tif(mid+1<=x) return query(rc[o],mid+1,r,x,y); else\n\t\treturn query(lc[o],l,mid,x,mid) | query(rc[o],mid+1,r,mid+1,y);\n\t}\n\tinline int merge(int x,int y){\n\t\tif(!x || !y) return x + y;\n\t\tint z = ++tot;\n\t\tT[z] = T[x] | T[y];\n\t\tlc[z] = merge(lc[x],lc[y]);\n\t\trc[z] = merge(rc[x],rc[y]);\n\t\treturn z;\n\t}\n}\nusing SegmentTree::insert;\nusing SegmentTree::merge;\nusing SegmentTree::query;\nint root[maxn*2],n;\nstruct SAM{\n\tstatic const int maxm = maxn * 2;\n\tstruct node{\n\t\tint link,nxt[26],max;\n\t}T[maxm];\n\tint tot,start,last;\n\tSAM(){\n\t\ttot = 0;\n\t\tstart = last = newnode(0);\n\t}\n\tint newnode(int x){\n\t\t++tot;\n\t\tT[tot] . link = 0;\n\t\tmem(T[tot].nxt,0);\n\t\tT[tot] . max = x;\n\t\treturn tot;\n\t}\n\tint tpos[maxm],vpos[maxm];\n\tvoid extend(char c,int flag){\n\t\tint u = newnode(T[last].max+1),v = last;\n\t\ttpos[v] = flag;vpos[v] = c;\n\t\tfor(;v && T[v].nxt[c] == 0;v = T[v].link){\n\t\t\tT[v] . nxt[c] = u;\n\t\t}\n\t\tif(!v){\n\t\t\tT[u] . link = start;\n\t\t} else\n\t\tif(T[v].max+1 == T[T[v].nxt[c]].max){\n\t\t\tT[u] . link = T[v] . nxt[c];\n\t\t} else{\n\t\t\tint n = newnode(T[v].max + 1),o = T[v].nxt[c];\n\t\t\trep(i,0,26) T[n] . nxt[i] = T[o] . nxt[i];\n\t\t\tT[n] . link = T[o] . link;\n\t\t\tT[o] . link = T[u] . link = n;\n\t\t\tfor(;v && T[v] . nxt[c] == o;v = T[v].link)\n\t\t\t\tT[v] . nxt[c] = n;\n\t\t}\n\t\tlast = u;\n\t}\n\tvector<int> edge[maxm];\n\tvoid dfs(int u){\n\t\tfor(auto v : edge[u]){\n\t\t\tdfs(v);\n\t\t\troot[u] = merge(root[u],root[v]);\n\t\t}\n\t}\n\tvoid init(){\n\t\tRep(i,1,tot) root[i] = 0;\n\t\tRep(i,1,tot) if(tpos[i]){\n\t\t\tinsert(root[i],1,n,tpos[i],1<<vpos[i]);\n\t\t}\n\t\tRep(i,2,tot){\n\t\t\tedge[T[i] . link] . push_back(i);\n\t\t}\n\t\tdfs(1);\n\t}\n}sam;\nchar S[maxn],T[maxn];\nint main(){\n\tscanf(\"%s\",S+1);\n\tn = strlen(S+1);\n\tRep(i,1,n) sam.extend(S[i]-'a',i);\n\tsam.init();\n\tint Case = rd();\n\twhile(Case--){\n\t\tint l = rd(),r = rd();\n\t\tscanf(\"%s\",T+1);\n\t\tT[strlen(T+1) + 2] = 0;\n\t\tT[strlen(T+1) + 1] = 'a'-1;\n\t\tint p1=-1,p2=-1;\n\t\tint u = 1;\n\t\tfor(int i=1;T[i] && u;i++){\n\t\t\tint t = query(root[u],1,n,l+i-1,r),tmp = T[i] - 'a' + 1;\n\t\t\trep(j,tmp,26) if (t >> j & 1){\n\t\t\t\tp1 = i,p2 = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(T[i] >= 'a') u = sam.T[u].nxt[T[i]-'a'];\n\t\t}\n\t\tif(p1==-1){\n\t\t\tputs(\"-1\");\n\t\t} else{\n\t\t\trep(i,1,p1)pc(T[i]);pc('a'+p2);puts(\"\");\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n","source":"_posts/学习笔记/Suffix-automaton-notes.md","raw":"---\ntitle: 后缀自动机学习笔记\ntags: \n - 学习笔记\n - 字符串\n - 后缀自动机\n\n---\n\n**坑，也许不填了**\n\n### 定义\n\nS的后缀自动机的节点中包含且仅包含了S所有的子串。并且其状态最简（节点尽可能少）\n\n后缀自动机（suffix automaton，简称SAM）一般由2部分组成:**DAWG**和**Suffix Link**\n\n<!--more-->\n\n#### DAWG\n\n定义$trans[x][c]$表示从节点（状态）x，加入字符c后到达的状态，可以类比AC自动机构建出的$trie$图。但它是一个**DAG** 。从根到达某一个点的路径其实就是子串的若干字符\n\n\n\n### 概念\n\n#### 1、字符串的子串。\n\n一个状态能代表字符串的子串，根据定义可以知道所有节点代表的字符串的集合的并就是S的所有子串，容易理解每个节点代表的字符串的子串都应该是不重复的。\n\n其中一个节点能表示的子串相当于root顺着trans能走到它的一些路径\n\n> 字符串`aabaabaab`中，某一个节点x表示字符串{`aab`,`ab`,`b`}\n>\n> > 为了简化状态，一个节点可以表示多个子串，如某个节点表示{`aa`}，那么可以表示第一个a，也可以表示第二个，第四个……而且得保证之后不会再有节点表示`aa`\n\n有一个性质就是，每个串都是比它长的那一个串的后缀。而且长度相差为1。\n\n#### 2、max和min\n\n定义max为某个串能表示的所有子串中长度最长的，min表示能表示的串中长度最短的。\n\n注意，min不一定为1。\n\n根据定义，$max-min+1$就是这个串能表示的所有本质不同的子串的数量。\n\n同样知道$\\sum _{i=1}^{maxnode} max[i]-min[i]+1$就是S中本质不同的字符串的数量。\n\n#### 3、$right$集合($endpos$)\n\n一个状态的$endpos$代表它能代表的子串的结束位置\n\n同时定义$Cntpos$为$|endpos|$\n\n> 字符串`aabaabaab`中，若某一个节点x表示{`aab`,`ab`,`b`}right集合有{3,6,9}，其$Cntpos$ = 3\n\n所有节点的$Cntpos$再乘上其能表示的子串大小之和就是S所有子串的数目。\n\n#### 4、转移边\n\n定义$trans(x,c)$表示状态$x$加入字符$c$后能转移到哪里。\n\n#### 5、后缀链接(Suffix Link)和parents树\n\n用$next(i)$表示$i$的后缀链接\n\n一个状态有且仅一个后缀链接，表示这个串能表示的最短子串能从哪个状态所代表的最长子串通过去点最前面那个字符得到\n\n如某个状态x表示{`aab`,`aaab`}，如果有一个状态y**包含**{`ab`}，那么x的后缀链接(Suffix Link)就连向y，如果这时候有一个状态z表示{`b`}，那么y的后缀链接转移到z。\n\n容易发现，$min(x) = max(next(x)) + 1$\n\n由于S的所有子串当且仅当在一个节点中出现，所以每个点只可能有一条后缀链接（开始节点没有后缀连接），后缀链接能构成一棵树。我们叫它前缀树或者parents树。\n\n### 举例\n\n> > 蓝色表示转移边\n>\n> > 绿色表示后缀链接\n>\n> > {}表示集合\n>\n> 比如说字符串`aab`构建的后缀自动机（注意节点个数由于可能出现无法表示的点而不一定只有串长个，这里的例子没有出现）\n>\n> 当然1号点（root）的后缀链接是连向NULL![举例](C:/Users/cqz15/Desktop/hexo%E5%A4%87%E4%BB%BD/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WF.png)\n\n那么从1走到4的路径有$1->4|1->2->4|1->2->3->4$，显然能代表3个子串\n\n2号点的right集合为{1,2}，right集合可以通过Suffix Link推得到（当前这个节点代表的和它的后缀链接链到的）\n\n### 构造\n\n我讲不清的呀\n\n丢参考链接跑\n\n[menci的博客](https://oi.men.ci/suffix-automaton-notes/)\n\n[陈老师的讲稿](https://wenku.baidu.com/view/fa02d3fff111f18582d05a81.html)\n\n具体思想就是在一个构建好的后缀自动机后面加入一个字符c。\n\n需要维护新加入节点和之前节点的trans和suffix_link。这个可以类比AC自动机。\n\n我们原来的有一个结束状态last。表示上次最后插入的那个状态。\n\n> 令之前的串为S。\n>\n> 显然last能表示的S的一些后缀。\n>\n> S到last的路径并没有包含所有后缀，因为有一些后缀是前面出现过的，根据状态最简，所以有一些后缀之前已经出现过了。\n>\n> 但是我们能够想到，最长的后缀一定是它能代表（包含）的。因为不可能有其他状态能表示。那么根据定义，last能表示的后缀是连续的一段。那么另外一些后缀根据定义，是last所指状态的后缀链接链向的。\n>\n> 例如S为`abaaab`\n>\n> 比如说last能代表{`aaab`,`aab`}，那么last的后缀链接能连向一个节点v，v代表{`ab`,`b`}。\n\n所以说，只要顺着last的后缀链接，就能到达所有后缀，只要所有后缀都能链向新节点，如果能遍历所有后缀（包括空也算后缀），就能够完成操作。\n\n但问题在于，万一加入的一个字符使得前面某个后缀已经有转移状态了呢？\n\n假设当前处理到节点v，使得$trans[v][c] != NULL$ ，令$trans[v][c]$ = o\n\n> 还是通过一个实例来理解一下\n>\n> **强烈建议各位在纸上自己画一画，特别是把代表的字符串画出来**\n>\n> S = `ababb`\n>\n> 先插入一个节点代表root，使得其max=0，令last=root\n>\n> 然后插入第一个节点，简称（1），其表示的子串为`a`，那么从root的`a`的转移便是1，此时1的max=1，同时1号点的Link指向root。令last=1\n>\n> 然后再插入第二个点（2），注意到1是最后插入的，也就是1的后缀链接能走通所有后缀，那么我们让$trans[1][b] = 2$，表示从1通过在1的所有子串后面加上一个`b`就能组成2集合的一部分。此时（2）可以表示子串{`ab`}，那么顺着后缀链接到字符串`a`的一个后缀（不妨把空也看作后缀），那么从空到（2）一条转移边，意义同上一条转移边，此时2能代表{`b`,`ab`}，令2的Link指向root，因为（2）没能代表的子串只有{空}，令last=2\n>\n> ![构造2](C:/Users/cqz15/Desktop/hexo%E5%A4%87%E4%BB%BD/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9E%84%E9%80%A02.jpg)\n>\n> 同样的道理插入第三个点，令$trans[2][a] = 3$，$max[3] = max[2]+1 = 3$（至少一定要代表当前的整个前缀。\n>\n> 那么我们再指向root，发现root已经有a的边的，强行把root的转移边指向3会引发一系列的惨案。我们注意新加入一个串还有一个子串没有处理{`a`}，但事实上，第一个节点代表的就是`a`（而1就正好是root的`a`转移所指向的点），出于最简状态，我们把3号点的Link指向1，发现什么事情都没有发生，还是满足后缀自动机的若干性质，于是令last = 3.\n>\n> ![构造3](C:/Users/cqz15/Desktop/hexo%E5%A4%87%E4%BB%BD/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9E%84%E9%80%A03.jpg)\n\n好奇怪的操作？？？？那么我们加入下一个节点\n\n与第三个节点类似的操作，指向第一个被控制的指向的那个节点），发现竟然依旧满足性\n\n![构造4](C:/Users/cqz15/Desktop/hexo%E5%A4%87%E4%BB%BD/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9E%84%E9%80%A04.jpg)\n\n是不是所有情况都可以这么处理？不是。\n\n什么情况下可以这么处理？\n\n假设当前处理到节点v，使得$trans[v][c] != NULL$ ，令$trans[v][c]$ = o\n\n当$max[v]+1 = max[o]$的时候可以直接这么处理。为什么？\n\n注意到这时候我们缺的是v的所以代表的子串在最后面加上一个字符c，所能得到的那些子串的集合。而o正好包含了这些的集合，也就包含了当前缺少的长度最长的那个串T。由于每个节点所能表示的子串都是后缀关系，显然只要它不代表长度大于T的串即可，其等价于它最长的串的长度刚好是max[v]+1，也就是当前缺少的那个串。\n\n> 继续模拟这个过程，我们加入一个字符`b`注意此时有大问题出现了\n>\n> 模拟4号节点插入5号节点，直到当前处理的v = root，因为root有一条b的转移边。\n>\n> 注意到5号节点目前代表的集合是{`ababb`,`babb`,`abb`,`bb`}如果强行把5号节点的Link指向2号节点，必然导致`ab`并不是它的子串的后缀。那么问题有点麻烦，怎么办呢？新建一个点，让它只代表{`b`}，让2号点只代表{`ab`}，然后进行一系列的操作，使得满足Link的性质。操作完成之后是这样的。具体步骤就是把2号点的所有转移边复制到6号点，再让6号点的Link指向root，让2号点的Link指向6号，让5号点的Link指向6号。\n>\n> ![构造5](C:/Users/cqz15/Desktop/hexo%E5%A4%87%E4%BB%BD/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9E%84%E9%80%A05.jpg)\n>\n> 巧妙的数据结构！\n\n很多时候，我们需要得到right集合。具体操作是，一开始在所有结束位置标记一下，然后遍历整个parents树，将其子节点的right集合合并成其的right集合——考虑parents树的性质：一个节点的祖先代表的字符串一定是它代表的字符串的后缀。\n\n### 实现\n\n要记录哪些东西？\n\n一般需要记录max，记录trans（如果字符集大小很大，一般用map来存，否则直接数组存），下面用ch表示，还要记录suffixLink，下面用next表示。\n\n```c++\nstruct SuffixAutomaton{\n\tstruct Node{\n\t\tint ch[26],next,max;\n\t}node[maxn];\n\tint start,last;\n\tint tot;\n\tSuffixAutomaton(){\n\t\ttot = 0;\n\t\tstart = last = newnode(0);\n\t}\n\tint newnode(int max){\n\t\tint x = ++tot;\n\t\tnode[x] . max = max;\n\t\tmem(node[x].ch,0);\n\t\tnode[x] . next = 0;\n\t\treturn x;\n\t}\n\tvoid extend(int c){\n\t\tint u = newnode(node[last] . max + 1),v = last;\n\t\tsize[u] = 1;\n\t\tfor(;v && !node[v].ch[c];v = node[v].next)\n\t\t\tnode[v].ch[c] = u;\n\t\tif(!v){\n\t\t\tnode[u] . next = start;\n\t\t} else\n\t\tif(node[node[v].ch[c]].max == node[v].max + 1){\n\t\t\tnode[u].next = node[v].ch[c];\n\t\t} else{\n\t\t\tint n = newnode(node[v].max+1),o = node[v].ch[c];\n\t\t\trep(k,0,26) node[n].ch[k] = node[o].ch[k];\n\t\t\tnode[n] . next = node[o].next;\n\t\t\tnode[o].next = node[u].next = n;\n\t\t\tfor(;v && node[v].ch[c] == o;v=node[v].next)\n\t\t\t\tnode[v].ch[c] = n;\n\t\t}\n\t\tlast = u;\n\t}\n}sam;\n```\n\n注：在字符集大小比较大的情况下可以把.ch[]换成map。\n\n**update：2018/9/8：**现在习惯用T[]来表示node[]，用nxt[]表示ch[]，用link表示next。下面附上带有合并right集合的。\n\n```C++\nstruct SAM{\n\tstatic const int maxm = maxn * 2;\n\tstruct node{\n\t\tint link,nxt[26],max;\n\t}T[maxm];\n\tint tot,start,last;\n\tSAM(){\n\t\ttot = 0;\n\t\tstart = last = newnode(0);\n\t}\n\tint newnode(int x){\n\t\t++tot;\n\t\tT[tot] . link = 0;\n\t\tmem(T[tot].nxt,0);\n\t\tT[tot] . max = x;\n\t\treturn tot;\n\t}\n\tint tpos[maxm];\n\tvoid extend(char c,int tmpp){\n\t\tint u = newnode(T[last].max+1),v = last;\n\t\ttpos[u] = tmpp;\n\t\tfor(;v && T[v].nxt[c] == 0;v = T[v].link){\n\t\t\tT[v] . nxt[c] = u;\n\t\t}\n\t\tif(!v){\n\t\t\tT[u] . link = start;\n\t\t} else\n\t\tif(T[v].max+1 == T[T[v].nxt[c]].max){\n\t\t\tT[u] . link = T[v] . nxt[c];\n\t\t} else{\n\t\t\tint n = newnode(T[v].max + 1),o = T[v].nxt[c];\n\t\t\trep(i,0,26) T[n] . nxt[i] = T[o] . nxt[i];\n\t\t\tT[n] . link = T[o] . link;\n\t\t\tT[o] . link = T[u] . link = n;\n\t\t\tfor(;v && T[v] . nxt[c] == o;v = T[v].link)\n\t\t\t\tT[v] . nxt[c] = n;\n\t\t}\n\t\tlast = u;\n\t}\n\tvector<int> edge[maxm];\n\tvoid dfs(int u){\n\t\tfor(auto v : edge[u]){\n\t\t\tdfs(v);\n\t\t\troot[u] = merge(root[u],root[v]);\n\t\t}\n\t}\n\tvoid init(){\n\t\tRep(i,1,tot) root[i] = 0;\n\t\tRep(i,1,tot) if(tpos[i]){\n\t\t\tinsert(root[i],1,n,tpos[i]);\n\t\t}\n\t\tRep(i,2,tot){\n\t\t\tedge[T[i] . link] . push_back(i);\n\t\t}\n\t\tdfs(1);\n\t}\n}sam;\n```\n\n\n\n### 复杂度\n\n$O(n * alpha)$，$alpha$表示字符集大小。\n\n证明这种东西，我这么菜完全不会。\n\n### 性质\n\n#### parents树\n\n一个节点的parents树上的祖先节点所代表的字符串都是这个节点所代表的字符串的后缀。\n\n换句话说，一个节点的子树中的字符串都是这个节点的字符串在前面加上若干字符得到的。\n\n**字符串S的反串的SAM里面的parents树就是S的后缀树。**这个通过理解parents树的性质很容易理解。\n\n多出来的节点是分叉的时候的显式节点，本来就有的是叶节点。然后可以利用**后缀树的LCA为两个后缀的LCP**来搞事情。\n\n#### right集合（endpos)\n\n就是这个节点所代表的字符串在原串中出现的位置的结束位置的集合。\n\n得到SAM后，我们可以得到S串的所有前缀出现的结束位置，容易发现S的所有前缀的后缀就是S的所有子串，而对于字符串S，它的后缀就是其parents树上的祖先，所以我们可以先在所有字符串S的前缀的结束位置打上一个标记，然后遍历整个树，用线段树合并可以得到right集合。\n\n\n\n### 例题\n\n#### codeforces1037H. Security\n\n**update：2018/9/8**\n\n**题意：**\n\n给你一个长度不超过1e5字符串S，接下来m个询问，每个询问给出L,R,T，T是一个总长度不超过2e5的字符串，让你取出S在区间[L,R]的部分得到一个子串SS，然后找SS的子串中字典序严格比T大的最小的字符串，如果不存在输出-1。\n\n**做法：**\n\n如果对于一个固定的前缀，那么后面一定是加上一个字符（多个字符显然更劣）。\n对于每一个，我们枚举前缀，然后枚举新的字符（满足变成的字典序要比原来的大），然后判断区间是否存在某个字符串。 \n这是一个经典的SAM问题。 \n我们先建立出后缀自动机，然后线段树合并爆出right集合，然后找到代表这个字符串的节点，并在其查询right中查询是否存在一个字符串出现在区间内。\n处理部分时间复杂度 $O(lenT * 26 * log(lenS))$\n注意到我们只需要看每一个位置的下一个即可，我们考虑把right集合作一个转化，转化成下一个字符是否可以是某个值。\n然后继续爆\"right集合\"，这样就可以得到一个前缀在字符串的某个区间能能否加某个字符，注意到这是可以状态压缩的，直接$2^{26}$存每个位置的是否可以即可。\n这样枚举下一个字符填什么，就可以$O(1)$判断了。\n处理部分时间复杂度 $O(lenT * (26 + log lenS))$。\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\n#define Rep(i,a,b) for(register int i=(a);i<=int(b);++i)\n#define Dep(i,a,b) for(register int i=(a);i>=int(b);--i)\n#define rep(i,a,b) for(register int i=(a);i<int(b);++i)\n#define mem(x,v) memset(x,v,sizeof(x))\n#define fi first\n#define se second\n#define gc getchar\n#define pc putchar\ninline ll rd(){\n    ll x=0,f=1;char c=gc();\n    for(;!isdigit(c);c=gc())if(c=='-')f=-1;\n    for(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n    return x*f;\n}\nvoid write(ll x){if(x<0)x=-x,pc('-');if(x>=10)write(x/10);putchar(x%10+'0');}\nvoid writeln(ll x){write(x);puts(\"\");}\nconst int maxn = 2e5+233;\nnamespace SegmentTree{\n\tconst int maxm = maxn * 60;\n\tint lc[maxm],rc[maxm],T[maxm],tot=0;\n\tinline void insert(int &o,int l,int r,int x,int v){\n\t\tif(!o) o = ++tot,T[o] = 0;\n\t\tT[o] |= v;\n\t\tif(l==r) return;\n\t\tint mid = (l + r) >> 1;\n\t\tif(x <= mid) insert(lc[o],l,mid,x,v); else\n\t\t\t\t\t insert(rc[o],mid+1,r,x,v);\n\t}\n\tinline int query(int o,int l,int r,int x,int y){\n\t\tif(!o) return 0;\n\t\tif(l==x && r==y) return T[o];\n\t\tint mid = (l + r) >> 1;\n\t\tif(y <= mid) return query(lc[o],l,mid,x,y); else\n\t\tif(mid+1<=x) return query(rc[o],mid+1,r,x,y); else\n\t\treturn query(lc[o],l,mid,x,mid) | query(rc[o],mid+1,r,mid+1,y);\n\t}\n\tinline int merge(int x,int y){\n\t\tif(!x || !y) return x + y;\n\t\tint z = ++tot;\n\t\tT[z] = T[x] | T[y];\n\t\tlc[z] = merge(lc[x],lc[y]);\n\t\trc[z] = merge(rc[x],rc[y]);\n\t\treturn z;\n\t}\n}\nusing SegmentTree::insert;\nusing SegmentTree::merge;\nusing SegmentTree::query;\nint root[maxn*2],n;\nstruct SAM{\n\tstatic const int maxm = maxn * 2;\n\tstruct node{\n\t\tint link,nxt[26],max;\n\t}T[maxm];\n\tint tot,start,last;\n\tSAM(){\n\t\ttot = 0;\n\t\tstart = last = newnode(0);\n\t}\n\tint newnode(int x){\n\t\t++tot;\n\t\tT[tot] . link = 0;\n\t\tmem(T[tot].nxt,0);\n\t\tT[tot] . max = x;\n\t\treturn tot;\n\t}\n\tint tpos[maxm],vpos[maxm];\n\tvoid extend(char c,int flag){\n\t\tint u = newnode(T[last].max+1),v = last;\n\t\ttpos[v] = flag;vpos[v] = c;\n\t\tfor(;v && T[v].nxt[c] == 0;v = T[v].link){\n\t\t\tT[v] . nxt[c] = u;\n\t\t}\n\t\tif(!v){\n\t\t\tT[u] . link = start;\n\t\t} else\n\t\tif(T[v].max+1 == T[T[v].nxt[c]].max){\n\t\t\tT[u] . link = T[v] . nxt[c];\n\t\t} else{\n\t\t\tint n = newnode(T[v].max + 1),o = T[v].nxt[c];\n\t\t\trep(i,0,26) T[n] . nxt[i] = T[o] . nxt[i];\n\t\t\tT[n] . link = T[o] . link;\n\t\t\tT[o] . link = T[u] . link = n;\n\t\t\tfor(;v && T[v] . nxt[c] == o;v = T[v].link)\n\t\t\t\tT[v] . nxt[c] = n;\n\t\t}\n\t\tlast = u;\n\t}\n\tvector<int> edge[maxm];\n\tvoid dfs(int u){\n\t\tfor(auto v : edge[u]){\n\t\t\tdfs(v);\n\t\t\troot[u] = merge(root[u],root[v]);\n\t\t}\n\t}\n\tvoid init(){\n\t\tRep(i,1,tot) root[i] = 0;\n\t\tRep(i,1,tot) if(tpos[i]){\n\t\t\tinsert(root[i],1,n,tpos[i],1<<vpos[i]);\n\t\t}\n\t\tRep(i,2,tot){\n\t\t\tedge[T[i] . link] . push_back(i);\n\t\t}\n\t\tdfs(1);\n\t}\n}sam;\nchar S[maxn],T[maxn];\nint main(){\n\tscanf(\"%s\",S+1);\n\tn = strlen(S+1);\n\tRep(i,1,n) sam.extend(S[i]-'a',i);\n\tsam.init();\n\tint Case = rd();\n\twhile(Case--){\n\t\tint l = rd(),r = rd();\n\t\tscanf(\"%s\",T+1);\n\t\tT[strlen(T+1) + 2] = 0;\n\t\tT[strlen(T+1) + 1] = 'a'-1;\n\t\tint p1=-1,p2=-1;\n\t\tint u = 1;\n\t\tfor(int i=1;T[i] && u;i++){\n\t\t\tint t = query(root[u],1,n,l+i-1,r),tmp = T[i] - 'a' + 1;\n\t\t\trep(j,tmp,26) if (t >> j & 1){\n\t\t\t\tp1 = i,p2 = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(T[i] >= 'a') u = sam.T[u].nxt[T[i]-'a'];\n\t\t}\n\t\tif(p1==-1){\n\t\t\tputs(\"-1\");\n\t\t} else{\n\t\t\trep(i,1,p1)pc(T[i]);pc('a'+p2);puts(\"\");\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n","slug":"学习笔记/Suffix-automaton-notes","published":1,"date":"2021-08-28T13:02:40.635Z","updated":"2021-08-28T13:02:40.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvso350001tvfnuc59g5yhe","content":"<p><strong>坑，也许不填了 </strong></p><h3 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"# 定义\"></a> 定义</h3><p>S 的后缀自动机的节点中包含且仅包含了 S 所有的子串。并且其状态最简（节点尽可能少）</p><p> 后缀自动机（suffix automaton，简称 SAM）一般由 2 部分组成:<strong>DAWG</strong>和 <strong>Suffix Link</strong></p><a id=\"more\"></a><h4 id=\"dawg\"><a class=\"markdownIt-Anchor\" href=\"#dawg\"></a> DAWG</h4><p> 定义 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>c</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">trans[x][c]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">]</span></span></span></span> 表示从节点（状态）x，加入字符 c 后到达的状态，可以类比 AC 自动机构建出的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>i</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">trie</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">e</span></span></span></span> 图。但它是一个 <strong>DAG</strong> 。从根到达某一个点的路径其实就是子串的若干字符</p><h3 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"# 概念\"></a> 概念</h3><h4 id=\"1- 字符串的子串\"><a class=\"markdownIt-Anchor\" href=\"#1- 字符串的子串\"></a> 1、字符串的子串。</h4><p> 一个状态能代表字符串的子串，根据定义可以知道所有节点代表的字符串的集合的并就是 S 的所有子串，容易理解每个节点代表的字符串的子串都应该是不重复的。</p><p>其中一个节点能表示的子串相当于 root 顺着 trans 能走到它的一些路径 </p><blockquote><p> 字符串 <code>aabaabaab</code> 中，某一个节点 x 表示字符串 {<code>aab</code>,<code>ab</code>,<code>b</code>}</p><blockquote><p> 为了简化状态，一个节点可以表示多个子串，如某个节点表示 {<code>aa</code>}，那么可以表示第一个 a，也可以表示第二个，第四个……而且得保证之后不会再有节点表示<code>aa</code></p></blockquote></blockquote><p> 有一个性质就是，每个串都是比它长的那一个串的后缀。而且长度相差为 1。</p><h4 id=\"2-max 和 min\"><a class=\"markdownIt-Anchor\" href=\"#2-max 和 min\"></a> 2、max 和 min</h4><p>定义 max 为某个串能表示的所有子串中长度最长的，min 表示能表示的串中长度最短的。</p><p>注意，min 不一定为 1。</p><p>根据定义，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo>−</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">max-min+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.74285em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span>就是这个串能表示的所有本质不同的子串的数量。</p><p>同样知道 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi>n</mi><mi>o</mi><mi>d</mi><mi>e</mi></mrow></msubsup><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\sum _{i=1}^{maxnode} max[i]-min[i]+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2887179999999998em;vertical-align:-.29971000000000003em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.9890079999999999em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">e</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29971000000000003em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span> 就是 S 中本质不同的字符串的数量。</p><h4 id=\"3-right 集合 endpos\"><a class=\"markdownIt-Anchor\" href=\"#3-right 集合 endpos\"></a> 3、<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">right</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">t</span></span></span></span>集合 (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>e</mi><mi>n</mi><mi>d</mi><mi>p</mi><mi>o</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">endpos</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span></span></span></span>)</h4><p> 一个状态的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>e</mi><mi>n</mi><mi>d</mi><mi>p</mi><mi>o</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">endpos</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span></span></span></span> 代表它能代表的子串的结束位置 </p><p> 同时定义 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi><mi>n</mi><mi>t</mi><mi>p</mi><mi>o</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">Cntpos</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8777699999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07153em\">C</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span></span></span></span> 为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>p</mi><mi>o</mi><mi>s</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">|endpos|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord\">∣</span></span></span></span></p><blockquote><p>字符串 <code>aabaabaab</code> 中，若某一个节点 x 表示 {<code>aab</code>,<code>ab</code>,<code>b</code>}right 集合有{3,6,9}，其<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi><mi>n</mi><mi>t</mi><mi>p</mi><mi>o</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">Cntpos</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8777699999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07153em\">C</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span></span></span></span> = 3</p></blockquote><p> 所有节点的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi><mi>n</mi><mi>t</mi><mi>p</mi><mi>o</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">Cntpos</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8777699999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07153em\">C</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span></span></span></span> 再乘上其能表示的子串大小之和就是 S 所有子串的数目。</p><h4 id=\"4- 转移边\"><a class=\"markdownIt-Anchor\" href=\"#4- 转移边\"></a> 4、转移边 </h4><p> 定义 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">trans(x,c)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span></span></span></span> 表示状态 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span></span></span></span> 加入字符 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">c</span></span></span></span> 后能转移到哪里。</p><h4 id=\"5- 后缀链接 suffix-link 和 parents 树\"><a class=\"markdownIt-Anchor\" href=\"#5- 后缀链接 suffix-link 和 parents 树\"></a> 5、后缀链接 (Suffix Link) 和 parents 树 </h4><p> 用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">next(i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span></span></span></span>表示 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 的后缀链接 </p><p> 一个状态有且仅一个后缀链接，表示这个串能表示的最短子串能从哪个状态所代表的最长子串通过去点最前面那个字符得到 </p><p> 如某个状态 x 表示 {<code>aab</code>,<code>aaab</code>}，如果有一个状态 y<strong> 包含 </strong>{<code>ab</code>}，那么 x 的后缀链接(Suffix Link) 就连向 y，如果这时候有一个状态 z 表示 {<code>b</code>}，那么 y 的后缀链接转移到 z。</p><p> 容易发现，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">min(x) = max(next(x)) + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span></p><p>由于 S 的所有子串当且仅当在一个节点中出现，所以每个点只可能有一条后缀链接（开始节点没有后缀连接），后缀链接能构成一棵树。我们叫它前缀树或者 parents 树。</p><h3 id=\"举例\"><a class=\"markdownIt-Anchor\" href=\"# 举例\"></a> 举例 </h3><blockquote><blockquote><p> 蓝色表示转移边 </p></blockquote><blockquote><p> 绿色表示后缀链接 </p></blockquote><blockquote><p>{} 表示集合 </p></blockquote><p> 比如说字符串 <code>aab</code> 构建的后缀自动机（注意节点个数由于可能出现无法表示的点而不一定只有串长个，这里的例子没有出现）</p><p>当然 1 号点（root）的后缀链接是连向 NULL<img src=\"C:/Users/cqz15/Desktop/hexo%E5%A4%87%E4%BB%BD/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WF.png\" alt=\"举例\"></p></blockquote><p>那么从 1 走到 4 的路径有 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mo>−</mo><mo>&gt;</mo><mn>4</mn><mi mathvariant=\"normal\">∣</mi><mn>1</mn><mo>−</mo><mo>&gt;</mo><mn>2</mn><mo>−</mo><mo>&gt;</mo><mn>4</mn><mi mathvariant=\"normal\">∣</mi><mn>1</mn><mo>−</mo><mo>&gt;</mo><mn>2</mn><mo>−</mo><mo>&gt;</mo><mn>3</mn><mo>−</mo><mo>&gt;</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">1-&gt;4|1-&gt;2-&gt;4|1-&gt;2-&gt;3-&gt;4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord\">1</span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">4</span><span class=\"mord\">∣</span><span class=\"mord\">1</span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord\">2</span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">4</span><span class=\"mord\">∣</span><span class=\"mord\">1</span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord\">2</span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord\">3</span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">4</span></span></span></span>，显然能代表 3 个子串</p><p>2 号点的 right 集合为{1,2}，right 集合可以通过 Suffix Link 推得到（当前这个节点代表的和它的后缀链接链到的）</p><h3 id=\"构造\"><a class=\"markdownIt-Anchor\" href=\"# 构造\"></a> 构造</h3><p> 我讲不清的呀 </p><p> 丢参考链接跑 </p><p><a href=\"https://oi.men.ci/suffix-automaton-notes/\" target=\"_blank\" rel=\"noopener\">menci 的博客</a></p><p><a href=\"https://wenku.baidu.com/view/fa02d3fff111f18582d05a81.html\" target=\"_blank\" rel=\"noopener\"> 陈老师的讲稿 </a></p><p> 具体思想就是在一个构建好的后缀自动机后面加入一个字符 c。</p><p>需要维护新加入节点和之前节点的 trans 和 suffix_link。这个可以类比 AC 自动机。</p><p>我们原来的有一个结束状态 last。表示上次最后插入的那个状态。</p><blockquote><p>令之前的串为 S。</p><p>显然 last 能表示的 S 的一些后缀。</p><p>S 到 last 的路径并没有包含所有后缀，因为有一些后缀是前面出现过的，根据状态最简，所以有一些后缀之前已经出现过了。</p><p>但是我们能够想到，最长的后缀一定是它能代表（包含）的。因为不可能有其他状态能表示。那么根据定义，last 能表示的后缀是连续的一段。那么另外一些后缀根据定义，是 last 所指状态的后缀链接链向的。</p><p>例如 S 为 <code>abaaab</code></p><p> 比如说 last 能代表 {<code>aaab</code>,<code>aab</code>}，那么 last 的后缀链接能连向一个节点 v，v 代表{<code>ab</code>,<code>b</code>}。</p></blockquote><p> 所以说，只要顺着 last 的后缀链接，就能到达所有后缀，只要所有后缀都能链向新节点，如果能遍历所有后缀（包括空也算后缀），就能够完成操作。</p><p>但问题在于，万一加入的一个字符使得前面某个后缀已经有转移状态了呢？</p><p>假设当前处理到节点 v，使得 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>c</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">!</mo><mo>=</mo><mi>N</mi><mi>U</mi><mi>L</mi><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">trans[v][c] != NULL</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">]</span><span class=\"mclose\">!</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10903em\">N</span><span class=\"mord mathdefault\" style=\"margin-right:.10903em\">U</span><span class=\"mord mathdefault\">L</span><span class=\"mord mathdefault\">L</span></span></span></span> ，令<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>c</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">trans[v][c]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">]</span></span></span></span> = o</p><blockquote><p> 还是通过一个实例来理解一下 </p><p><strong> 强烈建议各位在纸上自己画一画，特别是把代表的字符串画出来 </strong></p><p>S = <code>ababb</code></p><p> 先插入一个节点代表 root，使得其 max=0，令 last=root</p><p>然后插入第一个节点，简称（1），其表示的子串为 <code>a</code>，那么从 root 的<code>a</code> 的转移便是 1，此时 1 的 max=1，同时 1 号点的 Link 指向 root。令 last=1</p><p>然后再插入第二个点（2），注意到 1 是最后插入的，也就是 1 的后缀链接能走通所有后缀，那么我们让 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>b</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">trans[1][b] = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span></span></span></span>，表示从 1 通过在 1 的所有子串后面加上一个<code>b</code> 就能组成 2 集合的一部分。此时（2）可以表示子串 {<code>ab</code>}，那么顺着后缀链接到字符串<code>a</code> 的一个后缀（不妨把空也看作后缀），那么从空到（2）一条转移边，意义同上一条转移边，此时 2 能代表 {<code>b</code>,<code>ab</code>}，令 2 的 Link 指向 root，因为（2）没能代表的子串只有{空}，令 last=2</p><p><img src=\"C:/Users/cqz15/Desktop/hexo%E5%A4%87%E4%BB%BD/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9E%84%E9%80%A02.jpg\" alt=\"构造 2\"></p><p> 同样的道理插入第三个点，令 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mn>2</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>a</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">trans[2][a] = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">a</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">3</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">[</mo><mn>3</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">[</mo><mn>2</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">max[3] = max[2]+1 = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">[</span><span class=\"mord\">3</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">3</span></span></span></span>（至少一定要代表当前的整个前缀。</p><p> 那么我们再指向 root，发现 root 已经有 a 的边的，强行把 root 的转移边指向 3 会引发一系列的惨案。我们注意新加入一个串还有一个子串没有处理 {<code>a</code>}，但事实上，第一个节点代表的就是<code>a</code>（而 1 就正好是 root 的<code>a</code> 转移所指向的点），出于最简状态，我们把 3 号点的 Link 指向 1，发现什么事情都没有发生，还是满足后缀自动机的若干性质，于是令 last = 3.</p><p><img src=\"C:/Users/cqz15/Desktop/hexo%E5%A4%87%E4%BB%BD/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9E%84%E9%80%A03.jpg\" alt=\"构造 3\"></p></blockquote><p>好奇怪的操作？？？？那么我们加入下一个节点 </p><p> 与第三个节点类似的操作，指向第一个被控制的指向的那个节点），发现竟然依旧满足性 </p><p><img src=\"C:/Users/cqz15/Desktop/hexo%E5%A4%87%E4%BB%BD/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9E%84%E9%80%A04.jpg\" alt=\"构造 4\"></p><p> 是不是所有情况都可以这么处理？不是。</p><p>什么情况下可以这么处理？</p><p>假设当前处理到节点 v，使得 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>c</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">!</mo><mo>=</mo><mi>N</mi><mi>U</mi><mi>L</mi><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">trans[v][c] != NULL</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">]</span><span class=\"mclose\">!</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10903em\">N</span><span class=\"mord mathdefault\" style=\"margin-right:.10903em\">U</span><span class=\"mord mathdefault\">L</span><span class=\"mord mathdefault\">L</span></span></span></span> ，令<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>c</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">trans[v][c]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">]</span></span></span></span> = o</p><p> 当<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">[</mo><mi>o</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">max[v]+1 = max[o]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">o</span><span class=\"mclose\">]</span></span></span></span>的时候可以直接这么处理。为什么？</p><p>注意到这时候我们缺的是 v 的所以代表的子串在最后面加上一个字符 c，所能得到的那些子串的集合。而 o 正好包含了这些的集合，也就包含了当前缺少的长度最长的那个串 T。由于每个节点所能表示的子串都是后缀关系，显然只要它不代表长度大于 T 的串即可，其等价于它最长的串的长度刚好是 max[v]+1，也就是当前缺少的那个串。</p><blockquote><p>继续模拟这个过程，我们加入一个字符 <code>b</code> 注意此时有大问题出现了 </p><p> 模拟 4 号节点插入 5 号节点，直到当前处理的 v = root，因为 root 有一条 b 的转移边。</p><p>注意到 5 号节点目前代表的集合是 {<code>ababb</code>,<code>babb</code>,<code>abb</code>,<code>bb</code>} 如果强行把 5 号节点的 Link 指向 2 号节点，必然导致 <code>ab</code> 并不是它的子串的后缀。那么问题有点麻烦，怎么办呢？新建一个点，让它只代表 {<code>b</code>}，让 2 号点只代表{<code>ab</code>}，然后进行一系列的操作，使得满足 Link 的性质。操作完成之后是这样的。具体步骤就是把 2 号点的所有转移边复制到 6 号点，再让 6 号点的 Link 指向 root，让 2 号点的 Link 指向 6 号，让 5 号点的 Link 指向 6 号。</p><p><img src=\"C:/Users/cqz15/Desktop/hexo%E5%A4%87%E4%BB%BD/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9E%84%E9%80%A05.jpg\" alt=\"构造 5\"></p><p> 巧妙的数据结构！</p></blockquote><p>很多时候，我们需要得到 right 集合。具体操作是，一开始在所有结束位置标记一下，然后遍历整个 parents 树，将其子节点的 right 集合合并成其的 right 集合——考虑 parents 树的性质：一个节点的祖先代表的字符串一定是它代表的字符串的后缀。</p><h3 id=\"实现\"><a class=\"markdownIt-Anchor\" href=\"# 实现\"></a> 实现 </h3><p> 要记录哪些东西？</p><p>一般需要记录 max，记录 trans（如果字符集大小很大，一般用 map 来存，否则直接数组存），下面用 ch 表示，还要记录 suffixLink，下面用 next 表示。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SuffixAutomaton</span>&#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> ch[<span class=\"number\">26</span>],next,<span class=\"built_in\">max</span>;</span><br><span class=\"line\">    &#125;node[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> start,last;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot;</span><br><span class=\"line\">    SuffixAutomaton()&#123;</span><br><span class=\"line\">        tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">        start = last = newnode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">max</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = ++tot;</span><br><span class=\"line\">        node[x] . <span class=\"built_in\">max</span> = <span class=\"built_in\">max</span>;</span><br><span class=\"line\">        mem(node[x].ch,<span class=\"number\">0</span>);</span><br><span class=\"line\">        node[x] . next = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">extend</span><span class=\"params\">(<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = newnode(node[last] . <span class=\"built_in\">max</span> + <span class=\"number\">1</span>),v = last;</span><br><span class=\"line\">        <span class=\"built_in\">size</span>[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;v &amp;&amp; !node[v].ch[c];v = node[v].next)</span><br><span class=\"line\">            node[v].ch[c] = u;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!v)&#123;</span><br><span class=\"line\">            node[u] . next = start;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node[node[v].ch[c]].<span class=\"built_in\">max</span> == node[v].<span class=\"built_in\">max</span> + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            node[u].next = node[v].ch[c];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = newnode(node[v].<span class=\"built_in\">max</span>+<span class=\"number\">1</span>),o = node[v].ch[c];</span><br><span class=\"line\">            rep(k,<span class=\"number\">0</span>,<span class=\"number\">26</span>) node[n].ch[k] = node[o].ch[k];</span><br><span class=\"line\">            node[n] . next = node[o].next;</span><br><span class=\"line\">            node[o].next = node[u].next = n;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;v &amp;&amp; node[v].ch[c] == o;v=node[v].next)</span><br><span class=\"line\">                node[v].ch[c] = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        last = u;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;sam;</span><br></pre></td></tr></table></figure><p>注：<a href=\"http://xn--ghqquo1eg3c11fvsda295bmybvwxr0eex7aj04ajtni75ezjya.ch\" target=\"_blank\" rel=\"noopener\">在字符集大小比较大的情况下可以把.ch</a>[]换成 map。</p><p>**update：2018/9/8：** 现在习惯用 T[]来表示 node[]，用 nxt[]表示 ch[]，用 link 表示 next。下面附上带有合并 right 集合的。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SAM</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = maxn * <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> link,nxt[<span class=\"number\">26</span>],<span class=\"built_in\">max</span>;</span><br><span class=\"line\">    &#125;T[maxm];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot,start,last;</span><br><span class=\"line\">    SAM()&#123;</span><br><span class=\"line\">        tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">        start = last = newnode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">        ++tot;</span><br><span class=\"line\">        T[tot] . link = <span class=\"number\">0</span>;</span><br><span class=\"line\">        mem(T[tot].nxt,<span class=\"number\">0</span>);</span><br><span class=\"line\">        T[tot] . <span class=\"built_in\">max</span> = x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tpos[maxm];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">extend</span><span class=\"params\">(<span class=\"keyword\">char</span> c,<span class=\"keyword\">int</span> tmpp)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = newnode(T[last].<span class=\"built_in\">max</span>+<span class=\"number\">1</span>),v = last;</span><br><span class=\"line\">        tpos[u] = tmpp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;v &amp;&amp; T[v].nxt[c] == <span class=\"number\">0</span>;v = T[v].link)&#123;</span><br><span class=\"line\">            T[v] . nxt[c] = u;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!v)&#123;</span><br><span class=\"line\">            T[u] . link = start;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[v].<span class=\"built_in\">max</span>+<span class=\"number\">1</span> == T[T[v].nxt[c]].<span class=\"built_in\">max</span>)&#123;</span><br><span class=\"line\">            T[u] . link = T[v] . nxt[c];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = newnode(T[v].<span class=\"built_in\">max</span> + <span class=\"number\">1</span>),o = T[v].nxt[c];</span><br><span class=\"line\">            rep(i,<span class=\"number\">0</span>,<span class=\"number\">26</span>) T[n] . nxt[i] = T[o] . nxt[i];</span><br><span class=\"line\">            T[n] . link = T[o] . link;</span><br><span class=\"line\">            T[o] . link = T[u] . link = n;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;v &amp;&amp; T[v] . nxt[c] == o;v = T[v].link)</span><br><span class=\"line\">                T[v] . nxt[c] = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        last = u;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; edge[maxm];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : edge[u])&#123;</span><br><span class=\"line\">            dfs(v);</span><br><span class=\"line\">            root[u] = merge(root[u],root[v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Rep(i,<span class=\"number\">1</span>,tot) root[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Rep(i,<span class=\"number\">1</span>,tot) <span class=\"keyword\">if</span>(tpos[i])&#123;</span><br><span class=\"line\">            insert(root[i],<span class=\"number\">1</span>,n,tpos[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Rep(i,<span class=\"number\">2</span>,tot)&#123;</span><br><span class=\"line\">            edge[T[i] . link] . push_back(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dfs(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;sam;</span><br></pre></td></tr></table></figure><h3 id=\"复杂度\"><a class=\"markdownIt-Anchor\" href=\"# 复杂度\"></a> 复杂度 </h3><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>∗</mo><mi>a</mi><mi>l</mi><mi>p</mi><mi>h</mi><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n * alpha)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">a</span><span class=\"mclose\">)</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mi>l</mi><mi>p</mi><mi>h</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">a</span></span></span></span> 表示字符集大小。</p><p>证明这种东西，我这么菜完全不会。</p><h3 id=\"性质\"><a class=\"markdownIt-Anchor\" href=\"# 性质\"></a> 性质 </h3><h4 id=\"parents 树\"><a class=\"markdownIt-Anchor\" href=\"#parents 树\"></a> parents 树</h4><p> 一个节点的 parents 树上的祖先节点所代表的字符串都是这个节点所代表的字符串的后缀。</p><p>换句话说，一个节点的子树中的字符串都是这个节点的字符串在前面加上若干字符得到的。</p><p>** 字符串 S 的反串的 SAM 里面的 parents 树就是 S 的后缀树。** 这个通过理解 parents 树的性质很容易理解。</p><p>多出来的节点是分叉的时候的显式节点，本来就有的是叶节点。然后可以利用 <strong> 后缀树的 LCA 为两个后缀的 LCP</strong>来搞事情。</p><h4 id=\"right 集合 endpos\"><a class=\"markdownIt-Anchor\" href=\"#right 集合 endpos\"></a> right 集合（endpos)</h4><p>就是这个节点所代表的字符串在原串中出现的位置的结束位置的集合。</p><p>得到 SAM 后，我们可以得到 S 串的所有前缀出现的结束位置，容易发现 S 的所有前缀的后缀就是 S 的所有子串，而对于字符串 S，它的后缀就是其 parents 树上的祖先，所以我们可以先在所有字符串 S 的前缀的结束位置打上一个标记，然后遍历整个树，用线段树合并可以得到 right 集合。</p><h3 id=\"例题\"><a class=\"markdownIt-Anchor\" href=\"# 例题\"></a> 例题 </h3><h4 id=\"codeforces1037h-security\"><a class=\"markdownIt-Anchor\" href=\"#codeforces1037h-security\"></a> codeforces1037H. Security</h4><p><strong>update：2018/9/8</strong></p><p><strong> 题意：</strong></p><p>给你一个长度不超过 1e5 字符串 S，接下来 m 个询问，每个询问给出 L,R,T，T 是一个总长度不超过 2e5 的字符串，让你取出 S 在区间 [L,R] 的部分得到一个子串 SS，然后找 SS 的子串中字典序严格比 T 大的最小的字符串，如果不存在输出 -1。</p><p><strong>做法：</strong></p><p>如果对于一个固定的前缀，那么后面一定是加上一个字符（多个字符显然更劣）。<br>对于每一个，我们枚举前缀，然后枚举新的字符（满足变成的字典序要比原来的大），然后判断区间是否存在某个字符串。<br>这是一个经典的 SAM 问题。<br>我们先建立出后缀自动机，然后线段树合并爆出 right 集合，然后找到代表这个字符串的节点，并在其查询 right 中查询是否存在一个字符串出现在区间内。<br>处理部分时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>n</mi><mi>T</mi><mo>∗</mo><mn>26</mn><mo>∗</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>n</mi><mi>S</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(lenT * 26 * log(lenS))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">T</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.05764em\">S</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span><br>注意到我们只需要看每一个位置的下一个即可，我们考虑把 right 集合作一个转化，转化成下一个字符是否可以是某个值。<br>然后继续爆 &quot;right 集合 &quot;，这样就可以得到一个前缀在字符串的某个区间能能否加某个字符，注意到这是可以状态压缩的，直接 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>26</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{26}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8141079999999999em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span></span> 存每个位置的是否可以即可。<br>这样枚举下一个字符填什么，就可以 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 判断了。<br>处理部分时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>n</mi><mi>T</mi><mo>∗</mo><mo stretchy=\"false\">(</mo><mn>26</mn><mo>+</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>l</mi><mi>e</mi><mi>n</mi><mi>S</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(lenT * (26 + log lenS))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">T</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.05764em\">S</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Rep(i,a,b) for(register int i=(a);i&lt;=int(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Dep(i,a,b) for(register int i=(a);i&gt;=int(b);--i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(register int i=(a);i&lt;int(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc getchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">rd</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ll x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)x=-x,pc(<span class=\"string\">'-'</span>);<span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">10</span>)<span class=\"built_in\">write</span>(x/<span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>(x%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2e5</span>+<span class=\"number\">233</span>;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> SegmentTree&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = maxn * <span class=\"number\">60</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lc[maxm],rc[maxm],T[maxm],tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!o) o = ++tot,T[o] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        T[o] |= v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &lt;= mid) insert(lc[o],l,mid,x,v); <span class=\"keyword\">else</span></span><br><span class=\"line\">                     insert(rc[o],mid+<span class=\"number\">1</span>,r,x,v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!o) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l==x &amp;&amp; r==y) <span class=\"keyword\">return</span> T[o];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y &lt;= mid) <span class=\"keyword\">return</span> query(lc[o],l,mid,x,y); <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mid+<span class=\"number\">1</span>&lt;=x) <span class=\"keyword\">return</span> query(rc[o],mid+<span class=\"number\">1</span>,r,x,y); <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(lc[o],l,mid,x,mid) | query(rc[o],mid+<span class=\"number\">1</span>,r,mid+<span class=\"number\">1</span>,y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!x || !y) <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> z = ++tot;</span><br><span class=\"line\">        T[z] = T[x] | T[y];</span><br><span class=\"line\">        lc[z] = merge(lc[x],lc[y]);</span><br><span class=\"line\">        rc[z] = merge(rc[x],rc[y]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> z;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">using</span> SegmentTree::insert;</span><br><span class=\"line\"><span class=\"keyword\">using</span> SegmentTree::merge;</span><br><span class=\"line\"><span class=\"keyword\">using</span> SegmentTree::query;</span><br><span class=\"line\"><span class=\"keyword\">int</span> root[maxn*<span class=\"number\">2</span>],n;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SAM</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = maxn * <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> link,nxt[<span class=\"number\">26</span>],<span class=\"built_in\">max</span>;</span><br><span class=\"line\">    &#125;T[maxm];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot,start,last;</span><br><span class=\"line\">    SAM()&#123;</span><br><span class=\"line\">        tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">        start = last = newnode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">        ++tot;</span><br><span class=\"line\">        T[tot] . link = <span class=\"number\">0</span>;</span><br><span class=\"line\">        mem(T[tot].nxt,<span class=\"number\">0</span>);</span><br><span class=\"line\">        T[tot] . <span class=\"built_in\">max</span> = x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tpos[maxm],vpos[maxm];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">extend</span><span class=\"params\">(<span class=\"keyword\">char</span> c,<span class=\"keyword\">int</span> flag)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = newnode(T[last].<span class=\"built_in\">max</span>+<span class=\"number\">1</span>),v = last;</span><br><span class=\"line\">        tpos[v] = flag;vpos[v] = c;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;v &amp;&amp; T[v].nxt[c] == <span class=\"number\">0</span>;v = T[v].link)&#123;</span><br><span class=\"line\">            T[v] . nxt[c] = u;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!v)&#123;</span><br><span class=\"line\">            T[u] . link = start;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[v].<span class=\"built_in\">max</span>+<span class=\"number\">1</span> == T[T[v].nxt[c]].<span class=\"built_in\">max</span>)&#123;</span><br><span class=\"line\">            T[u] . link = T[v] . nxt[c];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = newnode(T[v].<span class=\"built_in\">max</span> + <span class=\"number\">1</span>),o = T[v].nxt[c];</span><br><span class=\"line\">            rep(i,<span class=\"number\">0</span>,<span class=\"number\">26</span>) T[n] . nxt[i] = T[o] . nxt[i];</span><br><span class=\"line\">            T[n] . link = T[o] . link;</span><br><span class=\"line\">            T[o] . link = T[u] . link = n;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;v &amp;&amp; T[v] . nxt[c] == o;v = T[v].link)</span><br><span class=\"line\">                T[v] . nxt[c] = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        last = u;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; edge[maxm];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : edge[u])&#123;</span><br><span class=\"line\">            dfs(v);</span><br><span class=\"line\">            root[u] = merge(root[u],root[v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Rep(i,<span class=\"number\">1</span>,tot) root[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Rep(i,<span class=\"number\">1</span>,tot) <span class=\"keyword\">if</span>(tpos[i])&#123;</span><br><span class=\"line\">            insert(root[i],<span class=\"number\">1</span>,n,tpos[i],<span class=\"number\">1</span>&lt;&lt;vpos[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Rep(i,<span class=\"number\">2</span>,tot)&#123;</span><br><span class=\"line\">            edge[T[i] . link] . push_back(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dfs(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;sam;</span><br><span class=\"line\"><span class=\"keyword\">char</span> S[maxn],T[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,S+<span class=\"number\">1</span>);</span><br><span class=\"line\">    n = <span class=\"built_in\">strlen</span>(S+<span class=\"number\">1</span>);</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n) sam.extend(S[i]-<span class=\"string\">'a'</span>,i);</span><br><span class=\"line\">    sam.init();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Case = rd();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(Case--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = rd(),r = rd();</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,T+<span class=\"number\">1</span>);</span><br><span class=\"line\">        T[<span class=\"built_in\">strlen</span>(T+<span class=\"number\">1</span>) + <span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        T[<span class=\"built_in\">strlen</span>(T+<span class=\"number\">1</span>) + <span class=\"number\">1</span>] = <span class=\"string\">'a'</span><span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p1=<span class=\"number\">-1</span>,p2=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;T[i] &amp;&amp; u;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> t = query(root[u],<span class=\"number\">1</span>,n,l+i<span class=\"number\">-1</span>,r),tmp = T[i] - <span class=\"string\">'a'</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">            rep(j,tmp,<span class=\"number\">26</span>) <span class=\"keyword\">if</span> (t &gt;&gt; j &amp; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                p1 = i,p2 = j;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(T[i] &gt;= <span class=\"string\">'a'</span>) u = sam.T[u].nxt[T[i]-<span class=\"string\">'a'</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p1==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">\"-1\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            rep(i,<span class=\"number\">1</span>,p1)pc(T[i]);pc(<span class=\"string\">'a'</span>+p2);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><strong>坑，也许不填了</strong></p><h3 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\"></a> 定义</h3><p>S的后缀自动机的节点中包含且仅包含了S所有的子串。并且其状态最简（节点尽可能少）</p><p>后缀自动机（suffix automaton，简称SAM）一般由2部分组成:<strong>DAWG</strong>和<strong>Suffix Link</strong></p>","more":"<h4 id=\"dawg\"><a class=\"markdownIt-Anchor\" href=\"#dawg\"></a> DAWG</h4><p>定义<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>c</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">trans[x][c]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">]</span></span></span></span>表示从节点（状态）x，加入字符c后到达的状态，可以类比AC自动机构建出的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>i</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">trie</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">e</span></span></span></span>图。但它是一个<strong>DAG</strong> 。从根到达某一个点的路径其实就是子串的若干字符</p><h3 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\"></a> 概念</h3><h4 id=\"1-字符串的子串\"><a class=\"markdownIt-Anchor\" href=\"#1-字符串的子串\"></a> 1、字符串的子串。</h4><p>一个状态能代表字符串的子串，根据定义可以知道所有节点代表的字符串的集合的并就是S的所有子串，容易理解每个节点代表的字符串的子串都应该是不重复的。</p><p>其中一个节点能表示的子串相当于root顺着trans能走到它的一些路径</p><blockquote><p>字符串<code>aabaabaab</code>中，某一个节点x表示字符串{<code>aab</code>,<code>ab</code>,<code>b</code>}</p><blockquote><p>为了简化状态，一个节点可以表示多个子串，如某个节点表示{<code>aa</code>}，那么可以表示第一个a，也可以表示第二个，第四个……而且得保证之后不会再有节点表示<code>aa</code></p></blockquote></blockquote><p>有一个性质就是，每个串都是比它长的那一个串的后缀。而且长度相差为1。</p><h4 id=\"2-max和min\"><a class=\"markdownIt-Anchor\" href=\"#2-max和min\"></a> 2、max和min</h4><p>定义max为某个串能表示的所有子串中长度最长的，min表示能表示的串中长度最短的。</p><p>注意，min不一定为1。</p><p>根据定义，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo>−</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">max-min+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.74285em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span>就是这个串能表示的所有本质不同的子串的数量。</p><p>同样知道<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi>n</mi><mi>o</mi><mi>d</mi><mi>e</mi></mrow></msubsup><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\sum _{i=1}^{maxnode} max[i]-min[i]+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2887179999999998em;vertical-align:-.29971000000000003em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.9890079999999999em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">e</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29971000000000003em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span>就是S中本质不同的字符串的数量。</p><h4 id=\"3-right集合endpos\"><a class=\"markdownIt-Anchor\" href=\"#3-right集合endpos\"></a> 3、<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">right</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">t</span></span></span></span>集合(<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>e</mi><mi>n</mi><mi>d</mi><mi>p</mi><mi>o</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">endpos</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span></span></span></span>)</h4><p>一个状态的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>e</mi><mi>n</mi><mi>d</mi><mi>p</mi><mi>o</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">endpos</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span></span></span></span>代表它能代表的子串的结束位置</p><p>同时定义<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi><mi>n</mi><mi>t</mi><mi>p</mi><mi>o</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">Cntpos</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8777699999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07153em\">C</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span></span></span></span>为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>p</mi><mi>o</mi><mi>s</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">|endpos|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord\">∣</span></span></span></span></p><blockquote><p>字符串<code>aabaabaab</code>中，若某一个节点x表示{<code>aab</code>,<code>ab</code>,<code>b</code>}right集合有{3,6,9}，其<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi><mi>n</mi><mi>t</mi><mi>p</mi><mi>o</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">Cntpos</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8777699999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07153em\">C</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span></span></span></span> = 3</p></blockquote><p>所有节点的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi><mi>n</mi><mi>t</mi><mi>p</mi><mi>o</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">Cntpos</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8777699999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07153em\">C</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span></span></span></span>再乘上其能表示的子串大小之和就是S所有子串的数目。</p><h4 id=\"4-转移边\"><a class=\"markdownIt-Anchor\" href=\"#4-转移边\"></a> 4、转移边</h4><p>定义<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">trans(x,c)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span></span></span></span>表示状态<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span></span></span></span>加入字符<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">c</span></span></span></span>后能转移到哪里。</p><h4 id=\"5-后缀链接suffix-link和parents树\"><a class=\"markdownIt-Anchor\" href=\"#5-后缀链接suffix-link和parents树\"></a> 5、后缀链接(Suffix Link)和parents树</h4><p>用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">next(i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span></span></span></span>表示<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span>的后缀链接</p><p>一个状态有且仅一个后缀链接，表示这个串能表示的最短子串能从哪个状态所代表的最长子串通过去点最前面那个字符得到</p><p>如某个状态x表示{<code>aab</code>,<code>aaab</code>}，如果有一个状态y<strong>包含</strong>{<code>ab</code>}，那么x的后缀链接(Suffix Link)就连向y，如果这时候有一个状态z表示{<code>b</code>}，那么y的后缀链接转移到z。</p><p>容易发现，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">min(x) = max(next(x)) + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span></p><p>由于S的所有子串当且仅当在一个节点中出现，所以每个点只可能有一条后缀链接（开始节点没有后缀连接），后缀链接能构成一棵树。我们叫它前缀树或者parents树。</p><h3 id=\"举例\"><a class=\"markdownIt-Anchor\" href=\"#举例\"></a> 举例</h3><blockquote><blockquote><p>蓝色表示转移边</p></blockquote><blockquote><p>绿色表示后缀链接</p></blockquote><blockquote><p>{}表示集合</p></blockquote><p>比如说字符串<code>aab</code>构建的后缀自动机（注意节点个数由于可能出现无法表示的点而不一定只有串长个，这里的例子没有出现）</p><p>当然1号点（root）的后缀链接是连向NULL<img src=\"C:/Users/cqz15/Desktop/hexo%E5%A4%87%E4%BB%BD/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WF.png\" alt=\"举例\"></p></blockquote><p>那么从1走到4的路径有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mo>−</mo><mo>&gt;</mo><mn>4</mn><mi mathvariant=\"normal\">∣</mi><mn>1</mn><mo>−</mo><mo>&gt;</mo><mn>2</mn><mo>−</mo><mo>&gt;</mo><mn>4</mn><mi mathvariant=\"normal\">∣</mi><mn>1</mn><mo>−</mo><mo>&gt;</mo><mn>2</mn><mo>−</mo><mo>&gt;</mo><mn>3</mn><mo>−</mo><mo>&gt;</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">1-&gt;4|1-&gt;2-&gt;4|1-&gt;2-&gt;3-&gt;4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord\">1</span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">4</span><span class=\"mord\">∣</span><span class=\"mord\">1</span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord\">2</span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">4</span><span class=\"mord\">∣</span><span class=\"mord\">1</span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord\">2</span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord\">3</span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">4</span></span></span></span>，显然能代表3个子串</p><p>2号点的right集合为{1,2}，right集合可以通过Suffix Link推得到（当前这个节点代表的和它的后缀链接链到的）</p><h3 id=\"构造\"><a class=\"markdownIt-Anchor\" href=\"#构造\"></a> 构造</h3><p>我讲不清的呀</p><p>丢参考链接跑</p><p><a href=\"https://oi.men.ci/suffix-automaton-notes/\" target=\"_blank\" rel=\"noopener\">menci的博客</a></p><p><a href=\"https://wenku.baidu.com/view/fa02d3fff111f18582d05a81.html\" target=\"_blank\" rel=\"noopener\">陈老师的讲稿</a></p><p>具体思想就是在一个构建好的后缀自动机后面加入一个字符c。</p><p>需要维护新加入节点和之前节点的trans和suffix_link。这个可以类比AC自动机。</p><p>我们原来的有一个结束状态last。表示上次最后插入的那个状态。</p><blockquote><p>令之前的串为S。</p><p>显然last能表示的S的一些后缀。</p><p>S到last的路径并没有包含所有后缀，因为有一些后缀是前面出现过的，根据状态最简，所以有一些后缀之前已经出现过了。</p><p>但是我们能够想到，最长的后缀一定是它能代表（包含）的。因为不可能有其他状态能表示。那么根据定义，last能表示的后缀是连续的一段。那么另外一些后缀根据定义，是last所指状态的后缀链接链向的。</p><p>例如S为<code>abaaab</code></p><p>比如说last能代表{<code>aaab</code>,<code>aab</code>}，那么last的后缀链接能连向一个节点v，v代表{<code>ab</code>,<code>b</code>}。</p></blockquote><p>所以说，只要顺着last的后缀链接，就能到达所有后缀，只要所有后缀都能链向新节点，如果能遍历所有后缀（包括空也算后缀），就能够完成操作。</p><p>但问题在于，万一加入的一个字符使得前面某个后缀已经有转移状态了呢？</p><p>假设当前处理到节点v，使得<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>c</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">!</mo><mo>=</mo><mi>N</mi><mi>U</mi><mi>L</mi><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">trans[v][c] != NULL</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">]</span><span class=\"mclose\">!</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10903em\">N</span><span class=\"mord mathdefault\" style=\"margin-right:.10903em\">U</span><span class=\"mord mathdefault\">L</span><span class=\"mord mathdefault\">L</span></span></span></span> ，令<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>c</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">trans[v][c]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">]</span></span></span></span> = o</p><blockquote><p>还是通过一个实例来理解一下</p><p><strong>强烈建议各位在纸上自己画一画，特别是把代表的字符串画出来</strong></p><p>S = <code>ababb</code></p><p>先插入一个节点代表root，使得其max=0，令last=root</p><p>然后插入第一个节点，简称（1），其表示的子串为<code>a</code>，那么从root的<code>a</code>的转移便是1，此时1的max=1，同时1号点的Link指向root。令last=1</p><p>然后再插入第二个点（2），注意到1是最后插入的，也就是1的后缀链接能走通所有后缀，那么我们让<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>b</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">trans[1][b] = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span></span></span></span>，表示从1通过在1的所有子串后面加上一个<code>b</code>就能组成2集合的一部分。此时（2）可以表示子串{<code>ab</code>}，那么顺着后缀链接到字符串<code>a</code>的一个后缀（不妨把空也看作后缀），那么从空到（2）一条转移边，意义同上一条转移边，此时2能代表{<code>b</code>,<code>ab</code>}，令2的Link指向root，因为（2）没能代表的子串只有{空}，令last=2</p><p><img src=\"C:/Users/cqz15/Desktop/hexo%E5%A4%87%E4%BB%BD/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9E%84%E9%80%A02.jpg\" alt=\"构造2\"></p><p>同样的道理插入第三个点，令<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mn>2</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>a</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">trans[2][a] = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">a</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">3</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">[</mo><mn>3</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">[</mo><mn>2</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">max[3] = max[2]+1 = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">[</span><span class=\"mord\">3</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">3</span></span></span></span>（至少一定要代表当前的整个前缀。</p><p>那么我们再指向root，发现root已经有a的边的，强行把root的转移边指向3会引发一系列的惨案。我们注意新加入一个串还有一个子串没有处理{<code>a</code>}，但事实上，第一个节点代表的就是<code>a</code>（而1就正好是root的<code>a</code>转移所指向的点），出于最简状态，我们把3号点的Link指向1，发现什么事情都没有发生，还是满足后缀自动机的若干性质，于是令last = 3.</p><p><img src=\"C:/Users/cqz15/Desktop/hexo%E5%A4%87%E4%BB%BD/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9E%84%E9%80%A03.jpg\" alt=\"构造3\"></p></blockquote><p>好奇怪的操作？？？？那么我们加入下一个节点</p><p>与第三个节点类似的操作，指向第一个被控制的指向的那个节点），发现竟然依旧满足性</p><p><img src=\"C:/Users/cqz15/Desktop/hexo%E5%A4%87%E4%BB%BD/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9E%84%E9%80%A04.jpg\" alt=\"构造4\"></p><p>是不是所有情况都可以这么处理？不是。</p><p>什么情况下可以这么处理？</p><p>假设当前处理到节点v，使得<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>c</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">!</mo><mo>=</mo><mi>N</mi><mi>U</mi><mi>L</mi><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">trans[v][c] != NULL</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">]</span><span class=\"mclose\">!</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10903em\">N</span><span class=\"mord mathdefault\" style=\"margin-right:.10903em\">U</span><span class=\"mord mathdefault\">L</span><span class=\"mord mathdefault\">L</span></span></span></span> ，令<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>c</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">trans[v][c]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">]</span></span></span></span> = o</p><p>当<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">[</mo><mi>o</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">max[v]+1 = max[o]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">o</span><span class=\"mclose\">]</span></span></span></span>的时候可以直接这么处理。为什么？</p><p>注意到这时候我们缺的是v的所以代表的子串在最后面加上一个字符c，所能得到的那些子串的集合。而o正好包含了这些的集合，也就包含了当前缺少的长度最长的那个串T。由于每个节点所能表示的子串都是后缀关系，显然只要它不代表长度大于T的串即可，其等价于它最长的串的长度刚好是max[v]+1，也就是当前缺少的那个串。</p><blockquote><p>继续模拟这个过程，我们加入一个字符<code>b</code>注意此时有大问题出现了</p><p>模拟4号节点插入5号节点，直到当前处理的v = root，因为root有一条b的转移边。</p><p>注意到5号节点目前代表的集合是{<code>ababb</code>,<code>babb</code>,<code>abb</code>,<code>bb</code>}如果强行把5号节点的Link指向2号节点，必然导致<code>ab</code>并不是它的子串的后缀。那么问题有点麻烦，怎么办呢？新建一个点，让它只代表{<code>b</code>}，让2号点只代表{<code>ab</code>}，然后进行一系列的操作，使得满足Link的性质。操作完成之后是这样的。具体步骤就是把2号点的所有转移边复制到6号点，再让6号点的Link指向root，让2号点的Link指向6号，让5号点的Link指向6号。</p><p><img src=\"C:/Users/cqz15/Desktop/hexo%E5%A4%87%E4%BB%BD/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9E%84%E9%80%A05.jpg\" alt=\"构造5\"></p><p>巧妙的数据结构！</p></blockquote><p>很多时候，我们需要得到right集合。具体操作是，一开始在所有结束位置标记一下，然后遍历整个parents树，将其子节点的right集合合并成其的right集合——考虑parents树的性质：一个节点的祖先代表的字符串一定是它代表的字符串的后缀。</p><h3 id=\"实现\"><a class=\"markdownIt-Anchor\" href=\"#实现\"></a> 实现</h3><p>要记录哪些东西？</p><p>一般需要记录max，记录trans（如果字符集大小很大，一般用map来存，否则直接数组存），下面用ch表示，还要记录suffixLink，下面用next表示。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SuffixAutomaton</span>&#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> ch[<span class=\"number\">26</span>],next,<span class=\"built_in\">max</span>;</span><br><span class=\"line\">    &#125;node[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> start,last;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot;</span><br><span class=\"line\">    SuffixAutomaton()&#123;</span><br><span class=\"line\">        tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">        start = last = newnode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">max</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = ++tot;</span><br><span class=\"line\">        node[x] . <span class=\"built_in\">max</span> = <span class=\"built_in\">max</span>;</span><br><span class=\"line\">        mem(node[x].ch,<span class=\"number\">0</span>);</span><br><span class=\"line\">        node[x] . next = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">extend</span><span class=\"params\">(<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = newnode(node[last] . <span class=\"built_in\">max</span> + <span class=\"number\">1</span>),v = last;</span><br><span class=\"line\">        <span class=\"built_in\">size</span>[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;v &amp;&amp; !node[v].ch[c];v = node[v].next)</span><br><span class=\"line\">            node[v].ch[c] = u;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!v)&#123;</span><br><span class=\"line\">            node[u] . next = start;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node[node[v].ch[c]].<span class=\"built_in\">max</span> == node[v].<span class=\"built_in\">max</span> + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            node[u].next = node[v].ch[c];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = newnode(node[v].<span class=\"built_in\">max</span>+<span class=\"number\">1</span>),o = node[v].ch[c];</span><br><span class=\"line\">            rep(k,<span class=\"number\">0</span>,<span class=\"number\">26</span>) node[n].ch[k] = node[o].ch[k];</span><br><span class=\"line\">            node[n] . next = node[o].next;</span><br><span class=\"line\">            node[o].next = node[u].next = n;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;v &amp;&amp; node[v].ch[c] == o;v=node[v].next)</span><br><span class=\"line\">                node[v].ch[c] = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        last = u;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;sam;</span><br></pre></td></tr></table></figure><p>注：<a href=\"http://xn--ghqquo1eg3c11fvsda295bmybvwxr0eex7aj04ajtni75ezjya.ch\" target=\"_blank\" rel=\"noopener\">在字符集大小比较大的情况下可以把.ch</a>[]换成map。</p><p>**update：2018/9/8：**现在习惯用T[]来表示node[]，用nxt[]表示ch[]，用link表示next。下面附上带有合并right集合的。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SAM</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = maxn * <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> link,nxt[<span class=\"number\">26</span>],<span class=\"built_in\">max</span>;</span><br><span class=\"line\">    &#125;T[maxm];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot,start,last;</span><br><span class=\"line\">    SAM()&#123;</span><br><span class=\"line\">        tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">        start = last = newnode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">        ++tot;</span><br><span class=\"line\">        T[tot] . link = <span class=\"number\">0</span>;</span><br><span class=\"line\">        mem(T[tot].nxt,<span class=\"number\">0</span>);</span><br><span class=\"line\">        T[tot] . <span class=\"built_in\">max</span> = x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tpos[maxm];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">extend</span><span class=\"params\">(<span class=\"keyword\">char</span> c,<span class=\"keyword\">int</span> tmpp)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = newnode(T[last].<span class=\"built_in\">max</span>+<span class=\"number\">1</span>),v = last;</span><br><span class=\"line\">        tpos[u] = tmpp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;v &amp;&amp; T[v].nxt[c] == <span class=\"number\">0</span>;v = T[v].link)&#123;</span><br><span class=\"line\">            T[v] . nxt[c] = u;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!v)&#123;</span><br><span class=\"line\">            T[u] . link = start;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[v].<span class=\"built_in\">max</span>+<span class=\"number\">1</span> == T[T[v].nxt[c]].<span class=\"built_in\">max</span>)&#123;</span><br><span class=\"line\">            T[u] . link = T[v] . nxt[c];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = newnode(T[v].<span class=\"built_in\">max</span> + <span class=\"number\">1</span>),o = T[v].nxt[c];</span><br><span class=\"line\">            rep(i,<span class=\"number\">0</span>,<span class=\"number\">26</span>) T[n] . nxt[i] = T[o] . nxt[i];</span><br><span class=\"line\">            T[n] . link = T[o] . link;</span><br><span class=\"line\">            T[o] . link = T[u] . link = n;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;v &amp;&amp; T[v] . nxt[c] == o;v = T[v].link)</span><br><span class=\"line\">                T[v] . nxt[c] = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        last = u;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; edge[maxm];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : edge[u])&#123;</span><br><span class=\"line\">            dfs(v);</span><br><span class=\"line\">            root[u] = merge(root[u],root[v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Rep(i,<span class=\"number\">1</span>,tot) root[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Rep(i,<span class=\"number\">1</span>,tot) <span class=\"keyword\">if</span>(tpos[i])&#123;</span><br><span class=\"line\">            insert(root[i],<span class=\"number\">1</span>,n,tpos[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Rep(i,<span class=\"number\">2</span>,tot)&#123;</span><br><span class=\"line\">            edge[T[i] . link] . push_back(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dfs(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;sam;</span><br></pre></td></tr></table></figure><h3 id=\"复杂度\"><a class=\"markdownIt-Anchor\" href=\"#复杂度\"></a> 复杂度</h3><p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>∗</mo><mi>a</mi><mi>l</mi><mi>p</mi><mi>h</mi><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n * alpha)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">a</span><span class=\"mclose\">)</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mi>l</mi><mi>p</mi><mi>h</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">a</span></span></span></span>表示字符集大小。</p><p>证明这种东西，我这么菜完全不会。</p><h3 id=\"性质\"><a class=\"markdownIt-Anchor\" href=\"#性质\"></a> 性质</h3><h4 id=\"parents树\"><a class=\"markdownIt-Anchor\" href=\"#parents树\"></a> parents树</h4><p>一个节点的parents树上的祖先节点所代表的字符串都是这个节点所代表的字符串的后缀。</p><p>换句话说，一个节点的子树中的字符串都是这个节点的字符串在前面加上若干字符得到的。</p><p>**字符串S的反串的SAM里面的parents树就是S的后缀树。**这个通过理解parents树的性质很容易理解。</p><p>多出来的节点是分叉的时候的显式节点，本来就有的是叶节点。然后可以利用<strong>后缀树的LCA为两个后缀的LCP</strong>来搞事情。</p><h4 id=\"right集合endpos\"><a class=\"markdownIt-Anchor\" href=\"#right集合endpos\"></a> right集合（endpos)</h4><p>就是这个节点所代表的字符串在原串中出现的位置的结束位置的集合。</p><p>得到SAM后，我们可以得到S串的所有前缀出现的结束位置，容易发现S的所有前缀的后缀就是S的所有子串，而对于字符串S，它的后缀就是其parents树上的祖先，所以我们可以先在所有字符串S的前缀的结束位置打上一个标记，然后遍历整个树，用线段树合并可以得到right集合。</p><h3 id=\"例题\"><a class=\"markdownIt-Anchor\" href=\"#例题\"></a> 例题</h3><h4 id=\"codeforces1037h-security\"><a class=\"markdownIt-Anchor\" href=\"#codeforces1037h-security\"></a> codeforces1037H. Security</h4><p><strong>update：2018/9/8</strong></p><p><strong>题意：</strong></p><p>给你一个长度不超过1e5字符串S，接下来m个询问，每个询问给出L,R,T，T是一个总长度不超过2e5的字符串，让你取出S在区间[L,R]的部分得到一个子串SS，然后找SS的子串中字典序严格比T大的最小的字符串，如果不存在输出-1。</p><p><strong>做法：</strong></p><p>如果对于一个固定的前缀，那么后面一定是加上一个字符（多个字符显然更劣）。<br>对于每一个，我们枚举前缀，然后枚举新的字符（满足变成的字典序要比原来的大），然后判断区间是否存在某个字符串。<br>这是一个经典的SAM问题。<br>我们先建立出后缀自动机，然后线段树合并爆出right集合，然后找到代表这个字符串的节点，并在其查询right中查询是否存在一个字符串出现在区间内。<br>处理部分时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>n</mi><mi>T</mi><mo>∗</mo><mn>26</mn><mo>∗</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>n</mi><mi>S</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(lenT * 26 * log(lenS))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">T</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.05764em\">S</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span><br>注意到我们只需要看每一个位置的下一个即可，我们考虑把right集合作一个转化，转化成下一个字符是否可以是某个值。<br>然后继续爆&quot;right集合&quot;，这样就可以得到一个前缀在字符串的某个区间能能否加某个字符，注意到这是可以状态压缩的，直接<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>26</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{26}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8141079999999999em;vertical-align:0\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span></span>存每个位置的是否可以即可。<br>这样枚举下一个字符填什么，就可以<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>判断了。<br>处理部分时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>e</mi><mi>n</mi><mi>T</mi><mo>∗</mo><mo stretchy=\"false\">(</mo><mn>26</mn><mo>+</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>l</mi><mi>e</mi><mi>n</mi><mi>S</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(lenT * (26 + log lenS))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">T</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.05764em\">S</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Rep(i,a,b) for(register int i=(a);i&lt;=int(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Dep(i,a,b) for(register int i=(a);i&gt;=int(b);--i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(register int i=(a);i&lt;int(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc getchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">rd</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ll x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)x=-x,pc(<span class=\"string\">'-'</span>);<span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">10</span>)<span class=\"built_in\">write</span>(x/<span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>(x%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2e5</span>+<span class=\"number\">233</span>;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> SegmentTree&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = maxn * <span class=\"number\">60</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lc[maxm],rc[maxm],T[maxm],tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!o) o = ++tot,T[o] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        T[o] |= v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &lt;= mid) insert(lc[o],l,mid,x,v); <span class=\"keyword\">else</span></span><br><span class=\"line\">                     insert(rc[o],mid+<span class=\"number\">1</span>,r,x,v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!o) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l==x &amp;&amp; r==y) <span class=\"keyword\">return</span> T[o];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y &lt;= mid) <span class=\"keyword\">return</span> query(lc[o],l,mid,x,y); <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mid+<span class=\"number\">1</span>&lt;=x) <span class=\"keyword\">return</span> query(rc[o],mid+<span class=\"number\">1</span>,r,x,y); <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(lc[o],l,mid,x,mid) | query(rc[o],mid+<span class=\"number\">1</span>,r,mid+<span class=\"number\">1</span>,y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!x || !y) <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> z = ++tot;</span><br><span class=\"line\">        T[z] = T[x] | T[y];</span><br><span class=\"line\">        lc[z] = merge(lc[x],lc[y]);</span><br><span class=\"line\">        rc[z] = merge(rc[x],rc[y]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> z;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">using</span> SegmentTree::insert;</span><br><span class=\"line\"><span class=\"keyword\">using</span> SegmentTree::merge;</span><br><span class=\"line\"><span class=\"keyword\">using</span> SegmentTree::query;</span><br><span class=\"line\"><span class=\"keyword\">int</span> root[maxn*<span class=\"number\">2</span>],n;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SAM</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = maxn * <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> link,nxt[<span class=\"number\">26</span>],<span class=\"built_in\">max</span>;</span><br><span class=\"line\">    &#125;T[maxm];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot,start,last;</span><br><span class=\"line\">    SAM()&#123;</span><br><span class=\"line\">        tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">        start = last = newnode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">        ++tot;</span><br><span class=\"line\">        T[tot] . link = <span class=\"number\">0</span>;</span><br><span class=\"line\">        mem(T[tot].nxt,<span class=\"number\">0</span>);</span><br><span class=\"line\">        T[tot] . <span class=\"built_in\">max</span> = x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tpos[maxm],vpos[maxm];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">extend</span><span class=\"params\">(<span class=\"keyword\">char</span> c,<span class=\"keyword\">int</span> flag)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = newnode(T[last].<span class=\"built_in\">max</span>+<span class=\"number\">1</span>),v = last;</span><br><span class=\"line\">        tpos[v] = flag;vpos[v] = c;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;v &amp;&amp; T[v].nxt[c] == <span class=\"number\">0</span>;v = T[v].link)&#123;</span><br><span class=\"line\">            T[v] . nxt[c] = u;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!v)&#123;</span><br><span class=\"line\">            T[u] . link = start;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[v].<span class=\"built_in\">max</span>+<span class=\"number\">1</span> == T[T[v].nxt[c]].<span class=\"built_in\">max</span>)&#123;</span><br><span class=\"line\">            T[u] . link = T[v] . nxt[c];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = newnode(T[v].<span class=\"built_in\">max</span> + <span class=\"number\">1</span>),o = T[v].nxt[c];</span><br><span class=\"line\">            rep(i,<span class=\"number\">0</span>,<span class=\"number\">26</span>) T[n] . nxt[i] = T[o] . nxt[i];</span><br><span class=\"line\">            T[n] . link = T[o] . link;</span><br><span class=\"line\">            T[o] . link = T[u] . link = n;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;v &amp;&amp; T[v] . nxt[c] == o;v = T[v].link)</span><br><span class=\"line\">                T[v] . nxt[c] = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        last = u;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; edge[maxm];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : edge[u])&#123;</span><br><span class=\"line\">            dfs(v);</span><br><span class=\"line\">            root[u] = merge(root[u],root[v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Rep(i,<span class=\"number\">1</span>,tot) root[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Rep(i,<span class=\"number\">1</span>,tot) <span class=\"keyword\">if</span>(tpos[i])&#123;</span><br><span class=\"line\">            insert(root[i],<span class=\"number\">1</span>,n,tpos[i],<span class=\"number\">1</span>&lt;&lt;vpos[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Rep(i,<span class=\"number\">2</span>,tot)&#123;</span><br><span class=\"line\">            edge[T[i] . link] . push_back(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dfs(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;sam;</span><br><span class=\"line\"><span class=\"keyword\">char</span> S[maxn],T[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,S+<span class=\"number\">1</span>);</span><br><span class=\"line\">    n = <span class=\"built_in\">strlen</span>(S+<span class=\"number\">1</span>);</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n) sam.extend(S[i]-<span class=\"string\">'a'</span>,i);</span><br><span class=\"line\">    sam.init();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Case = rd();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(Case--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = rd(),r = rd();</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,T+<span class=\"number\">1</span>);</span><br><span class=\"line\">        T[<span class=\"built_in\">strlen</span>(T+<span class=\"number\">1</span>) + <span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        T[<span class=\"built_in\">strlen</span>(T+<span class=\"number\">1</span>) + <span class=\"number\">1</span>] = <span class=\"string\">'a'</span><span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p1=<span class=\"number\">-1</span>,p2=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;T[i] &amp;&amp; u;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> t = query(root[u],<span class=\"number\">1</span>,n,l+i<span class=\"number\">-1</span>,r),tmp = T[i] - <span class=\"string\">'a'</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">            rep(j,tmp,<span class=\"number\">26</span>) <span class=\"keyword\">if</span> (t &gt;&gt; j &amp; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                p1 = i,p2 = j;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(T[i] &gt;= <span class=\"string\">'a'</span>) u = sam.T[u].nxt[T[i]-<span class=\"string\">'a'</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p1==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">\"-1\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            rep(i,<span class=\"number\">1</span>,p1)pc(T[i]);pc(<span class=\"string\">'a'</span>+p2);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"dsu on tree","_content":"\n大概是看了一波，然后感觉\n\n​\t貌似大多数情况下还是点分优秀？\n\n​\t\t也许能解决一些点分不能解决的题。\n\n​\t貌似大多数情况下还是莫队好写？\n\n​\t\t而且有时候复杂度是两只log，而莫队只要一个根号+小常数。\n\n<!--more-->\n\n推荐并感谢：http://codeforces.com/blog/entry/44351\n\n#### dsu on tree是什么\n\n​\t大概是基于启发式的树上某离线算法。\n\n#### dsu on tree能干什么？\n\n​\t**离线**解决一些关于某个节点的子树的问题。\n\n#### $dsu on tree$大概有多慢\n\n​\t外层套着的复杂度是$O(n log n)$的。但是常数小呀——因为是基于树剖的呀。\n\n#### 预备知识\n\n​\t其实并没有。只需要知道一点类似树链剖分(heavy-light decomposition)的关于重儿子的概念。\n\n\n\n#### 例题：\n\n**codeforces600E. Lomsat gelral**\n\n\n​\thttp://codeforces.com/contest/600/problem/E\n\n​\t**题意：**\n\n\n​\t\tn个点的有根树，以1为根，每个点有一种颜色。我们称一种颜色占领了一个子树当且仅当没有其他颜色在这个子树中出现得比它多。求占领每个子树的所有颜色之和。\n\n​\t**题解:**\n\n\n​\t\t考虑暴力的做法，我们可以遍历这个子树内的每一个节点，然后把占领颜色最多的通过一个数组计算出来。\n\n​\t\t做完之后暴力删除这个节点的贡献。\n\n​\t\t时间复杂度$O(n^2)$\n\n贡献大概可以类似地算:\n\n```\ncnt[c[u]]++;\nif(cnt[c[u]]>=cmax){\n\tif(cnt[c[u]] > cmax){\n\t\tcmax = cnt[c[u]];\n\t\tsum = 0;\n\t}\n\tsum += c[u];\n}\n```\n\n​\t\t我们注意到，有些有用的信息也被删除了。\n\n​\t\t考虑一种优化，我们对于每一个节点都保存这样的值，然后合并到它的父亲上，用set来进行启发式合并，这样能时间复杂度是$O(n log^2n)$\n\n​\t还可以这么做：\n\n​\t\t我们对于一棵树每一个节点找出重儿子，每次先处理轻儿子，暴力删除轻儿子的贡献，然后把重儿子（因为是最后处理的，所以不会对前面的轻儿子的处理产生干扰）的贡献传递给父亲。\n\n​\t\t到要处理一个点的时候，暴力算轻儿子的贡献。这样的复杂度对吗？\n\n​\t\t因为一条路径上最多只会有$log$个轻边，而每个点只有上面的轻边的时候才会被删除，所以复杂度是$O(n log n)$。\n\n​\t这其实是**dsu on tree**的一种通用解法。\n\n\n\n#### 练习题\n\n​\t让自己慢慢做吧。\n\n​\t我还是太弱了。\n\n\n\n\n\n题面:http://codeforces.com/contest/600/problem/E\n\n> 代码:http://codeforces.com/contest/600/submission/33974891\n\n\n\n题面: http://codeforces.com/problemset/problem/570/D\n\n> 代码: http://codeforces.com/contest/570/submission/33975177\n>\n> ​\t这题的做法大概就是update的时候用树状数组来维护。\n\n\n\n题面: http://codeforces.com/problemset/problem/208/E\n\n> 代码: http://codeforces.com/contest/208/submission/33975619\n\n\n\n题面: http://codeforces.com/problemset/problem/375/D\n\n> 用dsu on tree貌似超时了，应该是我哪里写错了\n>\n> 代码1(TLE): http://codeforces.com/contest/375/submission/33976745\n>\n> 大概是改不对，所以抄一个莫队……\n>\n> 代码2(AC): http://codeforces.com/contest/375/submission/33976761\n\n\n\n题面：http://codeforces.com/problemset/problem/741/D\n\n> 大概就是用一个1<<22的数组来保存一个点到根路劲上的状态（是奇数还是偶数），然后回文就是只有一个或者没有是奇数的，那么枚举哪个是奇数。update一下。代码：http://codeforces.com/contest/741/submission/33978144\n\n\n\n题面：http://www.lydsy.com/JudgeOnline/problem.php?id=2599\n\n> 太难，不做了。","source":"_posts/学习笔记/dsu on tree.md","raw":"---\ntitle: dsu on tree\n---\n\n大概是看了一波，然后感觉\n\n​\t貌似大多数情况下还是点分优秀？\n\n​\t\t也许能解决一些点分不能解决的题。\n\n​\t貌似大多数情况下还是莫队好写？\n\n​\t\t而且有时候复杂度是两只log，而莫队只要一个根号+小常数。\n\n<!--more-->\n\n推荐并感谢：http://codeforces.com/blog/entry/44351\n\n#### dsu on tree是什么\n\n​\t大概是基于启发式的树上某离线算法。\n\n#### dsu on tree能干什么？\n\n​\t**离线**解决一些关于某个节点的子树的问题。\n\n#### $dsu on tree$大概有多慢\n\n​\t外层套着的复杂度是$O(n log n)$的。但是常数小呀——因为是基于树剖的呀。\n\n#### 预备知识\n\n​\t其实并没有。只需要知道一点类似树链剖分(heavy-light decomposition)的关于重儿子的概念。\n\n\n\n#### 例题：\n\n**codeforces600E. Lomsat gelral**\n\n\n​\thttp://codeforces.com/contest/600/problem/E\n\n​\t**题意：**\n\n\n​\t\tn个点的有根树，以1为根，每个点有一种颜色。我们称一种颜色占领了一个子树当且仅当没有其他颜色在这个子树中出现得比它多。求占领每个子树的所有颜色之和。\n\n​\t**题解:**\n\n\n​\t\t考虑暴力的做法，我们可以遍历这个子树内的每一个节点，然后把占领颜色最多的通过一个数组计算出来。\n\n​\t\t做完之后暴力删除这个节点的贡献。\n\n​\t\t时间复杂度$O(n^2)$\n\n贡献大概可以类似地算:\n\n```\ncnt[c[u]]++;\nif(cnt[c[u]]>=cmax){\n\tif(cnt[c[u]] > cmax){\n\t\tcmax = cnt[c[u]];\n\t\tsum = 0;\n\t}\n\tsum += c[u];\n}\n```\n\n​\t\t我们注意到，有些有用的信息也被删除了。\n\n​\t\t考虑一种优化，我们对于每一个节点都保存这样的值，然后合并到它的父亲上，用set来进行启发式合并，这样能时间复杂度是$O(n log^2n)$\n\n​\t还可以这么做：\n\n​\t\t我们对于一棵树每一个节点找出重儿子，每次先处理轻儿子，暴力删除轻儿子的贡献，然后把重儿子（因为是最后处理的，所以不会对前面的轻儿子的处理产生干扰）的贡献传递给父亲。\n\n​\t\t到要处理一个点的时候，暴力算轻儿子的贡献。这样的复杂度对吗？\n\n​\t\t因为一条路径上最多只会有$log$个轻边，而每个点只有上面的轻边的时候才会被删除，所以复杂度是$O(n log n)$。\n\n​\t这其实是**dsu on tree**的一种通用解法。\n\n\n\n#### 练习题\n\n​\t让自己慢慢做吧。\n\n​\t我还是太弱了。\n\n\n\n\n\n题面:http://codeforces.com/contest/600/problem/E\n\n> 代码:http://codeforces.com/contest/600/submission/33974891\n\n\n\n题面: http://codeforces.com/problemset/problem/570/D\n\n> 代码: http://codeforces.com/contest/570/submission/33975177\n>\n> ​\t这题的做法大概就是update的时候用树状数组来维护。\n\n\n\n题面: http://codeforces.com/problemset/problem/208/E\n\n> 代码: http://codeforces.com/contest/208/submission/33975619\n\n\n\n题面: http://codeforces.com/problemset/problem/375/D\n\n> 用dsu on tree貌似超时了，应该是我哪里写错了\n>\n> 代码1(TLE): http://codeforces.com/contest/375/submission/33976745\n>\n> 大概是改不对，所以抄一个莫队……\n>\n> 代码2(AC): http://codeforces.com/contest/375/submission/33976761\n\n\n\n题面：http://codeforces.com/problemset/problem/741/D\n\n> 大概就是用一个1<<22的数组来保存一个点到根路劲上的状态（是奇数还是偶数），然后回文就是只有一个或者没有是奇数的，那么枚举哪个是奇数。update一下。代码：http://codeforces.com/contest/741/submission/33978144\n\n\n\n题面：http://www.lydsy.com/JudgeOnline/problem.php?id=2599\n\n> 太难，不做了。","slug":"学习笔记/dsu on tree","published":1,"date":"2021-08-28T13:02:40.632Z","updated":"2021-08-28T13:02:40.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvso351001uvfnu5z44eynt","content":"<p>大概是看了一波，然后感觉 </p><p>​\t貌似大多数情况下还是点分优秀？</p><p>​ 也许能解决一些点分不能解决的题。</p><p>​\t貌似大多数情况下还是莫队好写？</p><p>​ 而且有时候复杂度是两只 log，而莫队只要一个根号 + 小常数。</p><a id=\"more\"></a><p> 推荐并感谢：<a href=\"http://codeforces.com/blog/entry/44351\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/blog/entry/44351</a></p><h4 id=\"dsu-on-tree 是什么\"><a class=\"markdownIt-Anchor\" href=\"#dsu-on-tree 是什么\"></a> dsu on tree 是什么 </h4><p>​\t大概是基于启发式的树上某离线算法。</p><h4 id=\"dsu-on-tree 能干什么\"><a class=\"markdownIt-Anchor\" href=\"#dsu-on-tree 能干什么\"></a> dsu on tree 能干什么？</h4><p>​\t<strong> 离线 </strong> 解决一些关于某个节点的子树的问题。</p><h4 id=\"dsu-on-tree 大概有多慢\"><a class=\"markdownIt-Anchor\" href=\"#dsu-on-tree 大概有多慢\"></a> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>s</mi><mi>u</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">dsu on tree</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">e</span></span></span></span>大概有多慢 </h4><p>​\t外层套着的复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> 的。但是常数小呀——因为是基于树剖的呀。</p><h4 id=\"预备知识\"><a class=\"markdownIt-Anchor\" href=\"# 预备知识\"></a> 预备知识 </h4><p>​\t其实并没有。只需要知道一点类似树链剖分(heavy-light decomposition) 的关于重儿子的概念。</p><h4 id=\"例题\"><a class=\"markdownIt-Anchor\" href=\"# 例题\"></a> 例题：</h4><p><strong>codeforces600E. Lomsat gelral</strong></p><p>​\t<a href=\"http://codeforces.com/contest/600/problem/E\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/600/problem/E</a></p><p>​\t<strong>题意：</strong></p><p>​ n 个点的有根树，以 1 为根，每个点有一种颜色。我们称一种颜色占领了一个子树当且仅当没有其他颜色在这个子树中出现得比它多。求占领每个子树的所有颜色之和。</p><p>​\t<strong>题解:</strong></p><p>​ 考虑暴力的做法，我们可以遍历这个子树内的每一个节点，然后把占领颜色最多的通过一个数组计算出来。</p><p>​ 做完之后暴力删除这个节点的贡献。</p><p>​ 时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p><p> 贡献大概可以类似地算:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnt[c[u]]++;</span><br><span class=\"line\">if(cnt[c[u]]&gt;&#x3D;cmax)&#123;</span><br><span class=\"line\">    if(cnt[c[u]] &gt; cmax)&#123;</span><br><span class=\"line\">        cmax &#x3D; cnt[c[u]];</span><br><span class=\"line\">        sum &#x3D; 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sum +&#x3D; c[u];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>​ 我们注意到，有些有用的信息也被删除了。</p><p>​ 考虑一种优化，我们对于每一个节点都保存这样的值，然后合并到它的父亲上，用 set 来进行启发式合并，这样能时间复杂度是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>2</mn></msup><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n log^2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span></p><p>​\t还可以这么做：</p><p>​ 我们对于一棵树每一个节点找出重儿子，每次先处理轻儿子，暴力删除轻儿子的贡献，然后把重儿子（因为是最后处理的，所以不会对前面的轻儿子的处理产生干扰）的贡献传递给父亲。</p><p>​ 到要处理一个点的时候，暴力算轻儿子的贡献。这样的复杂度对吗？</p><p>​ 因为一条路径上最多只会有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">log</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span></span></span></span> 个轻边，而每个点只有上面的轻边的时候才会被删除，所以复杂度是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>。</p><p>​\t这其实是<strong>dsu on tree</strong> 的一种通用解法。</p><h4 id=\"练习题\"><a class=\"markdownIt-Anchor\" href=\"# 练习题\"></a> 练习题 </h4><p>​\t让自己慢慢做吧。</p><p>​\t我还是太弱了。</p><p> 题面:<a href=\"http://codeforces.com/contest/600/problem/E\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/600/problem/E</a></p><blockquote><p>代码:<a href=\"http://codeforces.com/contest/600/submission/33974891\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/600/submission/33974891</a></p></blockquote><p>题面: <a href=\"http://codeforces.com/problemset/problem/570/D\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/problemset/problem/570/D</a></p><blockquote><p>代码: <a href=\"http://codeforces.com/contest/570/submission/33975177\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/570/submission/33975177</a></p><p>​\t这题的做法大概就是 update 的时候用树状数组来维护。</p></blockquote><p>题面: <a href=\"http://codeforces.com/problemset/problem/208/E\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/problemset/problem/208/E</a></p><blockquote><p>代码: <a href=\"http://codeforces.com/contest/208/submission/33975619\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/208/submission/33975619</a></p></blockquote><p>题面: <a href=\"http://codeforces.com/problemset/problem/375/D\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/problemset/problem/375/D</a></p><blockquote><p>用 dsu on tree 貌似超时了，应该是我哪里写错了 </p><p> 代码 1(TLE): <a href=\"http://codeforces.com/contest/375/submission/33976745\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/375/submission/33976745</a></p><p>大概是改不对，所以抄一个莫队……</p><p>代码 2(AC): <a href=\"http://codeforces.com/contest/375/submission/33976761\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/375/submission/33976761</a></p></blockquote><p>题面：<a href=\"http://codeforces.com/problemset/problem/741/D\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/problemset/problem/741/D</a></p><blockquote><p>大概就是用一个 1&lt;&lt;22 的数组来保存一个点到根路劲上的状态（是奇数还是偶数），然后回文就是只有一个或者没有是奇数的，那么枚举哪个是奇数。update 一下。代码：<a href=\"http://codeforces.com/contest/741/submission/33978144\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/741/submission/33978144</a></p></blockquote><p>题面：<a href=\"http://www.lydsy.com/JudgeOnline/problem.php?id=2599\" target=\"_blank\" rel=\"noopener\">http://www.lydsy.com/JudgeOnline/problem.php?id=2599</a></p><blockquote><p>太难，不做了。</p></blockquote>","site":{"data":{}},"excerpt":"<p>大概是看了一波，然后感觉</p><p>​\t貌似大多数情况下还是点分优秀？</p><p>​ 也许能解决一些点分不能解决的题。</p><p>​\t貌似大多数情况下还是莫队好写？</p><p>​ 而且有时候复杂度是两只log，而莫队只要一个根号+小常数。</p>","more":"<p>推荐并感谢：<a href=\"http://codeforces.com/blog/entry/44351\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/blog/entry/44351</a></p><h4 id=\"dsu-on-tree是什么\"><a class=\"markdownIt-Anchor\" href=\"#dsu-on-tree是什么\"></a> dsu on tree是什么</h4><p>​\t大概是基于启发式的树上某离线算法。</p><h4 id=\"dsu-on-tree能干什么\"><a class=\"markdownIt-Anchor\" href=\"#dsu-on-tree能干什么\"></a> dsu on tree能干什么？</h4><p>​\t<strong>离线</strong>解决一些关于某个节点的子树的问题。</p><h4 id=\"dsu-on-tree大概有多慢\"><a class=\"markdownIt-Anchor\" href=\"#dsu-on-tree大概有多慢\"></a> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>s</mi><mi>u</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">dsu on tree</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.69444em;vertical-align:0\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">e</span></span></span></span>大概有多慢</h4><p>​\t外层套着的复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>的。但是常数小呀——因为是基于树剖的呀。</p><h4 id=\"预备知识\"><a class=\"markdownIt-Anchor\" href=\"#预备知识\"></a> 预备知识</h4><p>​\t其实并没有。只需要知道一点类似树链剖分(heavy-light decomposition)的关于重儿子的概念。</p><h4 id=\"例题\"><a class=\"markdownIt-Anchor\" href=\"#例题\"></a> 例题：</h4><p><strong>codeforces600E. Lomsat gelral</strong></p><p>​\t<a href=\"http://codeforces.com/contest/600/problem/E\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/600/problem/E</a></p><p>​\t<strong>题意：</strong></p><p>​ n个点的有根树，以1为根，每个点有一种颜色。我们称一种颜色占领了一个子树当且仅当没有其他颜色在这个子树中出现得比它多。求占领每个子树的所有颜色之和。</p><p>​\t<strong>题解:</strong></p><p>​ 考虑暴力的做法，我们可以遍历这个子树内的每一个节点，然后把占领颜色最多的通过一个数组计算出来。</p><p>​ 做完之后暴力删除这个节点的贡献。</p><p>​ 时间复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p><p>贡献大概可以类似地算:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnt[c[u]]++;</span><br><span class=\"line\">if(cnt[c[u]]&gt;&#x3D;cmax)&#123;</span><br><span class=\"line\">    if(cnt[c[u]] &gt; cmax)&#123;</span><br><span class=\"line\">        cmax &#x3D; cnt[c[u]];</span><br><span class=\"line\">        sum &#x3D; 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sum +&#x3D; c[u];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>​ 我们注意到，有些有用的信息也被删除了。</p><p>​ 考虑一种优化，我们对于每一个节点都保存这样的值，然后合并到它的父亲上，用set来进行启发式合并，这样能时间复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>2</mn></msup><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n log^2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span></p><p>​\t还可以这么做：</p><p>​ 我们对于一棵树每一个节点找出重儿子，每次先处理轻儿子，暴力删除轻儿子的贡献，然后把重儿子（因为是最后处理的，所以不会对前面的轻儿子的处理产生干扰）的贡献传递给父亲。</p><p>​ 到要处理一个点的时候，暴力算轻儿子的贡献。这样的复杂度对吗？</p><p>​ 因为一条路径上最多只会有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">log</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span></span></span></span>个轻边，而每个点只有上面的轻边的时候才会被删除，所以复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>。</p><p>​\t这其实是<strong>dsu on tree</strong>的一种通用解法。</p><h4 id=\"练习题\"><a class=\"markdownIt-Anchor\" href=\"#练习题\"></a> 练习题</h4><p>​\t让自己慢慢做吧。</p><p>​\t我还是太弱了。</p><p>题面:<a href=\"http://codeforces.com/contest/600/problem/E\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/600/problem/E</a></p><blockquote><p>代码:<a href=\"http://codeforces.com/contest/600/submission/33974891\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/600/submission/33974891</a></p></blockquote><p>题面: <a href=\"http://codeforces.com/problemset/problem/570/D\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/problemset/problem/570/D</a></p><blockquote><p>代码: <a href=\"http://codeforces.com/contest/570/submission/33975177\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/570/submission/33975177</a></p><p>​\t这题的做法大概就是update的时候用树状数组来维护。</p></blockquote><p>题面: <a href=\"http://codeforces.com/problemset/problem/208/E\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/problemset/problem/208/E</a></p><blockquote><p>代码: <a href=\"http://codeforces.com/contest/208/submission/33975619\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/208/submission/33975619</a></p></blockquote><p>题面: <a href=\"http://codeforces.com/problemset/problem/375/D\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/problemset/problem/375/D</a></p><blockquote><p>用dsu on tree貌似超时了，应该是我哪里写错了</p><p>代码1(TLE): <a href=\"http://codeforces.com/contest/375/submission/33976745\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/375/submission/33976745</a></p><p>大概是改不对，所以抄一个莫队……</p><p>代码2(AC): <a href=\"http://codeforces.com/contest/375/submission/33976761\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/375/submission/33976761</a></p></blockquote><p>题面：<a href=\"http://codeforces.com/problemset/problem/741/D\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/problemset/problem/741/D</a></p><blockquote><p>大概就是用一个1&lt;&lt;22的数组来保存一个点到根路劲上的状态（是奇数还是偶数），然后回文就是只有一个或者没有是奇数的，那么枚举哪个是奇数。update一下。代码：<a href=\"http://codeforces.com/contest/741/submission/33978144\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/contest/741/submission/33978144</a></p></blockquote><p>题面：<a href=\"http://www.lydsy.com/JudgeOnline/problem.php?id=2599\" target=\"_blank\" rel=\"noopener\">http://www.lydsy.com/JudgeOnline/problem.php?id=2599</a></p><blockquote><p>太难，不做了。</p></blockquote>"},{"title":"NOI2018 同步赛体验记","_content":"\n啥都不会的选手只会暴力。\n\nDay1得分是25+44+56。\n\nDay2 $LOJ$上的得分是85+30+25。\n\n加上50分笔试分。差银牌线7分。\n\n<!--more-->\n\n### 「NOI2018」归程\n\n25分做法：求出最短路后直接可持久化并查集维护。\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\nconst int inf = 0x7fffffff;\n#define Rep(i,a,b) for(register int i=(a);i<=int(b);++i)\n#define Dep(i,a,b) for(register int i=(a);i>=int(b);--i)\n#define rep(i,a,b) for(register int i=(a);i<int(b);++i)\n#define mem(x,v) memset(x,v,sizeof(x))\n#define pc putchar\n#define gc getchar\n#define fi first\n#define se second\n#define debug(x) cout << #x\" = \" << x << endl;\n#define pp(x,y) cout << \"pp: \" << x << \" \" << y << endl;\n#define rank __RANK\ninline ll read(){\n\tregister ll x=0,f=1;register char c=gc();\n\tfor(;!isdigit(c);c=gc())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n\treturn x*f;\n}\n#define rd read\ndouble readdb(){\n\tdouble x=0,p=0.1;char f=0,c=gc();\n\tfor(;!isdigit(c);c=gc())f|=(c=='-');\n\tfor(;isdigit(c);c=gc())x=x*10+(c^48);\n\tif(c=='.')for(c=gc();isdigit(c);c=gc(),p/=10)x=x+(c^48)*p;\n\treturn f?-x:x;\n}\n#define rdb() readdb()\nvoid write(ll x){if(x<0)x=-x,pc('-');if(x>=10)write(x/10);putchar(x%10+'0');}\nvoid writeln(ll x){write(x);puts(\"\");}\nconst int maxn = 2e5+233;\nconst int maxm = 4e5+233;\nint n,m,ans,root[maxn];\n#define mid ((l+r)>>1)\n#define min(x,y) (x) < (y) ? (x) : (y)\nint tot;\nstruct node{\n\tint fa,rank,lson,rson,mn;\n\tnode(){}\n\tbool operator == (const node &w){\n\t\treturn fa == w.fa;\n\t}\n\tbool operator != (const node &w){\n\t\treturn fa != w.fa;\n\t}\n}t[maxm*40];\nint dist[maxn];bool vis[maxn];\ninline void build(int &o,int l,int r){\n\to = ++tot;\n\tif (l==r){\n\t\tt[o] . rank = 1;\n\t\tt[o] . fa = l;\n\t\tt[o] . mn = dist[l];\n\t\treturn ;\n\t}\n\tt[o] . lson = t[o] . rson = 0;\n\tbuild(t[o].lson,l,mid);\n\tbuild(t[o].rson,mid+1,r);\n}\n\ninline void add(int &o,int l,int r,int x,int mn,int wzp){\n\t++tot;\n\tt[tot] = t[o];\n\to = tot;\n\tif (l==r){\n\t\tt[o] . rank = t[o] . rank + wzp;\n\t\tt[o] . mn = min(t[o].mn,mn);\n\t\treturn ;\n\t}\n\tif (x <= mid) add(t[o].lson,l,mid,x,mn,wzp); else\n\t\t\t\t  add(t[o].rson,mid+1,r,x,mn,wzp);\n}\n\ninline void update(int &o,int l,int r,int x,int fa){\n\t++tot;\n\tt[tot] = t[o];\n\to = tot;\n\tif (l==r){\n\t\tt[o] . fa = fa;\n\t\treturn ;\n\t}\n\tif (x<=mid) update(t[o].lson,l,mid,x,fa); else\n\t\t\t\tupdate(t[o].rson,mid+1,r,x,fa);\n}\n\ninline node query(int o,int l,int r,int x){\n\tif (l==r) return t[o];\n\tif (x<=mid) return query(t[o].lson,l,mid,x); else\n\t\t\t\treturn query(t[o].rson,mid+1,r,x);\n}\n\ninline node find(int root,int x){\n\tnode tmp = query(root,1,n,x);\n\tif (tmp.fa == x) return tmp;\n\treturn find(root,tmp.fa);\n}\n\nvoid merge(int &rt,node x,node y){\n\tif(x.rank > y.rank) swap(x,y);\n\tupdate(rt,1,n,x.fa,y.fa);//puts(\"\");\n\tadd(rt,1,n,y.fa,x.mn,x.rank==y.rank);\n}\n\nstruct Edge{\n\tint to,nxt,dist;\n\tEdge(){}\n\tEdge(int to,int nxt,int dist):\n\t\tto(to),nxt(nxt),dist(dist){}\n}edge[maxm * 5];\nint first[maxn],nume;\nvoid Addedge(int a,int b,int c){\n\tedge[nume] = Edge(b,first[a],c);\n\tfirst[a] = nume++;\n\tedge[nume] = Edge(a,first[b],c);\n\tfirst[b] = nume++;\n}\n\npriority_queue<pair<int,int> > Q;\n#define Mk make_pair\ninline void dijkstra(int S){\n\tRep(i,1,n) dist[i] = inf,vis[i] = false;\n\tQ.push(Mk(-0,S));dist[S] = 0;\n\twhile(!Q.empty()){\n\t\tint u = Q.top().second;Q.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u] = true;\n\t\tfor(int e=first[u];~e;e=edge[e].nxt){\n\t\t\tint v = edge[e].to;\n\t\t\tif(dist[v] > dist[u] + edge[e].dist){\n\t\t\t\tdist[v] = dist[u] + edge[e].dist;\n\t\t\t\tQ.push(Mk(-dist[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\nstruct A{\n\tint u,v,l,a;\n\tbool operator < (const A&w) const{\n\t\treturn a < w.a;\n\t}\n}a[maxm];\nint y[maxn];\ninline void init(){\n\tn = rd(),m = rd();\n\tnume = 0;\n\tRep(i,1,n) first[i] = -1;\n\tRep(i,1,m){\n\t\ta[i].u = rd(),a[i].v = rd(),a[i].l = rd(),a[i].a = rd();\n\t\tAddedge(a[i].u,a[i].v,a[i].l);\n\t\ty[++*y] = a[i].a;\n\t}\n\tdijkstra(1);\n\tsort(y+1,y+1+*y);\n\t*y = unique(y+1,y+1+*y) - y - 1;\n\tRep(i,1,m) a[i].a = lower_bound(y+1,y+1+*y,a[i].a) - y;\n\tRep(i,1,m){\n\t\ta[i] . a = *y - a[i].a + 1;\n\t}\n\tsort(a+1,a+1+m);\n\troot[0] = 0;\n\ttot = 0;\n\tbuild(root[0],1,n);\n\tfor(int i=1,j=1;i<=m;i=j+1){\n\t\tfor(j=i;j<=m && a[i].a==a[j+1].a;++j);\n\t\troot[a[i].a] = root[a[i].a-1];\n\t\tRep(k,i,j){\n\t\t\tnode x = find(root[a[k].a],a[k].u);\n\t\t\tnode y = find(root[a[k].a],a[k].v);\n\t\t\tif(x != y) merge(root[a[k].a],x,y);\n\t\t}\n\t}\n}\ninline void solve(){\n\tinit();\n\tint Q = rd(),K = rd(),S = rd(),lastans = 0;\n\twhile(Q--){\n\t\tint v0=rd(),p0=rd();\n\t\tint v = (v0 + K * lastans - 1) % n + 1;\n\t\tint p = (p0 + K * lastans) % (S+1);\n\t\tp = upper_bound(y+1,y+1+*y,p) - y - 1;\n\t\tp= *y - p;\n\t\t//找到可能的那个p\n\t\tnode tmp = find(root[p],v);\n\t\twriteln(lastans = tmp . mn);\n\t}\n}\n\nint main(){\n\tfreopen(\"return.in\",\"r\",stdin);\n\tfreopen(\"return.out\",\"w\",stdout);\n\tint T = rd();\n\twhile(T--) solve();\n\treturn 0;\n}\n```\n\n100分做法：初始化离散化数组。\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\nconst int inf = 0x7fffffff;\n#define Rep(i,a,b) for(register int i=(a);i<=int(b);++i)\n#define Dep(i,a,b) for(register int i=(a);i>=int(b);--i)\n#define rep(i,a,b) for(register int i=(a);i<int(b);++i)\n#define mem(x,v) memset(x,v,sizeof(x))\n#define pc putchar\n#define gc getchar\n#define fi first\n#define se second\n#define debug(x) cout << #x\" = \" << x << endl;\n#define pp(x,y) cout << \"pp: \" << x << \" \" << y << endl;\n#define rank __RANK\ninline ll read(){\n\tregister ll x=0,f=1;register char c=gc();\n\tfor(;!isdigit(c);c=gc())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n\treturn x*f;\n}\n#define rd read\ndouble readdb(){\n\tdouble x=0,p=0.1;char f=0,c=gc();\n\tfor(;!isdigit(c);c=gc())f|=(c=='-');\n\tfor(;isdigit(c);c=gc())x=x*10+(c^48);\n\tif(c=='.')for(c=gc();isdigit(c);c=gc(),p/=10)x=x+(c^48)*p;\n\treturn f?-x:x;\n}\n#define rdb() readdb()\nvoid write(ll x){if(x<0)x=-x,pc('-');if(x>=10)write(x/10);putchar(x%10+'0');}\nvoid writeln(ll x){write(x);puts(\"\");}\nconst int maxn = 4e5+233;\nconst int maxm = 4e5+233;\nint n,m,ans,root[maxn];\n#define mid ((l+r)>>1)\n#define min(x,y) (x) < (y) ? (x) : (y)\nint tot;\nstruct node{\n\tint fa,rank,lson,rson,mn;\n\tnode(){}\n\tbool operator == (const node &w){\n\t\treturn fa == w.fa;\n\t}\n\tbool operator != (const node &w){\n\t\treturn fa != w.fa;\n\t}\n}t[maxm*40];\nint dist[maxn];bool vis[maxn];\ninline void build(int &o,int l,int r){\n\to = ++tot;\n\tif (l==r){\n\t\tt[o] . rank = 1;\n\t\tt[o] . fa = l;\n\t\tt[o] . mn = dist[l];\n\t\treturn ;\n\t}\n\tt[o] . lson = t[o] . rson = 0;\n\tbuild(t[o].lson,l,mid);\n\tbuild(t[o].rson,mid+1,r);\n}\n\ninline void add(int &o,int l,int r,int x,int mn,int wzp){\n\t++tot;\n\tt[tot] = t[o];\n\to = tot;\n\tif (l==r){\n\t\tt[o] . rank = t[o] . rank + wzp;\n\t\tt[o] . mn = min(t[o].mn,mn);\n\t\treturn ;\n\t}\n\tif (x <= mid) add(t[o].lson,l,mid,x,mn,wzp); else\n\t\t\t\t  add(t[o].rson,mid+1,r,x,mn,wzp);\n}\n\ninline void update(int &o,int l,int r,int x,int fa){\n\t++tot;\n\tt[tot] = t[o];\n\to = tot;\n\tif (l==r){\n\t\tt[o] . fa = fa;\n\t\treturn ;\n\t}\n\tif (x<=mid) update(t[o].lson,l,mid,x,fa); else\n\t\t\t\tupdate(t[o].rson,mid+1,r,x,fa);\n}\n\ninline node query(int o,int l,int r,int x){\n\tif (l==r) return t[o];\n\tif (x<=mid) return query(t[o].lson,l,mid,x); else\n\t\t\t\treturn query(t[o].rson,mid+1,r,x);\n}\n\ninline node find(int root,int x){\n\tnode tmp = query(root,1,n,x);\n\tif (tmp.fa == x) return tmp;\n\treturn find(root,tmp.fa);\n}\n\nvoid merge(int &rt,node x,node y){\n\tif(x.rank > y.rank) swap(x,y);\n\tupdate(rt,1,n,x.fa,y.fa);//puts(\"\");\n\tadd(rt,1,n,y.fa,x.mn,x.rank==y.rank);\n}\n\nstruct Edge{\n\tint to,nxt,dist;\n\tEdge(){}\n\tEdge(int to,int nxt,int dist):\n\t\tto(to),nxt(nxt),dist(dist){}\n}edge[maxm * 5];\nint first[maxn],nume;\nvoid Addedge(int a,int b,int c){\n\tedge[nume] = Edge(b,first[a],c);\n\tfirst[a] = nume++;\n\tedge[nume] = Edge(a,first[b],c);\n\tfirst[b] = nume++;\n}\n\npriority_queue<pair<int,int> > Q;\n#define Mk make_pair\ninline void dijkstra(int S){\n\tRep(i,1,n) dist[i] = inf,vis[i] = false;\n\tQ.push(Mk(-0,S));dist[S] = 0;\n\twhile(!Q.empty()){\n\t\tint u = Q.top().second;Q.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u] = true;\n\t\tfor(int e=first[u];~e;e=edge[e].nxt){\n\t\t\tint v = edge[e].to;\n\t\t\tif(dist[v] > dist[u] + edge[e].dist){\n\t\t\t\tdist[v] = dist[u] + edge[e].dist;\n\t\t\t\tQ.push(Mk(-dist[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\nstruct A{\n\tint u,v,l,a;\n\tbool operator < (const A&w) const{\n\t\treturn a < w.a;\n\t}\n}a[maxm];\nint y[maxn];\ninline void init(){\n\tn = rd(),m = rd();\n\tnume = 0;*y = 0;\n\tRep(i,1,n) first[i] = -1;\n\tRep(i,1,m){\n\t\ta[i].u = rd(),a[i].v = rd(),a[i].l = rd(),a[i].a = rd();\n\t\tAddedge(a[i].u,a[i].v,a[i].l);\n\t\ty[++*y] = a[i].a;\n\t}\n\tdijkstra(1);\n\tsort(y+1,y+1+*y);\n\t*y = unique(y+1,y+1+*y) - y - 1;\n\tRep(i,1,m) a[i].a = lower_bound(y+1,y+1+*y,a[i].a) - y;\n\tRep(i,1,m){\n\t\ta[i] . a = *y - a[i].a + 1;\n\t}\n\tsort(a+1,a+1+m);\n\troot[0] = 0;\n\ttot = 0;\n\tbuild(root[0],1,n);\n\tfor(int i=1,j=1;i<=m;i=j+1){\n\t\tfor(j=i;j<=m && a[i].a==a[j+1].a;++j);\n\t\troot[a[i].a] = root[a[i].a-1];\n\t\tRep(k,i,j){\n\t\t\tnode x = find(root[a[k].a],a[k].u);\n\t\t\tnode y = find(root[a[k].a],a[k].v);\n\t\t\tif(x != y) merge(root[a[k].a],x,y);\n\t\t}\n\t}\n}\ninline void solve(){\n\tinit();\n\tint Q = rd(),K = rd(),S = rd(),lastans = 0;\n\twhile(Q--){\n\t\tint v0=rd(),p0=rd();\n\t\tint v = (v0 + K * lastans - 1) % n + 1;\n\t\tint p = (p0 + K * lastans) % (S+1);\n\t\tp = upper_bound(y+1,y+1+*y,p) - y - 1;\n\t\tp= *y - p;\n\t\t//找到可能的那个p\n\t\tnode tmp = find(root[p],v);\n\t\twriteln(lastans = tmp . mn);\n\t}\n}\n\nint main(){\n\tfreopen(\"return.in\",\"r\",stdin);\n\tfreopen(\"return.out\",\"w\",stdout);\n\tint T = rd();\n\twhile(T--) solve();\n\treturn 0;\n}\n```\n\n\n\n\n\n### 「NOI2018」你的名字\n\n68分做法\n\n​\t建出广义后缀自动机。\n\n​\t求出最后出现位置，暴力跳后缀链接。\n\n​\t时间复杂度$O(n \\sqrt n)$\n\n​\t常数很小。\n\n56分做法：\n\n​\t把前面直接维护的东西改成线段树合并爆right集合，并判断。（搏一搏单车变空气）\n\n​\t时间复杂度$O(n \\sqrt n log (n))$\n\n​\t常数很小。但还是要5~6s。\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\nconst int inf = 0x7fffffff;\n#define Rep(i,a,b) for(register int i=(a);i<=int(b);++i)\n#define Dep(i,a,b) for(register int i=(a);i>=int(b);--i)\n#define rep(i,a,b) for(register int i=(a);i<int(b);++i)\n#define mem(x,v) memset(x,v,sizeof(x))\n#define pc putchar\n#define gc getchar\n#define fi first\n#define se second\n#define debug(x) cout << #x\" = \" << x << endl;\n#define pp(x,y) cout << \"pp: \" << x << \" \" << y << endl;\n#define rank __RANK\ninline ll read(){\n\tregister ll x=0,f=1;register char c=gc();\n\tfor(;!isdigit(c);c=gc())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n\treturn x*f;\n}\n#define rd read\nvoid write(ll x){if(x<0)x=-x,pc('-');if(x>=10)write(x/10);putchar(x%10+'0');}\nvoid writeln(ll x){write(x);puts(\"\");}\nconst int maxn = 2e6+233;\nbool sub[maxn];\nvector<int> V[maxn];\nchar s[maxn],t[maxn];\nint n;\nbool vis[maxn];\nint st[maxn],top,l[maxn],r[maxn],root[maxn];\n#define mid ((l+r)>>1)\nint lc[maxn*40],rc[maxn*40],tot=0,N;\ninline int merge(int x,int y){\n\tif(!x || !y) return x|y;\n\tint now = ++tot;\n\tlc[now] = merge(lc[x],lc[y]);\n\trc[now] = merge(rc[x],rc[y]);\n\treturn now;\n}\n\ninline void modify(int &o,int l,int r,int x){\n\tif(!o) o = ++tot;\n\tif(l==r) return ;\n\tif(x <= mid) modify(lc[o],l,mid,x); else\n\t\t\t\t modify(rc[o],mid+1,r,x);\n}\n\ninline int query(int o,int l,int r,int x,int y){\n\tif(!o) return false;\n\tif(l==r) return l;\n\tif(y<=mid) return query(lc[o],l,mid,x,y); else\n\tif(mid+1<=x) return query(rc[o],mid+1,r,x,y); else{\n\t\tint x = query(rc[o],mid+1,r,mid+1,y);\n\t\tif(x) return x;\n\t\treturn query(lc[o],l,mid,x,mid);\n\t}\n}\n\nstruct SuffixAutomaton{\n\tstruct node{\n\t\tint nxt[26],link,max;\n\t}T[maxn];\n\tint start,last;\n\tint tot;\n\tSuffixAutomaton(){\n\t\ttot = 0;\n\t\tstart = last = newnode(0);\n\t}\n\tint newnode(int max){\n\t\tint x = ++tot;\n\t\tT[x] . max = max;\n\t\tmem(T[x].nxt,0);\n\t\tT[x] . link = 0;\n\t\treturn x;\n\t}\n\tinline int extend(int c,int flag){\n\t\tint u = newnode(T[last] . max + 1),v = last;\n\t\tif(flag != -1){\n\t\t\tmodify(root[u],1,N,flag);\n\t\t}\n\t\tfor(;v && !T[v].nxt[c];v = T[v].link)\n\t\t\tT[v].nxt[c] = u;\n\t\tif(!v){\n\t\t\tT[u] . link = start;\n\t\t} else\n\t\tif(T[T[v].nxt[c]].max == T[v].max + 1){\n\t\t\tT[u].link = T[v].nxt[c];\n\t\t} else{\n\t\t\tint n = newnode(T[v].max+1),o = T[v].nxt[c];\n\t\t\trep(k,0,26) T[n].nxt[k] = T[o].nxt[k];\n\t\t\tT[n] . link = T[o].link;\n\t\t\tT[o].link = T[u].link = n;\n\t\t\tfor(;v && T[v].nxt[c] == o;v=T[v].link)\n\t\t\t\tT[v].nxt[c] = n;\n\t\t}\n\t\treturn last = u;\n\t}\n\tvector<int> V[maxn];\n\tinline void dfs(int u){\n\t\tfor(unsigned i=0;i<V[u].size();++i){\n\t\t\tint v = V[u][i];\n\t\t\tdfs(v);\n\t\t\troot[u] = merge(root[u],root[v]);\n\t\t}\n\t}\n\tinline void topsort(){\n\t\tRep(i,2,tot)\n\t\t\tV[T[i].link] . push_back(int(i));\n\t\tdfs(1);\n\t}\n}sam;\nint main(){\n\tfreopen(\"name.in\",\"r\",stdin);\n\tfreopen(\"name.out\",\"w\",stdout);\n\tscanf(\"%s\",s);N = strlen(s);\n\tfor(int i=0;s[i];++i) sam.extend(s[i] - 'a',i+1);\n\tn = rd();\n\tRep(i,1,n){\n\t\tscanf(\"%s\",t);\n\t\tsam.last = sam.start;\n\t\tfor(int j=0;t[j];++j){\n\t\t\tV[i].push_back(sam.extend(t[j] - 'a',-1));\n\t\t}\n\t\tl[i] = rd(),r[i] = rd();\n\t}\n\tsam.topsort();\n\tmem(vis,false);\n\tvis[1] = true;\n\tRep(i,1,n){\n\t\tregister ll ans = 0;\n\t\ttop = 0;\n\t\tfor(register unsigned j=0;j<V[i].size();++j){\n\t\t\tregister int x = V[i][j];\n\t\t\tfor(;!vis[x];x = sam.T[x].link){\n\t\t\t\tst[++top] = x;\n\t\t\t\tvis[x] = true;\n\t\t\t\tregister int X = query(root[x],1,N,l[i],r[i]);\n\t\t\t\tif(!X){\n\t\t\t\t\tans += sam.T[x].max - sam.T[sam.T[x].link].max;\n\t\t\t\t} else{\n\t\t\t\t\tint len = X - l[i] + 1;\n\t\t\t\t\t//长度在1..len都不行\n\t\t\t\t\tans += max(0,sam.T[x].max - max(sam.T[sam.T[x].link].max,len));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(;top;top--) vis[st[top]] = false;\n\t\twriteln(ans);\n\t}\n\treturn 0;\n}\n```\n\n100分做法：\n\t加一句如果已经找到直接break的优化……\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\nconst int inf = 0x7fffffff;\n#define Rep(i,a,b) for(register int i=(a);i<=int(b);++i)\n#define Dep(i,a,b) for(register int i=(a);i>=int(b);--i)\n#define rep(i,a,b) for(register int i=(a);i<int(b);++i)\n#define mem(x,v) memset(x,v,sizeof(x))\n#define pc putchar\n#define gc getchar\n#define fi first\n#define se second\n#define debug(x) cout << #x\" = \" << x << endl;\n#define pp(x,y) cout << \"pp: \" << x << \" \" << y << endl;\n#define rank __RANK\ninline ll read(){\n\tregister ll x=0,f=1;register char c=gc();\n\tfor(;!isdigit(c);c=gc())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n\treturn x*f;\n}\n#define rd read\nvoid write(ll x){if(x<0)x=-x,pc('-');if(x>=10)write(x/10);putchar(x%10+'0');}\nvoid writeln(ll x){write(x);puts(\"\");}\nconst int maxn = 2e6+233;\nbool sub[maxn];\nvector<int> V[maxn];\nchar s[maxn],t[maxn];\nint n;\nbool vis[maxn];\nint st[maxn],top,l[maxn],r[maxn],root[maxn];\n#define mid ((l+r)>>1)\nint lc[maxn*40],rc[maxn*40],tot=0,N;\ninline int merge(int x,int y){\n\tif(!x || !y) return x|y;\n\tint now = ++tot;\n\tlc[now] = merge(lc[x],lc[y]);\n\trc[now] = merge(rc[x],rc[y]);\n\treturn now;\n}\n\ninline void modify(int &o,int l,int r,int x){\n\tif(!o) o = ++tot;\n\tif(l==r) return ;\n\tif(x <= mid) modify(lc[o],l,mid,x); else\n\t\t\t\t modify(rc[o],mid+1,r,x);\n}\n\ninline int query(int o,int l,int r,int x,int y){\n\tif(!o) return false;\n\tif(l==r) return l;\n\tif(y<=mid) return query(lc[o],l,mid,x,y); else\n\tif(mid+1<=x) return query(rc[o],mid+1,r,x,y); else{\n\t\tint x = query(rc[o],mid+1,r,mid+1,y);\n\t\tif(x) return x;\n\t\treturn query(lc[o],l,mid,x,mid);\n\t}\n}\n\nstruct SuffixAutomaton{\n\tstruct node{\n\t\tint nxt[26],link,max;\n\t}T[maxn];\n\tint start,last;\n\tint tot;\n\tSuffixAutomaton(){\n\t\ttot = 0;\n\t\tstart = last = newnode(0);\n\t}\n\tint newnode(int max){\n\t\tint x = ++tot;\n\t\tT[x] . max = max;\n\t\tmem(T[x].nxt,0);\n\t\tT[x] . link = 0;\n\t\treturn x;\n\t}\n\tinline int extend(int c,int flag){\n\t\tint u = newnode(T[last] . max + 1),v = last;\n\t\tif(flag != -1){\n\t\t\tmodify(root[u],1,N,flag);\n\t\t}\n\t\tfor(;v && !T[v].nxt[c];v = T[v].link)\n\t\t\tT[v].nxt[c] = u;\n\t\tif(!v){\n\t\t\tT[u] . link = start;\n\t\t} else\n\t\tif(T[T[v].nxt[c]].max == T[v].max + 1){\n\t\t\tT[u].link = T[v].nxt[c];\n\t\t} else{\n\t\t\tint n = newnode(T[v].max+1),o = T[v].nxt[c];\n\t\t\trep(k,0,26) T[n].nxt[k] = T[o].nxt[k];\n\t\t\tT[n] . link = T[o].link;\n\t\t\tT[o].link = T[u].link = n;\n\t\t\tfor(;v && T[v].nxt[c] == o;v=T[v].link)\n\t\t\t\tT[v].nxt[c] = n;\n\t\t}\n\t\treturn last = u;\n\t}\n\tvector<int> V[maxn];\n\tinline void dfs(int u){\n\t\tfor(unsigned i=0;i<V[u].size();++i){\n\t\t\tint v = V[u][i];\n\t\t\tdfs(v);\n\t\t\troot[u] = merge(root[u],root[v]);\n\t\t}\n\t}\n\tinline void topsort(){\n\t\tRep(i,2,tot)\n\t\t\tV[T[i].link] . push_back(int(i));\n\t\tdfs(1);\n\t}\n}sam;\nint main(){\n\tfreopen(\"name.in\",\"r\",stdin);\n\tfreopen(\"name.out\",\"w\",stdout);\n\tscanf(\"%s\",s);N = strlen(s);\n\tfor(int i=0;s[i];++i) sam.extend(s[i] - 'a',i+1);\n\tn = rd();\n\tRep(i,1,n){\n\t\tscanf(\"%s\",t);\n\t\tsam.last = sam.start;\n\t\tfor(int j=0;t[j];++j){\n\t\t\tV[i].push_back(sam.extend(t[j] - 'a',-1));\n\t\t}\n\t\tl[i] = rd(),r[i] = rd();\n\t}\n\tsam.topsort();\n\tmem(vis,false);\n\tvis[1] = true;\n\tRep(i,1,n){\n\t\tregister ll ans = 0;\n\t\ttop = 0;\n\t\tfor(register unsigned j=0;j<V[i].size();++j){\n\t\t\tregister int x = V[i][j];\n\t\t\tfor(;!vis[x];x = sam.T[x].link){\n\t\t\t\tst[++top] = x;\n\t\t\t\tvis[x] = true;\n\t\t\t\tregister int X = query(root[x],1,N,l[i],r[i]);\n\t\t\t\tif(!X){\n\t\t\t\t\tans += sam.T[x].max - sam.T[sam.T[x].link].max;\n\t\t\t\t} else{\n\t\t\t\t\tint len = X - l[i] + 1;\n\t\t\t\t\t//长度在1..len都不行\n\t\t\t\t\tif(len < sam.T[sam.T[x].link].max){\n\t\t\t\t\t\tans += sam.T[x].max - sam.T[sam.T[x].link].max;\n\t\t\t\t\t} else{\n\t\t\t\t\t\tans += max(0,sam.T[x].max - len);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(;top;top--) vis[st[top]] = false;\n\t\twriteln(ans);\n\t}\n\treturn 0;\n}\n```\n\n","source":"_posts/滚粗记/NOI2018同步赛体验记.md","raw":"---\ntitle: NOI2018同步赛体验记\ntags: \n - 游记\n - 后缀自动机\n - 线段树\n - 最短路\n---\n\n啥都不会的选手只会暴力。\n\nDay1得分是25+44+56。\n\nDay2 $LOJ$上的得分是85+30+25。\n\n加上50分笔试分。差银牌线7分。\n\n<!--more-->\n\n### 「NOI2018」归程\n\n25分做法：求出最短路后直接可持久化并查集维护。\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\nconst int inf = 0x7fffffff;\n#define Rep(i,a,b) for(register int i=(a);i<=int(b);++i)\n#define Dep(i,a,b) for(register int i=(a);i>=int(b);--i)\n#define rep(i,a,b) for(register int i=(a);i<int(b);++i)\n#define mem(x,v) memset(x,v,sizeof(x))\n#define pc putchar\n#define gc getchar\n#define fi first\n#define se second\n#define debug(x) cout << #x\" = \" << x << endl;\n#define pp(x,y) cout << \"pp: \" << x << \" \" << y << endl;\n#define rank __RANK\ninline ll read(){\n\tregister ll x=0,f=1;register char c=gc();\n\tfor(;!isdigit(c);c=gc())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n\treturn x*f;\n}\n#define rd read\ndouble readdb(){\n\tdouble x=0,p=0.1;char f=0,c=gc();\n\tfor(;!isdigit(c);c=gc())f|=(c=='-');\n\tfor(;isdigit(c);c=gc())x=x*10+(c^48);\n\tif(c=='.')for(c=gc();isdigit(c);c=gc(),p/=10)x=x+(c^48)*p;\n\treturn f?-x:x;\n}\n#define rdb() readdb()\nvoid write(ll x){if(x<0)x=-x,pc('-');if(x>=10)write(x/10);putchar(x%10+'0');}\nvoid writeln(ll x){write(x);puts(\"\");}\nconst int maxn = 2e5+233;\nconst int maxm = 4e5+233;\nint n,m,ans,root[maxn];\n#define mid ((l+r)>>1)\n#define min(x,y) (x) < (y) ? (x) : (y)\nint tot;\nstruct node{\n\tint fa,rank,lson,rson,mn;\n\tnode(){}\n\tbool operator == (const node &w){\n\t\treturn fa == w.fa;\n\t}\n\tbool operator != (const node &w){\n\t\treturn fa != w.fa;\n\t}\n}t[maxm*40];\nint dist[maxn];bool vis[maxn];\ninline void build(int &o,int l,int r){\n\to = ++tot;\n\tif (l==r){\n\t\tt[o] . rank = 1;\n\t\tt[o] . fa = l;\n\t\tt[o] . mn = dist[l];\n\t\treturn ;\n\t}\n\tt[o] . lson = t[o] . rson = 0;\n\tbuild(t[o].lson,l,mid);\n\tbuild(t[o].rson,mid+1,r);\n}\n\ninline void add(int &o,int l,int r,int x,int mn,int wzp){\n\t++tot;\n\tt[tot] = t[o];\n\to = tot;\n\tif (l==r){\n\t\tt[o] . rank = t[o] . rank + wzp;\n\t\tt[o] . mn = min(t[o].mn,mn);\n\t\treturn ;\n\t}\n\tif (x <= mid) add(t[o].lson,l,mid,x,mn,wzp); else\n\t\t\t\t  add(t[o].rson,mid+1,r,x,mn,wzp);\n}\n\ninline void update(int &o,int l,int r,int x,int fa){\n\t++tot;\n\tt[tot] = t[o];\n\to = tot;\n\tif (l==r){\n\t\tt[o] . fa = fa;\n\t\treturn ;\n\t}\n\tif (x<=mid) update(t[o].lson,l,mid,x,fa); else\n\t\t\t\tupdate(t[o].rson,mid+1,r,x,fa);\n}\n\ninline node query(int o,int l,int r,int x){\n\tif (l==r) return t[o];\n\tif (x<=mid) return query(t[o].lson,l,mid,x); else\n\t\t\t\treturn query(t[o].rson,mid+1,r,x);\n}\n\ninline node find(int root,int x){\n\tnode tmp = query(root,1,n,x);\n\tif (tmp.fa == x) return tmp;\n\treturn find(root,tmp.fa);\n}\n\nvoid merge(int &rt,node x,node y){\n\tif(x.rank > y.rank) swap(x,y);\n\tupdate(rt,1,n,x.fa,y.fa);//puts(\"\");\n\tadd(rt,1,n,y.fa,x.mn,x.rank==y.rank);\n}\n\nstruct Edge{\n\tint to,nxt,dist;\n\tEdge(){}\n\tEdge(int to,int nxt,int dist):\n\t\tto(to),nxt(nxt),dist(dist){}\n}edge[maxm * 5];\nint first[maxn],nume;\nvoid Addedge(int a,int b,int c){\n\tedge[nume] = Edge(b,first[a],c);\n\tfirst[a] = nume++;\n\tedge[nume] = Edge(a,first[b],c);\n\tfirst[b] = nume++;\n}\n\npriority_queue<pair<int,int> > Q;\n#define Mk make_pair\ninline void dijkstra(int S){\n\tRep(i,1,n) dist[i] = inf,vis[i] = false;\n\tQ.push(Mk(-0,S));dist[S] = 0;\n\twhile(!Q.empty()){\n\t\tint u = Q.top().second;Q.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u] = true;\n\t\tfor(int e=first[u];~e;e=edge[e].nxt){\n\t\t\tint v = edge[e].to;\n\t\t\tif(dist[v] > dist[u] + edge[e].dist){\n\t\t\t\tdist[v] = dist[u] + edge[e].dist;\n\t\t\t\tQ.push(Mk(-dist[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\nstruct A{\n\tint u,v,l,a;\n\tbool operator < (const A&w) const{\n\t\treturn a < w.a;\n\t}\n}a[maxm];\nint y[maxn];\ninline void init(){\n\tn = rd(),m = rd();\n\tnume = 0;\n\tRep(i,1,n) first[i] = -1;\n\tRep(i,1,m){\n\t\ta[i].u = rd(),a[i].v = rd(),a[i].l = rd(),a[i].a = rd();\n\t\tAddedge(a[i].u,a[i].v,a[i].l);\n\t\ty[++*y] = a[i].a;\n\t}\n\tdijkstra(1);\n\tsort(y+1,y+1+*y);\n\t*y = unique(y+1,y+1+*y) - y - 1;\n\tRep(i,1,m) a[i].a = lower_bound(y+1,y+1+*y,a[i].a) - y;\n\tRep(i,1,m){\n\t\ta[i] . a = *y - a[i].a + 1;\n\t}\n\tsort(a+1,a+1+m);\n\troot[0] = 0;\n\ttot = 0;\n\tbuild(root[0],1,n);\n\tfor(int i=1,j=1;i<=m;i=j+1){\n\t\tfor(j=i;j<=m && a[i].a==a[j+1].a;++j);\n\t\troot[a[i].a] = root[a[i].a-1];\n\t\tRep(k,i,j){\n\t\t\tnode x = find(root[a[k].a],a[k].u);\n\t\t\tnode y = find(root[a[k].a],a[k].v);\n\t\t\tif(x != y) merge(root[a[k].a],x,y);\n\t\t}\n\t}\n}\ninline void solve(){\n\tinit();\n\tint Q = rd(),K = rd(),S = rd(),lastans = 0;\n\twhile(Q--){\n\t\tint v0=rd(),p0=rd();\n\t\tint v = (v0 + K * lastans - 1) % n + 1;\n\t\tint p = (p0 + K * lastans) % (S+1);\n\t\tp = upper_bound(y+1,y+1+*y,p) - y - 1;\n\t\tp= *y - p;\n\t\t//找到可能的那个p\n\t\tnode tmp = find(root[p],v);\n\t\twriteln(lastans = tmp . mn);\n\t}\n}\n\nint main(){\n\tfreopen(\"return.in\",\"r\",stdin);\n\tfreopen(\"return.out\",\"w\",stdout);\n\tint T = rd();\n\twhile(T--) solve();\n\treturn 0;\n}\n```\n\n100分做法：初始化离散化数组。\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\nconst int inf = 0x7fffffff;\n#define Rep(i,a,b) for(register int i=(a);i<=int(b);++i)\n#define Dep(i,a,b) for(register int i=(a);i>=int(b);--i)\n#define rep(i,a,b) for(register int i=(a);i<int(b);++i)\n#define mem(x,v) memset(x,v,sizeof(x))\n#define pc putchar\n#define gc getchar\n#define fi first\n#define se second\n#define debug(x) cout << #x\" = \" << x << endl;\n#define pp(x,y) cout << \"pp: \" << x << \" \" << y << endl;\n#define rank __RANK\ninline ll read(){\n\tregister ll x=0,f=1;register char c=gc();\n\tfor(;!isdigit(c);c=gc())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n\treturn x*f;\n}\n#define rd read\ndouble readdb(){\n\tdouble x=0,p=0.1;char f=0,c=gc();\n\tfor(;!isdigit(c);c=gc())f|=(c=='-');\n\tfor(;isdigit(c);c=gc())x=x*10+(c^48);\n\tif(c=='.')for(c=gc();isdigit(c);c=gc(),p/=10)x=x+(c^48)*p;\n\treturn f?-x:x;\n}\n#define rdb() readdb()\nvoid write(ll x){if(x<0)x=-x,pc('-');if(x>=10)write(x/10);putchar(x%10+'0');}\nvoid writeln(ll x){write(x);puts(\"\");}\nconst int maxn = 4e5+233;\nconst int maxm = 4e5+233;\nint n,m,ans,root[maxn];\n#define mid ((l+r)>>1)\n#define min(x,y) (x) < (y) ? (x) : (y)\nint tot;\nstruct node{\n\tint fa,rank,lson,rson,mn;\n\tnode(){}\n\tbool operator == (const node &w){\n\t\treturn fa == w.fa;\n\t}\n\tbool operator != (const node &w){\n\t\treturn fa != w.fa;\n\t}\n}t[maxm*40];\nint dist[maxn];bool vis[maxn];\ninline void build(int &o,int l,int r){\n\to = ++tot;\n\tif (l==r){\n\t\tt[o] . rank = 1;\n\t\tt[o] . fa = l;\n\t\tt[o] . mn = dist[l];\n\t\treturn ;\n\t}\n\tt[o] . lson = t[o] . rson = 0;\n\tbuild(t[o].lson,l,mid);\n\tbuild(t[o].rson,mid+1,r);\n}\n\ninline void add(int &o,int l,int r,int x,int mn,int wzp){\n\t++tot;\n\tt[tot] = t[o];\n\to = tot;\n\tif (l==r){\n\t\tt[o] . rank = t[o] . rank + wzp;\n\t\tt[o] . mn = min(t[o].mn,mn);\n\t\treturn ;\n\t}\n\tif (x <= mid) add(t[o].lson,l,mid,x,mn,wzp); else\n\t\t\t\t  add(t[o].rson,mid+1,r,x,mn,wzp);\n}\n\ninline void update(int &o,int l,int r,int x,int fa){\n\t++tot;\n\tt[tot] = t[o];\n\to = tot;\n\tif (l==r){\n\t\tt[o] . fa = fa;\n\t\treturn ;\n\t}\n\tif (x<=mid) update(t[o].lson,l,mid,x,fa); else\n\t\t\t\tupdate(t[o].rson,mid+1,r,x,fa);\n}\n\ninline node query(int o,int l,int r,int x){\n\tif (l==r) return t[o];\n\tif (x<=mid) return query(t[o].lson,l,mid,x); else\n\t\t\t\treturn query(t[o].rson,mid+1,r,x);\n}\n\ninline node find(int root,int x){\n\tnode tmp = query(root,1,n,x);\n\tif (tmp.fa == x) return tmp;\n\treturn find(root,tmp.fa);\n}\n\nvoid merge(int &rt,node x,node y){\n\tif(x.rank > y.rank) swap(x,y);\n\tupdate(rt,1,n,x.fa,y.fa);//puts(\"\");\n\tadd(rt,1,n,y.fa,x.mn,x.rank==y.rank);\n}\n\nstruct Edge{\n\tint to,nxt,dist;\n\tEdge(){}\n\tEdge(int to,int nxt,int dist):\n\t\tto(to),nxt(nxt),dist(dist){}\n}edge[maxm * 5];\nint first[maxn],nume;\nvoid Addedge(int a,int b,int c){\n\tedge[nume] = Edge(b,first[a],c);\n\tfirst[a] = nume++;\n\tedge[nume] = Edge(a,first[b],c);\n\tfirst[b] = nume++;\n}\n\npriority_queue<pair<int,int> > Q;\n#define Mk make_pair\ninline void dijkstra(int S){\n\tRep(i,1,n) dist[i] = inf,vis[i] = false;\n\tQ.push(Mk(-0,S));dist[S] = 0;\n\twhile(!Q.empty()){\n\t\tint u = Q.top().second;Q.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u] = true;\n\t\tfor(int e=first[u];~e;e=edge[e].nxt){\n\t\t\tint v = edge[e].to;\n\t\t\tif(dist[v] > dist[u] + edge[e].dist){\n\t\t\t\tdist[v] = dist[u] + edge[e].dist;\n\t\t\t\tQ.push(Mk(-dist[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\nstruct A{\n\tint u,v,l,a;\n\tbool operator < (const A&w) const{\n\t\treturn a < w.a;\n\t}\n}a[maxm];\nint y[maxn];\ninline void init(){\n\tn = rd(),m = rd();\n\tnume = 0;*y = 0;\n\tRep(i,1,n) first[i] = -1;\n\tRep(i,1,m){\n\t\ta[i].u = rd(),a[i].v = rd(),a[i].l = rd(),a[i].a = rd();\n\t\tAddedge(a[i].u,a[i].v,a[i].l);\n\t\ty[++*y] = a[i].a;\n\t}\n\tdijkstra(1);\n\tsort(y+1,y+1+*y);\n\t*y = unique(y+1,y+1+*y) - y - 1;\n\tRep(i,1,m) a[i].a = lower_bound(y+1,y+1+*y,a[i].a) - y;\n\tRep(i,1,m){\n\t\ta[i] . a = *y - a[i].a + 1;\n\t}\n\tsort(a+1,a+1+m);\n\troot[0] = 0;\n\ttot = 0;\n\tbuild(root[0],1,n);\n\tfor(int i=1,j=1;i<=m;i=j+1){\n\t\tfor(j=i;j<=m && a[i].a==a[j+1].a;++j);\n\t\troot[a[i].a] = root[a[i].a-1];\n\t\tRep(k,i,j){\n\t\t\tnode x = find(root[a[k].a],a[k].u);\n\t\t\tnode y = find(root[a[k].a],a[k].v);\n\t\t\tif(x != y) merge(root[a[k].a],x,y);\n\t\t}\n\t}\n}\ninline void solve(){\n\tinit();\n\tint Q = rd(),K = rd(),S = rd(),lastans = 0;\n\twhile(Q--){\n\t\tint v0=rd(),p0=rd();\n\t\tint v = (v0 + K * lastans - 1) % n + 1;\n\t\tint p = (p0 + K * lastans) % (S+1);\n\t\tp = upper_bound(y+1,y+1+*y,p) - y - 1;\n\t\tp= *y - p;\n\t\t//找到可能的那个p\n\t\tnode tmp = find(root[p],v);\n\t\twriteln(lastans = tmp . mn);\n\t}\n}\n\nint main(){\n\tfreopen(\"return.in\",\"r\",stdin);\n\tfreopen(\"return.out\",\"w\",stdout);\n\tint T = rd();\n\twhile(T--) solve();\n\treturn 0;\n}\n```\n\n\n\n\n\n### 「NOI2018」你的名字\n\n68分做法\n\n​\t建出广义后缀自动机。\n\n​\t求出最后出现位置，暴力跳后缀链接。\n\n​\t时间复杂度$O(n \\sqrt n)$\n\n​\t常数很小。\n\n56分做法：\n\n​\t把前面直接维护的东西改成线段树合并爆right集合，并判断。（搏一搏单车变空气）\n\n​\t时间复杂度$O(n \\sqrt n log (n))$\n\n​\t常数很小。但还是要5~6s。\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\nconst int inf = 0x7fffffff;\n#define Rep(i,a,b) for(register int i=(a);i<=int(b);++i)\n#define Dep(i,a,b) for(register int i=(a);i>=int(b);--i)\n#define rep(i,a,b) for(register int i=(a);i<int(b);++i)\n#define mem(x,v) memset(x,v,sizeof(x))\n#define pc putchar\n#define gc getchar\n#define fi first\n#define se second\n#define debug(x) cout << #x\" = \" << x << endl;\n#define pp(x,y) cout << \"pp: \" << x << \" \" << y << endl;\n#define rank __RANK\ninline ll read(){\n\tregister ll x=0,f=1;register char c=gc();\n\tfor(;!isdigit(c);c=gc())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n\treturn x*f;\n}\n#define rd read\nvoid write(ll x){if(x<0)x=-x,pc('-');if(x>=10)write(x/10);putchar(x%10+'0');}\nvoid writeln(ll x){write(x);puts(\"\");}\nconst int maxn = 2e6+233;\nbool sub[maxn];\nvector<int> V[maxn];\nchar s[maxn],t[maxn];\nint n;\nbool vis[maxn];\nint st[maxn],top,l[maxn],r[maxn],root[maxn];\n#define mid ((l+r)>>1)\nint lc[maxn*40],rc[maxn*40],tot=0,N;\ninline int merge(int x,int y){\n\tif(!x || !y) return x|y;\n\tint now = ++tot;\n\tlc[now] = merge(lc[x],lc[y]);\n\trc[now] = merge(rc[x],rc[y]);\n\treturn now;\n}\n\ninline void modify(int &o,int l,int r,int x){\n\tif(!o) o = ++tot;\n\tif(l==r) return ;\n\tif(x <= mid) modify(lc[o],l,mid,x); else\n\t\t\t\t modify(rc[o],mid+1,r,x);\n}\n\ninline int query(int o,int l,int r,int x,int y){\n\tif(!o) return false;\n\tif(l==r) return l;\n\tif(y<=mid) return query(lc[o],l,mid,x,y); else\n\tif(mid+1<=x) return query(rc[o],mid+1,r,x,y); else{\n\t\tint x = query(rc[o],mid+1,r,mid+1,y);\n\t\tif(x) return x;\n\t\treturn query(lc[o],l,mid,x,mid);\n\t}\n}\n\nstruct SuffixAutomaton{\n\tstruct node{\n\t\tint nxt[26],link,max;\n\t}T[maxn];\n\tint start,last;\n\tint tot;\n\tSuffixAutomaton(){\n\t\ttot = 0;\n\t\tstart = last = newnode(0);\n\t}\n\tint newnode(int max){\n\t\tint x = ++tot;\n\t\tT[x] . max = max;\n\t\tmem(T[x].nxt,0);\n\t\tT[x] . link = 0;\n\t\treturn x;\n\t}\n\tinline int extend(int c,int flag){\n\t\tint u = newnode(T[last] . max + 1),v = last;\n\t\tif(flag != -1){\n\t\t\tmodify(root[u],1,N,flag);\n\t\t}\n\t\tfor(;v && !T[v].nxt[c];v = T[v].link)\n\t\t\tT[v].nxt[c] = u;\n\t\tif(!v){\n\t\t\tT[u] . link = start;\n\t\t} else\n\t\tif(T[T[v].nxt[c]].max == T[v].max + 1){\n\t\t\tT[u].link = T[v].nxt[c];\n\t\t} else{\n\t\t\tint n = newnode(T[v].max+1),o = T[v].nxt[c];\n\t\t\trep(k,0,26) T[n].nxt[k] = T[o].nxt[k];\n\t\t\tT[n] . link = T[o].link;\n\t\t\tT[o].link = T[u].link = n;\n\t\t\tfor(;v && T[v].nxt[c] == o;v=T[v].link)\n\t\t\t\tT[v].nxt[c] = n;\n\t\t}\n\t\treturn last = u;\n\t}\n\tvector<int> V[maxn];\n\tinline void dfs(int u){\n\t\tfor(unsigned i=0;i<V[u].size();++i){\n\t\t\tint v = V[u][i];\n\t\t\tdfs(v);\n\t\t\troot[u] = merge(root[u],root[v]);\n\t\t}\n\t}\n\tinline void topsort(){\n\t\tRep(i,2,tot)\n\t\t\tV[T[i].link] . push_back(int(i));\n\t\tdfs(1);\n\t}\n}sam;\nint main(){\n\tfreopen(\"name.in\",\"r\",stdin);\n\tfreopen(\"name.out\",\"w\",stdout);\n\tscanf(\"%s\",s);N = strlen(s);\n\tfor(int i=0;s[i];++i) sam.extend(s[i] - 'a',i+1);\n\tn = rd();\n\tRep(i,1,n){\n\t\tscanf(\"%s\",t);\n\t\tsam.last = sam.start;\n\t\tfor(int j=0;t[j];++j){\n\t\t\tV[i].push_back(sam.extend(t[j] - 'a',-1));\n\t\t}\n\t\tl[i] = rd(),r[i] = rd();\n\t}\n\tsam.topsort();\n\tmem(vis,false);\n\tvis[1] = true;\n\tRep(i,1,n){\n\t\tregister ll ans = 0;\n\t\ttop = 0;\n\t\tfor(register unsigned j=0;j<V[i].size();++j){\n\t\t\tregister int x = V[i][j];\n\t\t\tfor(;!vis[x];x = sam.T[x].link){\n\t\t\t\tst[++top] = x;\n\t\t\t\tvis[x] = true;\n\t\t\t\tregister int X = query(root[x],1,N,l[i],r[i]);\n\t\t\t\tif(!X){\n\t\t\t\t\tans += sam.T[x].max - sam.T[sam.T[x].link].max;\n\t\t\t\t} else{\n\t\t\t\t\tint len = X - l[i] + 1;\n\t\t\t\t\t//长度在1..len都不行\n\t\t\t\t\tans += max(0,sam.T[x].max - max(sam.T[sam.T[x].link].max,len));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(;top;top--) vis[st[top]] = false;\n\t\twriteln(ans);\n\t}\n\treturn 0;\n}\n```\n\n100分做法：\n\t加一句如果已经找到直接break的优化……\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\nconst int inf = 0x7fffffff;\n#define Rep(i,a,b) for(register int i=(a);i<=int(b);++i)\n#define Dep(i,a,b) for(register int i=(a);i>=int(b);--i)\n#define rep(i,a,b) for(register int i=(a);i<int(b);++i)\n#define mem(x,v) memset(x,v,sizeof(x))\n#define pc putchar\n#define gc getchar\n#define fi first\n#define se second\n#define debug(x) cout << #x\" = \" << x << endl;\n#define pp(x,y) cout << \"pp: \" << x << \" \" << y << endl;\n#define rank __RANK\ninline ll read(){\n\tregister ll x=0,f=1;register char c=gc();\n\tfor(;!isdigit(c);c=gc())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n\treturn x*f;\n}\n#define rd read\nvoid write(ll x){if(x<0)x=-x,pc('-');if(x>=10)write(x/10);putchar(x%10+'0');}\nvoid writeln(ll x){write(x);puts(\"\");}\nconst int maxn = 2e6+233;\nbool sub[maxn];\nvector<int> V[maxn];\nchar s[maxn],t[maxn];\nint n;\nbool vis[maxn];\nint st[maxn],top,l[maxn],r[maxn],root[maxn];\n#define mid ((l+r)>>1)\nint lc[maxn*40],rc[maxn*40],tot=0,N;\ninline int merge(int x,int y){\n\tif(!x || !y) return x|y;\n\tint now = ++tot;\n\tlc[now] = merge(lc[x],lc[y]);\n\trc[now] = merge(rc[x],rc[y]);\n\treturn now;\n}\n\ninline void modify(int &o,int l,int r,int x){\n\tif(!o) o = ++tot;\n\tif(l==r) return ;\n\tif(x <= mid) modify(lc[o],l,mid,x); else\n\t\t\t\t modify(rc[o],mid+1,r,x);\n}\n\ninline int query(int o,int l,int r,int x,int y){\n\tif(!o) return false;\n\tif(l==r) return l;\n\tif(y<=mid) return query(lc[o],l,mid,x,y); else\n\tif(mid+1<=x) return query(rc[o],mid+1,r,x,y); else{\n\t\tint x = query(rc[o],mid+1,r,mid+1,y);\n\t\tif(x) return x;\n\t\treturn query(lc[o],l,mid,x,mid);\n\t}\n}\n\nstruct SuffixAutomaton{\n\tstruct node{\n\t\tint nxt[26],link,max;\n\t}T[maxn];\n\tint start,last;\n\tint tot;\n\tSuffixAutomaton(){\n\t\ttot = 0;\n\t\tstart = last = newnode(0);\n\t}\n\tint newnode(int max){\n\t\tint x = ++tot;\n\t\tT[x] . max = max;\n\t\tmem(T[x].nxt,0);\n\t\tT[x] . link = 0;\n\t\treturn x;\n\t}\n\tinline int extend(int c,int flag){\n\t\tint u = newnode(T[last] . max + 1),v = last;\n\t\tif(flag != -1){\n\t\t\tmodify(root[u],1,N,flag);\n\t\t}\n\t\tfor(;v && !T[v].nxt[c];v = T[v].link)\n\t\t\tT[v].nxt[c] = u;\n\t\tif(!v){\n\t\t\tT[u] . link = start;\n\t\t} else\n\t\tif(T[T[v].nxt[c]].max == T[v].max + 1){\n\t\t\tT[u].link = T[v].nxt[c];\n\t\t} else{\n\t\t\tint n = newnode(T[v].max+1),o = T[v].nxt[c];\n\t\t\trep(k,0,26) T[n].nxt[k] = T[o].nxt[k];\n\t\t\tT[n] . link = T[o].link;\n\t\t\tT[o].link = T[u].link = n;\n\t\t\tfor(;v && T[v].nxt[c] == o;v=T[v].link)\n\t\t\t\tT[v].nxt[c] = n;\n\t\t}\n\t\treturn last = u;\n\t}\n\tvector<int> V[maxn];\n\tinline void dfs(int u){\n\t\tfor(unsigned i=0;i<V[u].size();++i){\n\t\t\tint v = V[u][i];\n\t\t\tdfs(v);\n\t\t\troot[u] = merge(root[u],root[v]);\n\t\t}\n\t}\n\tinline void topsort(){\n\t\tRep(i,2,tot)\n\t\t\tV[T[i].link] . push_back(int(i));\n\t\tdfs(1);\n\t}\n}sam;\nint main(){\n\tfreopen(\"name.in\",\"r\",stdin);\n\tfreopen(\"name.out\",\"w\",stdout);\n\tscanf(\"%s\",s);N = strlen(s);\n\tfor(int i=0;s[i];++i) sam.extend(s[i] - 'a',i+1);\n\tn = rd();\n\tRep(i,1,n){\n\t\tscanf(\"%s\",t);\n\t\tsam.last = sam.start;\n\t\tfor(int j=0;t[j];++j){\n\t\t\tV[i].push_back(sam.extend(t[j] - 'a',-1));\n\t\t}\n\t\tl[i] = rd(),r[i] = rd();\n\t}\n\tsam.topsort();\n\tmem(vis,false);\n\tvis[1] = true;\n\tRep(i,1,n){\n\t\tregister ll ans = 0;\n\t\ttop = 0;\n\t\tfor(register unsigned j=0;j<V[i].size();++j){\n\t\t\tregister int x = V[i][j];\n\t\t\tfor(;!vis[x];x = sam.T[x].link){\n\t\t\t\tst[++top] = x;\n\t\t\t\tvis[x] = true;\n\t\t\t\tregister int X = query(root[x],1,N,l[i],r[i]);\n\t\t\t\tif(!X){\n\t\t\t\t\tans += sam.T[x].max - sam.T[sam.T[x].link].max;\n\t\t\t\t} else{\n\t\t\t\t\tint len = X - l[i] + 1;\n\t\t\t\t\t//长度在1..len都不行\n\t\t\t\t\tif(len < sam.T[sam.T[x].link].max){\n\t\t\t\t\t\tans += sam.T[x].max - sam.T[sam.T[x].link].max;\n\t\t\t\t\t} else{\n\t\t\t\t\t\tans += max(0,sam.T[x].max - len);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(;top;top--) vis[st[top]] = false;\n\t\twriteln(ans);\n\t}\n\treturn 0;\n}\n```\n\n","slug":"滚粗记/NOI2018同步赛体验记","published":1,"date":"2021-08-28T13:02:40.632Z","updated":"2021-08-28T13:02:40.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvso353001xvfnufhuy9h4o","content":"<p>啥都不会的选手只会暴力。</p><p>Day1 得分是 25+44+56。</p><p>Day2 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mi>O</mi><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">LOJ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">L</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mord mathdefault\" style=\"margin-right:.09618em\">J</span></span></span></span>上的得分是 85+30+25。</p><p>加上 50 分笔试分。差银牌线 7 分。</p><a id=\"more\"></a><h3 id=\"noi2018 归程\"><a class=\"markdownIt-Anchor\" href=\"#noi2018 归程\"></a> 「NOI2018」归程</h3><p>25 分做法：求出最短路后直接可持久化并查集维护。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Rep(i,a,b) for(register int i=(a);i&lt;=int(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Dep(i,a,b) for(register int i=(a);i&gt;=int(b);--i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(register int i=(a);i&lt;int(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc getchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cout &lt;&lt; #x<span class=\"meta-string\">\"=\"</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pp(x,y) cout &lt;&lt; <span class=\"meta-string\">\"pp:\"</span> &lt;&lt; x &lt;&lt; <span class=\"meta-string\">\"\"</span> &lt;&lt; y &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rank __RANK</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> ll x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"keyword\">register</span> <span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rd read</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">readdb</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> x=<span class=\"number\">0</span>,p=<span class=\"number\">0.1</span>;<span class=\"keyword\">char</span> f=<span class=\"number\">0</span>,c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())f|=(c==<span class=\"string\">'-'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=x*<span class=\"number\">10</span>+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c==<span class=\"string\">'.'</span>)<span class=\"keyword\">for</span>(c=gc();<span class=\"built_in\">isdigit</span>(c);c=gc(),p/=<span class=\"number\">10</span>)x=x+(c^<span class=\"number\">48</span>)*p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f?-x:x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rdb() readdb()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)x=-x,pc(<span class=\"string\">'-'</span>);<span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">10</span>)<span class=\"built_in\">write</span>(x/<span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>(x%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2e5</span>+<span class=\"number\">233</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = <span class=\"number\">4e5</span>+<span class=\"number\">233</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,ans,root[maxn];</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> min(x,y) (x) &lt; (y) ? (x) : (y)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> tot;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> fa,rank,lson,rson,mn;</span><br><span class=\"line\">    node()&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (<span class=\"keyword\">const</span> node &amp;w)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa == w.fa;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> != (<span class=\"keyword\">const</span> node &amp;w)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa != w.fa;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;t[maxm*<span class=\"number\">40</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dist[maxn];<span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    o = ++tot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r)&#123;</span><br><span class=\"line\">        t[o] . rank = <span class=\"number\">1</span>;</span><br><span class=\"line\">        t[o] . fa = l;</span><br><span class=\"line\">        t[o] . mn = dist[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t[o] . lson = t[o] . rson = <span class=\"number\">0</span>;</span><br><span class=\"line\">    build(t[o].lson,l,mid);</span><br><span class=\"line\">    build(t[o].rson,mid+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> mn,<span class=\"keyword\">int</span> wzp)</span></span>&#123;</span><br><span class=\"line\">    ++tot;</span><br><span class=\"line\">    t[tot] = t[o];</span><br><span class=\"line\">    o = tot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r)&#123;</span><br><span class=\"line\">        t[o] . rank = t[o] . rank + wzp;</span><br><span class=\"line\">        t[o] . mn = <span class=\"built_in\">min</span>(t[o].mn,mn);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt;= mid) add(t[o].lson,l,mid,x,mn,wzp); <span class=\"keyword\">else</span></span><br><span class=\"line\">                  add(t[o].rson,mid+<span class=\"number\">1</span>,r,x,mn,wzp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">    ++tot;</span><br><span class=\"line\">    t[tot] = t[o];</span><br><span class=\"line\">    o = tot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r)&#123;</span><br><span class=\"line\">        t[o] . fa = fa;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;=mid) update(t[o].lson,l,mid,x,fa); <span class=\"keyword\">else</span></span><br><span class=\"line\">                update(t[o].rson,mid+<span class=\"number\">1</span>,r,x,fa);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> node <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span> t[o];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;=mid) <span class=\"keyword\">return</span> query(t[o].lson,l,mid,x); <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> query(t[o].rson,mid+<span class=\"number\">1</span>,r,x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> node <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> root,<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    node tmp = query(root,<span class=\"number\">1</span>,n,x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tmp.fa == x) <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(root,tmp.fa);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;rt,node x,node y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x.rank &gt; y.rank) swap(x,y);</span><br><span class=\"line\">    update(rt,<span class=\"number\">1</span>,n,x.fa,y.fa);<span class=\"comment\">//puts(\"\");</span></span><br><span class=\"line\">    add(rt,<span class=\"number\">1</span>,n,y.fa,x.mn,x.rank==y.rank);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,nxt,dist;</span><br><span class=\"line\">    Edge()&#123;&#125;</span><br><span class=\"line\">    Edge(<span class=\"keyword\">int</span> to,<span class=\"keyword\">int</span> nxt,<span class=\"keyword\">int</span> dist):</span><br><span class=\"line\">        to(to),nxt(nxt),dist(dist)&#123;&#125;</span><br><span class=\"line\">&#125;edge[maxm * <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> first[maxn],nume;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    edge[nume] = Edge(b,first[a],c);</span><br><span class=\"line\">    first[a] = nume++;</span><br><span class=\"line\">    edge[nume] = Edge(a,first[b],c);</span><br><span class=\"line\">    first[b] = nume++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">priority_queue&lt;pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; &gt; Q;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Mk make_pair</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> S)</span></span>&#123;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n) dist[i] = inf,vis[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    Q.push(Mk(<span class=\"number\">-0</span>,S));dist[S] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.empty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = Q.top().second;Q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[u] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e=first[u];~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = edge[e].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dist[v] &gt; dist[u] + edge[e].dist)&#123;</span><br><span class=\"line\">                dist[v] = dist[u] + edge[e].dist;</span><br><span class=\"line\">                Q.push(Mk(-dist[v],v));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u,v,l,a;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> A&amp;w) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a &lt; w.a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;a[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> y[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = rd(),m = rd();</span><br><span class=\"line\">    nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n) first[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,m)&#123;</span><br><span class=\"line\">        a[i].u = rd(),a[i].v = rd(),a[i].l = rd(),a[i].a = rd();</span><br><span class=\"line\">        Addedge(a[i].u,a[i].v,a[i].l);</span><br><span class=\"line\">        y[++*y] = a[i].a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dijkstra(<span class=\"number\">1</span>);</span><br><span class=\"line\">    sort(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y);</span><br><span class=\"line\">    *y = unique(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y) - y - <span class=\"number\">1</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,m) a[i].a = lower_bound(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y,a[i].a) - y;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,m)&#123;</span><br><span class=\"line\">        a[i] . a = *y - a[i].a + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(a+<span class=\"number\">1</span>,a+<span class=\"number\">1</span>+m);</span><br><span class=\"line\">    root[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    build(root[<span class=\"number\">0</span>],<span class=\"number\">1</span>,n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,j=<span class=\"number\">1</span>;i&lt;=m;i=j+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j=i;j&lt;=m &amp;&amp; a[i].a==a[j+<span class=\"number\">1</span>].a;++j);</span><br><span class=\"line\">        root[a[i].a] = root[a[i].a<span class=\"number\">-1</span>];</span><br><span class=\"line\">        Rep(k,i,j)&#123;</span><br><span class=\"line\">            node x = <span class=\"built_in\">find</span>(root[a[k].a],a[k].u);</span><br><span class=\"line\">            node y = <span class=\"built_in\">find</span>(root[a[k].a],a[k].v);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x != y) merge(root[a[k].a],x,y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    init();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Q = rd(),K = rd(),S = rd(),lastans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(Q--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v0=rd(),p0=rd();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = (v0 + K * lastans - <span class=\"number\">1</span>) % n + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = (p0 + K * lastans) % (S+<span class=\"number\">1</span>);</span><br><span class=\"line\">        p = upper_bound(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y,p) - y - <span class=\"number\">1</span>;</span><br><span class=\"line\">        p= *y - p;</span><br><span class=\"line\">        <span class=\"comment\">// 找到可能的那个 p</span></span><br><span class=\"line\">        node tmp = <span class=\"built_in\">find</span>(root[p],v);</span><br><span class=\"line\">        writeln(lastans = tmp . mn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"return.in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    freopen(<span class=\"string\">\"return.out\"</span>,<span class=\"string\">\"w\"</span>,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T = rd();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) solve();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>100 分做法：初始化离散化数组。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Rep(i,a,b) for(register int i=(a);i&lt;=int(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Dep(i,a,b) for(register int i=(a);i&gt;=int(b);--i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(register int i=(a);i&lt;int(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc getchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cout &lt;&lt; #x<span class=\"meta-string\">\" = \"</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pp(x,y) cout &lt;&lt; <span class=\"meta-string\">\"pp: \"</span> &lt;&lt; x &lt;&lt; <span class=\"meta-string\">\" \"</span> &lt;&lt; y &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rank __RANK</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> ll x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"keyword\">register</span> <span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rd read</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">readdb</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> x=<span class=\"number\">0</span>,p=<span class=\"number\">0.1</span>;<span class=\"keyword\">char</span> f=<span class=\"number\">0</span>,c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())f|=(c==<span class=\"string\">'-'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=x*<span class=\"number\">10</span>+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c==<span class=\"string\">'.'</span>)<span class=\"keyword\">for</span>(c=gc();<span class=\"built_in\">isdigit</span>(c);c=gc(),p/=<span class=\"number\">10</span>)x=x+(c^<span class=\"number\">48</span>)*p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f?-x:x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rdb() readdb()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)x=-x,pc(<span class=\"string\">'-'</span>);<span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">10</span>)<span class=\"built_in\">write</span>(x/<span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>(x%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">4e5</span>+<span class=\"number\">233</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = <span class=\"number\">4e5</span>+<span class=\"number\">233</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,ans,root[maxn];</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> min(x,y) (x) &lt; (y) ? (x) : (y)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> tot;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> fa,rank,lson,rson,mn;</span><br><span class=\"line\">    node()&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (<span class=\"keyword\">const</span> node &amp;w)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa == w.fa;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> != (<span class=\"keyword\">const</span> node &amp;w)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa != w.fa;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;t[maxm*<span class=\"number\">40</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dist[maxn];<span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    o = ++tot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r)&#123;</span><br><span class=\"line\">        t[o] . rank = <span class=\"number\">1</span>;</span><br><span class=\"line\">        t[o] . fa = l;</span><br><span class=\"line\">        t[o] . mn = dist[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t[o] . lson = t[o] . rson = <span class=\"number\">0</span>;</span><br><span class=\"line\">    build(t[o].lson,l,mid);</span><br><span class=\"line\">    build(t[o].rson,mid+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> mn,<span class=\"keyword\">int</span> wzp)</span></span>&#123;</span><br><span class=\"line\">    ++tot;</span><br><span class=\"line\">    t[tot] = t[o];</span><br><span class=\"line\">    o = tot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r)&#123;</span><br><span class=\"line\">        t[o] . rank = t[o] . rank + wzp;</span><br><span class=\"line\">        t[o] . mn = <span class=\"built_in\">min</span>(t[o].mn,mn);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt;= mid) add(t[o].lson,l,mid,x,mn,wzp); <span class=\"keyword\">else</span></span><br><span class=\"line\">                  add(t[o].rson,mid+<span class=\"number\">1</span>,r,x,mn,wzp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">    ++tot;</span><br><span class=\"line\">    t[tot] = t[o];</span><br><span class=\"line\">    o = tot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r)&#123;</span><br><span class=\"line\">        t[o] . fa = fa;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;=mid) update(t[o].lson,l,mid,x,fa); <span class=\"keyword\">else</span></span><br><span class=\"line\">                update(t[o].rson,mid+<span class=\"number\">1</span>,r,x,fa);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> node <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span> t[o];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;=mid) <span class=\"keyword\">return</span> query(t[o].lson,l,mid,x); <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> query(t[o].rson,mid+<span class=\"number\">1</span>,r,x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> node <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> root,<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    node tmp = query(root,<span class=\"number\">1</span>,n,x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tmp.fa == x) <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(root,tmp.fa);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;rt,node x,node y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x.rank &gt; y.rank) swap(x,y);</span><br><span class=\"line\">    update(rt,<span class=\"number\">1</span>,n,x.fa,y.fa);<span class=\"comment\">//puts(\"\");</span></span><br><span class=\"line\">    add(rt,<span class=\"number\">1</span>,n,y.fa,x.mn,x.rank==y.rank);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,nxt,dist;</span><br><span class=\"line\">    Edge()&#123;&#125;</span><br><span class=\"line\">    Edge(<span class=\"keyword\">int</span> to,<span class=\"keyword\">int</span> nxt,<span class=\"keyword\">int</span> dist):</span><br><span class=\"line\">        to(to),nxt(nxt),dist(dist)&#123;&#125;</span><br><span class=\"line\">&#125;edge[maxm * <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> first[maxn],nume;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    edge[nume] = Edge(b,first[a],c);</span><br><span class=\"line\">    first[a] = nume++;</span><br><span class=\"line\">    edge[nume] = Edge(a,first[b],c);</span><br><span class=\"line\">    first[b] = nume++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">priority_queue&lt;pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; &gt; Q;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Mk make_pair</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> S)</span></span>&#123;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n) dist[i] = inf,vis[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    Q.push(Mk(<span class=\"number\">-0</span>,S));dist[S] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.empty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = Q.top().second;Q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[u] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e=first[u];~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = edge[e].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dist[v] &gt; dist[u] + edge[e].dist)&#123;</span><br><span class=\"line\">                dist[v] = dist[u] + edge[e].dist;</span><br><span class=\"line\">                Q.push(Mk(-dist[v],v));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u,v,l,a;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> A&amp;w) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a &lt; w.a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;a[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> y[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = rd(),m = rd();</span><br><span class=\"line\">    nume = <span class=\"number\">0</span>;*y = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n) first[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,m)&#123;</span><br><span class=\"line\">        a[i].u = rd(),a[i].v = rd(),a[i].l = rd(),a[i].a = rd();</span><br><span class=\"line\">        Addedge(a[i].u,a[i].v,a[i].l);</span><br><span class=\"line\">        y[++*y] = a[i].a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dijkstra(<span class=\"number\">1</span>);</span><br><span class=\"line\">    sort(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y);</span><br><span class=\"line\">    *y = unique(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y) - y - <span class=\"number\">1</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,m) a[i].a = lower_bound(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y,a[i].a) - y;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,m)&#123;</span><br><span class=\"line\">        a[i] . a = *y - a[i].a + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(a+<span class=\"number\">1</span>,a+<span class=\"number\">1</span>+m);</span><br><span class=\"line\">    root[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    build(root[<span class=\"number\">0</span>],<span class=\"number\">1</span>,n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,j=<span class=\"number\">1</span>;i&lt;=m;i=j+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j=i;j&lt;=m &amp;&amp; a[i].a==a[j+<span class=\"number\">1</span>].a;++j);</span><br><span class=\"line\">        root[a[i].a] = root[a[i].a<span class=\"number\">-1</span>];</span><br><span class=\"line\">        Rep(k,i,j)&#123;</span><br><span class=\"line\">            node x = <span class=\"built_in\">find</span>(root[a[k].a],a[k].u);</span><br><span class=\"line\">            node y = <span class=\"built_in\">find</span>(root[a[k].a],a[k].v);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x != y) merge(root[a[k].a],x,y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    init();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Q = rd(),K = rd(),S = rd(),lastans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(Q--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v0=rd(),p0=rd();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = (v0 + K * lastans - <span class=\"number\">1</span>) % n + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = (p0 + K * lastans) % (S+<span class=\"number\">1</span>);</span><br><span class=\"line\">        p = upper_bound(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y,p) - y - <span class=\"number\">1</span>;</span><br><span class=\"line\">        p= *y - p;</span><br><span class=\"line\">        <span class=\"comment\">// 找到可能的那个 p</span></span><br><span class=\"line\">        node tmp = <span class=\"built_in\">find</span>(root[p],v);</span><br><span class=\"line\">        writeln(lastans = tmp . mn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"return.in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    freopen(<span class=\"string\">\"return.out\"</span>,<span class=\"string\">\"w\"</span>,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T = rd();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) solve();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"noi2018 你的名字 \"><a class=\"markdownIt-Anchor\"href=\"#noi2018 你的名字 \"></a> 「NOI2018」你的名字</h3><p>68 分做法</p><p>​\t建出广义后缀自动机。</p><p>​\t求出最后出现位置，暴力跳后缀链接。</p><p>​\t时间复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msqrt><mi>n</mi></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\sqrt n)</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1.05028em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.8002800000000001em\"><span class=\"svg-align\"style=\"top:-3em\"><span class=\"pstrut\"style=\"height:3em\"></span><span class=\"mord mathdefault\"style=\"padding-left:.833em\">n</span></span><span style=\"top:-2.76028em\"><span class=\"pstrut\"style=\"height:3em\"></span><span class=\"hide-tail\"style=\"min-width:.853em;height:1.08em\"><svg width=\"400em\"height=\"1.08em\"viewBox=\"0 0 400000 1080\"preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,\n-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,\n-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,\n35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,\n-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467\ns-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422\ns-65,47,-65,47z M834 80H400000v40H845z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.23972em\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p><p>​\t常数很小。</p><p>56 分做法：</p><p>​\t把前面直接维护的东西改成线段树合并爆 right 集合，并判断。（搏一搏单车变空气）</p><p>​\t时间复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msqrt><mi>n</mi></msqrt><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\sqrt n log (n))</annotation></semantics></math></span><span class=\"katex-html\"aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"style=\"height:1.05028em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\"style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.8002800000000001em\"><span class=\"svg-align\"style=\"top:-3em\"><span class=\"pstrut\"style=\"height:3em\"></span><span class=\"mord mathdefault\"style=\"padding-left:.833em\">n</span></span><span style=\"top:-2.76028em\"><span class=\"pstrut\"style=\"height:3em\"></span><span class=\"hide-tail\"style=\"min-width:.853em;height:1.08em\"><svg width=\"400em\"height=\"1.08em\"viewBox=\"0 0 400000 1080\"preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,\n-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,\n-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,\n35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,\n-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467\ns-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422\ns-65,47,-65,47z M834 80H400000v40H845z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"style=\"height:.23972em\"><span></span></span></span></span></span><span class=\"mord mathdefault\"style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\"style=\"margin-right:.03588em\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></p><p>​\t常数很小。但还是要 5~6s。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Rep(i,a,b) for(register int i=(a);i&lt;=int(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Dep(i,a,b) for(register int i=(a);i&gt;=int(b);--i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(register int i=(a);i&lt;int(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc getchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cout &lt;&lt; #x<span class=\"meta-string\">\" = \"</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pp(x,y) cout &lt;&lt; <span class=\"meta-string\">\"pp: \"</span> &lt;&lt; x &lt;&lt; <span class=\"meta-string\">\" \"</span> &lt;&lt; y &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rank __RANK</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> ll x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"keyword\">register</span> <span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rd read</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)x=-x,pc(<span class=\"string\">'-'</span>);<span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">10</span>)<span class=\"built_in\">write</span>(x/<span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>(x%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2e6</span>+<span class=\"number\">233</span>;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> sub[maxn];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; V[maxn];</span><br><span class=\"line\"><span class=\"keyword\">char</span> s[maxn],t[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> st[maxn],top,l[maxn],r[maxn],root[maxn];</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> lc[maxn*<span class=\"number\">40</span>],rc[maxn*<span class=\"number\">40</span>],tot=<span class=\"number\">0</span>,N;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!x || !y) <span class=\"keyword\">return</span> x|y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> now = ++tot;</span><br><span class=\"line\">    lc[now] = merge(lc[x],lc[y]);</span><br><span class=\"line\">    rc[now] = merge(rc[x],rc[y]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> now;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!o) o = ++tot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt;= mid) modify(lc[o],l,mid,x); <span class=\"keyword\">else</span></span><br><span class=\"line\">                 modify(rc[o],mid+<span class=\"number\">1</span>,r,x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!o) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y&lt;=mid) <span class=\"keyword\">return</span> query(lc[o],l,mid,x,y); <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mid+<span class=\"number\">1</span>&lt;=x) <span class=\"keyword\">return</span> query(rc[o],mid+<span class=\"number\">1</span>,r,x,y); <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = query(rc[o],mid+<span class=\"number\">1</span>,r,mid+<span class=\"number\">1</span>,y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(lc[o],l,mid,x,mid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SuffixAutomaton</span>&#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> nxt[<span class=\"number\">26</span>],link,<span class=\"built_in\">max</span>;</span><br><span class=\"line\">    &#125;T[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> start,last;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot;</span><br><span class=\"line\">    SuffixAutomaton()&#123;</span><br><span class=\"line\">        tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">        start = last = newnode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">max</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = ++tot;</span><br><span class=\"line\">        T[x] . <span class=\"built_in\">max</span> = <span class=\"built_in\">max</span>;</span><br><span class=\"line\">        mem(T[x].nxt,<span class=\"number\">0</span>);</span><br><span class=\"line\">        T[x] . link = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">extend</span><span class=\"params\">(<span class=\"keyword\">int</span> c,<span class=\"keyword\">int</span> flag)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = newnode(T[last] . <span class=\"built_in\">max</span> + <span class=\"number\">1</span>),v = last;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag != <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            modify(root[u],<span class=\"number\">1</span>,N,flag);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;v &amp;&amp; !T[v].nxt[c];v = T[v].link)</span><br><span class=\"line\">            T[v].nxt[c] = u;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!v)&#123;</span><br><span class=\"line\">            T[u] . link = start;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[T[v].nxt[c]].<span class=\"built_in\">max</span> == T[v].<span class=\"built_in\">max</span> + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            T[u].link = T[v].nxt[c];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = newnode(T[v].<span class=\"built_in\">max</span>+<span class=\"number\">1</span>),o = T[v].nxt[c];</span><br><span class=\"line\">            rep(k,<span class=\"number\">0</span>,<span class=\"number\">26</span>) T[n].nxt[k] = T[o].nxt[k];</span><br><span class=\"line\">            T[n] . link = T[o].link;</span><br><span class=\"line\">            T[o].link = T[u].link = n;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;v &amp;&amp; T[v].nxt[c] == o;v=T[v].link)</span><br><span class=\"line\">                T[v].nxt[c] = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> last = u;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; V[maxn];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>;i&lt;V[u].<span class=\"built_in\">size</span>();++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = V[u][i];</span><br><span class=\"line\">            dfs(v);</span><br><span class=\"line\">            root[u] = merge(root[u],root[v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">topsort</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Rep(i,<span class=\"number\">2</span>,tot)</span><br><span class=\"line\">            V[T[i].link] . push_back(<span class=\"keyword\">int</span>(i));</span><br><span class=\"line\">        dfs(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;sam;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"name.in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    freopen(<span class=\"string\">\"name.out\"</span>,<span class=\"string\">\"w\"</span>,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,s);N = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;s[i];++i) sam.extend(s[i] - <span class=\"string\">'a'</span>,i+<span class=\"number\">1</span>);</span><br><span class=\"line\">    n = rd();</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,t);</span><br><span class=\"line\">        sam.last = sam.start;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;t[j];++j)&#123;</span><br><span class=\"line\">            V[i].push_back(sam.extend(t[j] - <span class=\"string\">'a'</span>,<span class=\"number\">-1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        l[i] = rd(),r[i] = rd();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sam.topsort();</span><br><span class=\"line\">    mem(vis,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    vis[<span class=\"number\">1</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">register</span> ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        top = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"keyword\">unsigned</span> j=<span class=\"number\">0</span>;j&lt;V[i].<span class=\"built_in\">size</span>();++j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> x = V[i][j];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;!vis[x];x = sam.T[x].link)&#123;</span><br><span class=\"line\">                st[++top] = x;</span><br><span class=\"line\">                vis[x] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> X = query(root[x],<span class=\"number\">1</span>,N,l[i],r[i]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!X)&#123;</span><br><span class=\"line\">                    ans += sam.T[x].<span class=\"built_in\">max</span> - sam.T[sam.T[x].link].<span class=\"built_in\">max</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> len = X - l[i] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 长度在 1..len 都不行 </span></span><br><span class=\"line\">                    ans += <span class=\"built_in\">max</span>(<span class=\"number\">0</span>,sam.T[x].<span class=\"built_in\">max</span> - <span class=\"built_in\">max</span>(sam.T[sam.T[x].link].<span class=\"built_in\">max</span>,len));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;top;top--) vis[st[top]] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        writeln(ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>100 分做法：<br> 加一句如果已经找到直接 break 的优化……</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Rep(i,a,b) for(register int i=(a);i&lt;=int(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Dep(i,a,b) for(register int i=(a);i&gt;=int(b);--i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(register int i=(a);i&lt;int(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc getchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cout &lt;&lt; #x<span class=\"meta-string\">\"=\"</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pp(x,y) cout &lt;&lt; <span class=\"meta-string\">\"pp:\"</span> &lt;&lt; x &lt;&lt; <span class=\"meta-string\">\"\"</span> &lt;&lt; y &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rank __RANK</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> ll x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"keyword\">register</span> <span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rd read</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)x=-x,pc(<span class=\"string\">'-'</span>);<span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">10</span>)<span class=\"built_in\">write</span>(x/<span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>(x%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2e6</span>+<span class=\"number\">233</span>;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> sub[maxn];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; V[maxn];</span><br><span class=\"line\"><span class=\"keyword\">char</span> s[maxn],t[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> st[maxn],top,l[maxn],r[maxn],root[maxn];</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> lc[maxn*<span class=\"number\">40</span>],rc[maxn*<span class=\"number\">40</span>],tot=<span class=\"number\">0</span>,N;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!x || !y) <span class=\"keyword\">return</span> x|y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> now = ++tot;</span><br><span class=\"line\">    lc[now] = merge(lc[x],lc[y]);</span><br><span class=\"line\">    rc[now] = merge(rc[x],rc[y]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> now;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!o) o = ++tot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt;= mid) modify(lc[o],l,mid,x); <span class=\"keyword\">else</span></span><br><span class=\"line\">                 modify(rc[o],mid+<span class=\"number\">1</span>,r,x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!o) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y&lt;=mid) <span class=\"keyword\">return</span> query(lc[o],l,mid,x,y); <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mid+<span class=\"number\">1</span>&lt;=x) <span class=\"keyword\">return</span> query(rc[o],mid+<span class=\"number\">1</span>,r,x,y); <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = query(rc[o],mid+<span class=\"number\">1</span>,r,mid+<span class=\"number\">1</span>,y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(lc[o],l,mid,x,mid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SuffixAutomaton</span>&#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> nxt[<span class=\"number\">26</span>],link,<span class=\"built_in\">max</span>;</span><br><span class=\"line\">    &#125;T[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> start,last;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot;</span><br><span class=\"line\">    SuffixAutomaton()&#123;</span><br><span class=\"line\">        tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">        start = last = newnode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">max</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = ++tot;</span><br><span class=\"line\">        T[x] . <span class=\"built_in\">max</span> = <span class=\"built_in\">max</span>;</span><br><span class=\"line\">        mem(T[x].nxt,<span class=\"number\">0</span>);</span><br><span class=\"line\">        T[x] . link = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">extend</span><span class=\"params\">(<span class=\"keyword\">int</span> c,<span class=\"keyword\">int</span> flag)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = newnode(T[last] . <span class=\"built_in\">max</span> + <span class=\"number\">1</span>),v = last;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag != <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            modify(root[u],<span class=\"number\">1</span>,N,flag);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;v &amp;&amp; !T[v].nxt[c];v = T[v].link)</span><br><span class=\"line\">            T[v].nxt[c] = u;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!v)&#123;</span><br><span class=\"line\">            T[u] . link = start;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[T[v].nxt[c]].<span class=\"built_in\">max</span> == T[v].<span class=\"built_in\">max</span> + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            T[u].link = T[v].nxt[c];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = newnode(T[v].<span class=\"built_in\">max</span>+<span class=\"number\">1</span>),o = T[v].nxt[c];</span><br><span class=\"line\">            rep(k,<span class=\"number\">0</span>,<span class=\"number\">26</span>) T[n].nxt[k] = T[o].nxt[k];</span><br><span class=\"line\">            T[n] . link = T[o].link;</span><br><span class=\"line\">            T[o].link = T[u].link = n;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;v &amp;&amp; T[v].nxt[c] == o;v=T[v].link)</span><br><span class=\"line\">                T[v].nxt[c] = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> last = u;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; V[maxn];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>;i&lt;V[u].<span class=\"built_in\">size</span>();++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = V[u][i];</span><br><span class=\"line\">            dfs(v);</span><br><span class=\"line\">            root[u] = merge(root[u],root[v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">topsort</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Rep(i,<span class=\"number\">2</span>,tot)</span><br><span class=\"line\">            V[T[i].link] . push_back(<span class=\"keyword\">int</span>(i));</span><br><span class=\"line\">        dfs(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;sam;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"name.in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    freopen(<span class=\"string\">\"name.out\"</span>,<span class=\"string\">\"w\"</span>,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,s);N = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;s[i];++i) sam.extend(s[i] - <span class=\"string\">'a'</span>,i+<span class=\"number\">1</span>);</span><br><span class=\"line\">    n = rd();</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,t);</span><br><span class=\"line\">        sam.last = sam.start;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;t[j];++j)&#123;</span><br><span class=\"line\">            V[i].push_back(sam.extend(t[j] - <span class=\"string\">'a'</span>,<span class=\"number\">-1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        l[i] = rd(),r[i] = rd();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sam.topsort();</span><br><span class=\"line\">    mem(vis,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    vis[<span class=\"number\">1</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">register</span> ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        top = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"keyword\">unsigned</span> j=<span class=\"number\">0</span>;j&lt;V[i].<span class=\"built_in\">size</span>();++j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> x = V[i][j];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;!vis[x];x = sam.T[x].link)&#123;</span><br><span class=\"line\">                st[++top] = x;</span><br><span class=\"line\">                vis[x] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> X = query(root[x],<span class=\"number\">1</span>,N,l[i],r[i]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!X)&#123;</span><br><span class=\"line\">                    ans += sam.T[x].<span class=\"built_in\">max</span> - sam.T[sam.T[x].link].<span class=\"built_in\">max</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> len = X - l[i] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 长度在 1..len 都不行</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(len &lt; sam.T[sam.T[x].link].<span class=\"built_in\">max</span>)&#123;</span><br><span class=\"line\">                        ans += sam.T[x].<span class=\"built_in\">max</span> - sam.T[sam.T[x].link].<span class=\"built_in\">max</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        ans += <span class=\"built_in\">max</span>(<span class=\"number\">0</span>,sam.T[x].<span class=\"built_in\">max</span> - len);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;top;top--) vis[st[top]] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        writeln(ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>啥都不会的选手只会暴力。</p><p>Day1得分是25+44+56。</p><p>Day2 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mi>O</mi><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">LOJ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">L</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mord mathdefault\" style=\"margin-right:.09618em\">J</span></span></span></span>上的得分是85+30+25。</p><p>加上50分笔试分。差银牌线7分。</p>","more":"<h3 id=\"noi2018归程\"><a class=\"markdownIt-Anchor\" href=\"#noi2018归程\"></a> 「NOI2018」归程</h3><p>25分做法：求出最短路后直接可持久化并查集维护。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Rep(i,a,b) for(register int i=(a);i&lt;=int(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Dep(i,a,b) for(register int i=(a);i&gt;=int(b);--i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(register int i=(a);i&lt;int(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc getchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cout &lt;&lt; #x<span class=\"meta-string\">\" = \"</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pp(x,y) cout &lt;&lt; <span class=\"meta-string\">\"pp: \"</span> &lt;&lt; x &lt;&lt; <span class=\"meta-string\">\" \"</span> &lt;&lt; y &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rank __RANK</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> ll x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"keyword\">register</span> <span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rd read</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">readdb</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> x=<span class=\"number\">0</span>,p=<span class=\"number\">0.1</span>;<span class=\"keyword\">char</span> f=<span class=\"number\">0</span>,c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())f|=(c==<span class=\"string\">'-'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=x*<span class=\"number\">10</span>+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c==<span class=\"string\">'.'</span>)<span class=\"keyword\">for</span>(c=gc();<span class=\"built_in\">isdigit</span>(c);c=gc(),p/=<span class=\"number\">10</span>)x=x+(c^<span class=\"number\">48</span>)*p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f?-x:x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rdb() readdb()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)x=-x,pc(<span class=\"string\">'-'</span>);<span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">10</span>)<span class=\"built_in\">write</span>(x/<span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>(x%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2e5</span>+<span class=\"number\">233</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = <span class=\"number\">4e5</span>+<span class=\"number\">233</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,ans,root[maxn];</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> min(x,y) (x) &lt; (y) ? (x) : (y)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> tot;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> fa,rank,lson,rson,mn;</span><br><span class=\"line\">    node()&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (<span class=\"keyword\">const</span> node &amp;w)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa == w.fa;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> != (<span class=\"keyword\">const</span> node &amp;w)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa != w.fa;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;t[maxm*<span class=\"number\">40</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dist[maxn];<span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    o = ++tot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r)&#123;</span><br><span class=\"line\">        t[o] . rank = <span class=\"number\">1</span>;</span><br><span class=\"line\">        t[o] . fa = l;</span><br><span class=\"line\">        t[o] . mn = dist[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t[o] . lson = t[o] . rson = <span class=\"number\">0</span>;</span><br><span class=\"line\">    build(t[o].lson,l,mid);</span><br><span class=\"line\">    build(t[o].rson,mid+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> mn,<span class=\"keyword\">int</span> wzp)</span></span>&#123;</span><br><span class=\"line\">    ++tot;</span><br><span class=\"line\">    t[tot] = t[o];</span><br><span class=\"line\">    o = tot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r)&#123;</span><br><span class=\"line\">        t[o] . rank = t[o] . rank + wzp;</span><br><span class=\"line\">        t[o] . mn = <span class=\"built_in\">min</span>(t[o].mn,mn);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt;= mid) add(t[o].lson,l,mid,x,mn,wzp); <span class=\"keyword\">else</span></span><br><span class=\"line\">                  add(t[o].rson,mid+<span class=\"number\">1</span>,r,x,mn,wzp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">    ++tot;</span><br><span class=\"line\">    t[tot] = t[o];</span><br><span class=\"line\">    o = tot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r)&#123;</span><br><span class=\"line\">        t[o] . fa = fa;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;=mid) update(t[o].lson,l,mid,x,fa); <span class=\"keyword\">else</span></span><br><span class=\"line\">                update(t[o].rson,mid+<span class=\"number\">1</span>,r,x,fa);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> node <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span> t[o];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;=mid) <span class=\"keyword\">return</span> query(t[o].lson,l,mid,x); <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> query(t[o].rson,mid+<span class=\"number\">1</span>,r,x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> node <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> root,<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    node tmp = query(root,<span class=\"number\">1</span>,n,x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tmp.fa == x) <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(root,tmp.fa);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;rt,node x,node y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x.rank &gt; y.rank) swap(x,y);</span><br><span class=\"line\">    update(rt,<span class=\"number\">1</span>,n,x.fa,y.fa);<span class=\"comment\">//puts(\"\");</span></span><br><span class=\"line\">    add(rt,<span class=\"number\">1</span>,n,y.fa,x.mn,x.rank==y.rank);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,nxt,dist;</span><br><span class=\"line\">    Edge()&#123;&#125;</span><br><span class=\"line\">    Edge(<span class=\"keyword\">int</span> to,<span class=\"keyword\">int</span> nxt,<span class=\"keyword\">int</span> dist):</span><br><span class=\"line\">        to(to),nxt(nxt),dist(dist)&#123;&#125;</span><br><span class=\"line\">&#125;edge[maxm * <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> first[maxn],nume;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    edge[nume] = Edge(b,first[a],c);</span><br><span class=\"line\">    first[a] = nume++;</span><br><span class=\"line\">    edge[nume] = Edge(a,first[b],c);</span><br><span class=\"line\">    first[b] = nume++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">priority_queue&lt;pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; &gt; Q;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Mk make_pair</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> S)</span></span>&#123;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n) dist[i] = inf,vis[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    Q.push(Mk(<span class=\"number\">-0</span>,S));dist[S] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.empty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = Q.top().second;Q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[u] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e=first[u];~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = edge[e].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dist[v] &gt; dist[u] + edge[e].dist)&#123;</span><br><span class=\"line\">                dist[v] = dist[u] + edge[e].dist;</span><br><span class=\"line\">                Q.push(Mk(-dist[v],v));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u,v,l,a;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> A&amp;w) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a &lt; w.a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;a[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> y[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = rd(),m = rd();</span><br><span class=\"line\">    nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n) first[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,m)&#123;</span><br><span class=\"line\">        a[i].u = rd(),a[i].v = rd(),a[i].l = rd(),a[i].a = rd();</span><br><span class=\"line\">        Addedge(a[i].u,a[i].v,a[i].l);</span><br><span class=\"line\">        y[++*y] = a[i].a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dijkstra(<span class=\"number\">1</span>);</span><br><span class=\"line\">    sort(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y);</span><br><span class=\"line\">    *y = unique(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y) - y - <span class=\"number\">1</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,m) a[i].a = lower_bound(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y,a[i].a) - y;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,m)&#123;</span><br><span class=\"line\">        a[i] . a = *y - a[i].a + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(a+<span class=\"number\">1</span>,a+<span class=\"number\">1</span>+m);</span><br><span class=\"line\">    root[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    build(root[<span class=\"number\">0</span>],<span class=\"number\">1</span>,n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,j=<span class=\"number\">1</span>;i&lt;=m;i=j+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j=i;j&lt;=m &amp;&amp; a[i].a==a[j+<span class=\"number\">1</span>].a;++j);</span><br><span class=\"line\">        root[a[i].a] = root[a[i].a<span class=\"number\">-1</span>];</span><br><span class=\"line\">        Rep(k,i,j)&#123;</span><br><span class=\"line\">            node x = <span class=\"built_in\">find</span>(root[a[k].a],a[k].u);</span><br><span class=\"line\">            node y = <span class=\"built_in\">find</span>(root[a[k].a],a[k].v);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x != y) merge(root[a[k].a],x,y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    init();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Q = rd(),K = rd(),S = rd(),lastans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(Q--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v0=rd(),p0=rd();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = (v0 + K * lastans - <span class=\"number\">1</span>) % n + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = (p0 + K * lastans) % (S+<span class=\"number\">1</span>);</span><br><span class=\"line\">        p = upper_bound(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y,p) - y - <span class=\"number\">1</span>;</span><br><span class=\"line\">        p= *y - p;</span><br><span class=\"line\">        <span class=\"comment\">//找到可能的那个p</span></span><br><span class=\"line\">        node tmp = <span class=\"built_in\">find</span>(root[p],v);</span><br><span class=\"line\">        writeln(lastans = tmp . mn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"return.in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    freopen(<span class=\"string\">\"return.out\"</span>,<span class=\"string\">\"w\"</span>,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T = rd();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) solve();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>100分做法：初始化离散化数组。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Rep(i,a,b) for(register int i=(a);i&lt;=int(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Dep(i,a,b) for(register int i=(a);i&gt;=int(b);--i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(register int i=(a);i&lt;int(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc getchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cout &lt;&lt; #x<span class=\"meta-string\">\" = \"</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pp(x,y) cout &lt;&lt; <span class=\"meta-string\">\"pp: \"</span> &lt;&lt; x &lt;&lt; <span class=\"meta-string\">\" \"</span> &lt;&lt; y &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rank __RANK</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> ll x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"keyword\">register</span> <span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rd read</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">readdb</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> x=<span class=\"number\">0</span>,p=<span class=\"number\">0.1</span>;<span class=\"keyword\">char</span> f=<span class=\"number\">0</span>,c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())f|=(c==<span class=\"string\">'-'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=x*<span class=\"number\">10</span>+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c==<span class=\"string\">'.'</span>)<span class=\"keyword\">for</span>(c=gc();<span class=\"built_in\">isdigit</span>(c);c=gc(),p/=<span class=\"number\">10</span>)x=x+(c^<span class=\"number\">48</span>)*p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f?-x:x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rdb() readdb()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)x=-x,pc(<span class=\"string\">'-'</span>);<span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">10</span>)<span class=\"built_in\">write</span>(x/<span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>(x%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">4e5</span>+<span class=\"number\">233</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = <span class=\"number\">4e5</span>+<span class=\"number\">233</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,ans,root[maxn];</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> min(x,y) (x) &lt; (y) ? (x) : (y)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> tot;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> fa,rank,lson,rson,mn;</span><br><span class=\"line\">    node()&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (<span class=\"keyword\">const</span> node &amp;w)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa == w.fa;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> != (<span class=\"keyword\">const</span> node &amp;w)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa != w.fa;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;t[maxm*<span class=\"number\">40</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dist[maxn];<span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    o = ++tot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r)&#123;</span><br><span class=\"line\">        t[o] . rank = <span class=\"number\">1</span>;</span><br><span class=\"line\">        t[o] . fa = l;</span><br><span class=\"line\">        t[o] . mn = dist[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t[o] . lson = t[o] . rson = <span class=\"number\">0</span>;</span><br><span class=\"line\">    build(t[o].lson,l,mid);</span><br><span class=\"line\">    build(t[o].rson,mid+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> mn,<span class=\"keyword\">int</span> wzp)</span></span>&#123;</span><br><span class=\"line\">    ++tot;</span><br><span class=\"line\">    t[tot] = t[o];</span><br><span class=\"line\">    o = tot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r)&#123;</span><br><span class=\"line\">        t[o] . rank = t[o] . rank + wzp;</span><br><span class=\"line\">        t[o] . mn = <span class=\"built_in\">min</span>(t[o].mn,mn);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt;= mid) add(t[o].lson,l,mid,x,mn,wzp); <span class=\"keyword\">else</span></span><br><span class=\"line\">                  add(t[o].rson,mid+<span class=\"number\">1</span>,r,x,mn,wzp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">    ++tot;</span><br><span class=\"line\">    t[tot] = t[o];</span><br><span class=\"line\">    o = tot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r)&#123;</span><br><span class=\"line\">        t[o] . fa = fa;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;=mid) update(t[o].lson,l,mid,x,fa); <span class=\"keyword\">else</span></span><br><span class=\"line\">                update(t[o].rson,mid+<span class=\"number\">1</span>,r,x,fa);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> node <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span> t[o];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;=mid) <span class=\"keyword\">return</span> query(t[o].lson,l,mid,x); <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> query(t[o].rson,mid+<span class=\"number\">1</span>,r,x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> node <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> root,<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    node tmp = query(root,<span class=\"number\">1</span>,n,x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tmp.fa == x) <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(root,tmp.fa);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;rt,node x,node y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x.rank &gt; y.rank) swap(x,y);</span><br><span class=\"line\">    update(rt,<span class=\"number\">1</span>,n,x.fa,y.fa);<span class=\"comment\">//puts(\"\");</span></span><br><span class=\"line\">    add(rt,<span class=\"number\">1</span>,n,y.fa,x.mn,x.rank==y.rank);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,nxt,dist;</span><br><span class=\"line\">    Edge()&#123;&#125;</span><br><span class=\"line\">    Edge(<span class=\"keyword\">int</span> to,<span class=\"keyword\">int</span> nxt,<span class=\"keyword\">int</span> dist):</span><br><span class=\"line\">        to(to),nxt(nxt),dist(dist)&#123;&#125;</span><br><span class=\"line\">&#125;edge[maxm * <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> first[maxn],nume;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    edge[nume] = Edge(b,first[a],c);</span><br><span class=\"line\">    first[a] = nume++;</span><br><span class=\"line\">    edge[nume] = Edge(a,first[b],c);</span><br><span class=\"line\">    first[b] = nume++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">priority_queue&lt;pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; &gt; Q;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Mk make_pair</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> S)</span></span>&#123;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n) dist[i] = inf,vis[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    Q.push(Mk(<span class=\"number\">-0</span>,S));dist[S] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.empty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = Q.top().second;Q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[u] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e=first[u];~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = edge[e].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dist[v] &gt; dist[u] + edge[e].dist)&#123;</span><br><span class=\"line\">                dist[v] = dist[u] + edge[e].dist;</span><br><span class=\"line\">                Q.push(Mk(-dist[v],v));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u,v,l,a;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> A&amp;w) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a &lt; w.a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;a[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> y[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = rd(),m = rd();</span><br><span class=\"line\">    nume = <span class=\"number\">0</span>;*y = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n) first[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,m)&#123;</span><br><span class=\"line\">        a[i].u = rd(),a[i].v = rd(),a[i].l = rd(),a[i].a = rd();</span><br><span class=\"line\">        Addedge(a[i].u,a[i].v,a[i].l);</span><br><span class=\"line\">        y[++*y] = a[i].a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dijkstra(<span class=\"number\">1</span>);</span><br><span class=\"line\">    sort(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y);</span><br><span class=\"line\">    *y = unique(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y) - y - <span class=\"number\">1</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,m) a[i].a = lower_bound(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y,a[i].a) - y;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,m)&#123;</span><br><span class=\"line\">        a[i] . a = *y - a[i].a + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(a+<span class=\"number\">1</span>,a+<span class=\"number\">1</span>+m);</span><br><span class=\"line\">    root[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    build(root[<span class=\"number\">0</span>],<span class=\"number\">1</span>,n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,j=<span class=\"number\">1</span>;i&lt;=m;i=j+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j=i;j&lt;=m &amp;&amp; a[i].a==a[j+<span class=\"number\">1</span>].a;++j);</span><br><span class=\"line\">        root[a[i].a] = root[a[i].a<span class=\"number\">-1</span>];</span><br><span class=\"line\">        Rep(k,i,j)&#123;</span><br><span class=\"line\">            node x = <span class=\"built_in\">find</span>(root[a[k].a],a[k].u);</span><br><span class=\"line\">            node y = <span class=\"built_in\">find</span>(root[a[k].a],a[k].v);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x != y) merge(root[a[k].a],x,y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    init();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Q = rd(),K = rd(),S = rd(),lastans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(Q--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v0=rd(),p0=rd();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = (v0 + K * lastans - <span class=\"number\">1</span>) % n + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = (p0 + K * lastans) % (S+<span class=\"number\">1</span>);</span><br><span class=\"line\">        p = upper_bound(y+<span class=\"number\">1</span>,y+<span class=\"number\">1</span>+*y,p) - y - <span class=\"number\">1</span>;</span><br><span class=\"line\">        p= *y - p;</span><br><span class=\"line\">        <span class=\"comment\">//找到可能的那个p</span></span><br><span class=\"line\">        node tmp = <span class=\"built_in\">find</span>(root[p],v);</span><br><span class=\"line\">        writeln(lastans = tmp . mn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"return.in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    freopen(<span class=\"string\">\"return.out\"</span>,<span class=\"string\">\"w\"</span>,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T = rd();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) solve();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"noi2018你的名字\"><a class=\"markdownIt-Anchor\" href=\"#noi2018你的名字\"></a> 「NOI2018」你的名字</h3><p>68分做法</p><p>​\t建出广义后缀自动机。</p><p>​\t求出最后出现位置，暴力跳后缀链接。</p><p>​\t时间复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msqrt><mi>n</mi></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\sqrt n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.05028em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8002800000000001em\"><span class=\"svg-align\" style=\"top:-3em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord mathdefault\" style=\"padding-left:.833em\">n</span></span><span style=\"top:-2.76028em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"hide-tail\" style=\"min-width:.853em;height:1.08em\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,\n-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,\n-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,\n35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,\n-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467\ns-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422\ns-65,47,-65,47z M834 80H400000v40H845z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.23972em\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p><p>​\t常数很小。</p><p>56分做法：</p><p>​\t把前面直接维护的东西改成线段树合并爆right集合，并判断。（搏一搏单车变空气）</p><p>​\t时间复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msqrt><mi>n</mi></msqrt><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\sqrt n log (n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.05028em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8002800000000001em\"><span class=\"svg-align\" style=\"top:-3em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord mathdefault\" style=\"padding-left:.833em\">n</span></span><span style=\"top:-2.76028em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"hide-tail\" style=\"min-width:.853em;height:1.08em\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,\n-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,\n-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,\n35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,\n-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467\ns-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422\ns-65,47,-65,47z M834 80H400000v40H845z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.23972em\"><span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></p><p>​\t常数很小。但还是要5~6s。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Rep(i,a,b) for(register int i=(a);i&lt;=int(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Dep(i,a,b) for(register int i=(a);i&gt;=int(b);--i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(register int i=(a);i&lt;int(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc getchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cout &lt;&lt; #x<span class=\"meta-string\">\" = \"</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pp(x,y) cout &lt;&lt; <span class=\"meta-string\">\"pp: \"</span> &lt;&lt; x &lt;&lt; <span class=\"meta-string\">\" \"</span> &lt;&lt; y &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rank __RANK</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> ll x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"keyword\">register</span> <span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rd read</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)x=-x,pc(<span class=\"string\">'-'</span>);<span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">10</span>)<span class=\"built_in\">write</span>(x/<span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>(x%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2e6</span>+<span class=\"number\">233</span>;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> sub[maxn];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; V[maxn];</span><br><span class=\"line\"><span class=\"keyword\">char</span> s[maxn],t[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> st[maxn],top,l[maxn],r[maxn],root[maxn];</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> lc[maxn*<span class=\"number\">40</span>],rc[maxn*<span class=\"number\">40</span>],tot=<span class=\"number\">0</span>,N;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!x || !y) <span class=\"keyword\">return</span> x|y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> now = ++tot;</span><br><span class=\"line\">    lc[now] = merge(lc[x],lc[y]);</span><br><span class=\"line\">    rc[now] = merge(rc[x],rc[y]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> now;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!o) o = ++tot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt;= mid) modify(lc[o],l,mid,x); <span class=\"keyword\">else</span></span><br><span class=\"line\">                 modify(rc[o],mid+<span class=\"number\">1</span>,r,x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!o) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y&lt;=mid) <span class=\"keyword\">return</span> query(lc[o],l,mid,x,y); <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mid+<span class=\"number\">1</span>&lt;=x) <span class=\"keyword\">return</span> query(rc[o],mid+<span class=\"number\">1</span>,r,x,y); <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = query(rc[o],mid+<span class=\"number\">1</span>,r,mid+<span class=\"number\">1</span>,y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(lc[o],l,mid,x,mid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SuffixAutomaton</span>&#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> nxt[<span class=\"number\">26</span>],link,<span class=\"built_in\">max</span>;</span><br><span class=\"line\">    &#125;T[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> start,last;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot;</span><br><span class=\"line\">    SuffixAutomaton()&#123;</span><br><span class=\"line\">        tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">        start = last = newnode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">max</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = ++tot;</span><br><span class=\"line\">        T[x] . <span class=\"built_in\">max</span> = <span class=\"built_in\">max</span>;</span><br><span class=\"line\">        mem(T[x].nxt,<span class=\"number\">0</span>);</span><br><span class=\"line\">        T[x] . link = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">extend</span><span class=\"params\">(<span class=\"keyword\">int</span> c,<span class=\"keyword\">int</span> flag)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = newnode(T[last] . <span class=\"built_in\">max</span> + <span class=\"number\">1</span>),v = last;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag != <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            modify(root[u],<span class=\"number\">1</span>,N,flag);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;v &amp;&amp; !T[v].nxt[c];v = T[v].link)</span><br><span class=\"line\">            T[v].nxt[c] = u;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!v)&#123;</span><br><span class=\"line\">            T[u] . link = start;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[T[v].nxt[c]].<span class=\"built_in\">max</span> == T[v].<span class=\"built_in\">max</span> + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            T[u].link = T[v].nxt[c];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = newnode(T[v].<span class=\"built_in\">max</span>+<span class=\"number\">1</span>),o = T[v].nxt[c];</span><br><span class=\"line\">            rep(k,<span class=\"number\">0</span>,<span class=\"number\">26</span>) T[n].nxt[k] = T[o].nxt[k];</span><br><span class=\"line\">            T[n] . link = T[o].link;</span><br><span class=\"line\">            T[o].link = T[u].link = n;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;v &amp;&amp; T[v].nxt[c] == o;v=T[v].link)</span><br><span class=\"line\">                T[v].nxt[c] = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> last = u;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; V[maxn];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>;i&lt;V[u].<span class=\"built_in\">size</span>();++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = V[u][i];</span><br><span class=\"line\">            dfs(v);</span><br><span class=\"line\">            root[u] = merge(root[u],root[v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">topsort</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Rep(i,<span class=\"number\">2</span>,tot)</span><br><span class=\"line\">            V[T[i].link] . push_back(<span class=\"keyword\">int</span>(i));</span><br><span class=\"line\">        dfs(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;sam;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"name.in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    freopen(<span class=\"string\">\"name.out\"</span>,<span class=\"string\">\"w\"</span>,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,s);N = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;s[i];++i) sam.extend(s[i] - <span class=\"string\">'a'</span>,i+<span class=\"number\">1</span>);</span><br><span class=\"line\">    n = rd();</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,t);</span><br><span class=\"line\">        sam.last = sam.start;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;t[j];++j)&#123;</span><br><span class=\"line\">            V[i].push_back(sam.extend(t[j] - <span class=\"string\">'a'</span>,<span class=\"number\">-1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        l[i] = rd(),r[i] = rd();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sam.topsort();</span><br><span class=\"line\">    mem(vis,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    vis[<span class=\"number\">1</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">register</span> ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        top = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"keyword\">unsigned</span> j=<span class=\"number\">0</span>;j&lt;V[i].<span class=\"built_in\">size</span>();++j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> x = V[i][j];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;!vis[x];x = sam.T[x].link)&#123;</span><br><span class=\"line\">                st[++top] = x;</span><br><span class=\"line\">                vis[x] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> X = query(root[x],<span class=\"number\">1</span>,N,l[i],r[i]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!X)&#123;</span><br><span class=\"line\">                    ans += sam.T[x].<span class=\"built_in\">max</span> - sam.T[sam.T[x].link].<span class=\"built_in\">max</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> len = X - l[i] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"comment\">//长度在1..len都不行</span></span><br><span class=\"line\">                    ans += <span class=\"built_in\">max</span>(<span class=\"number\">0</span>,sam.T[x].<span class=\"built_in\">max</span> - <span class=\"built_in\">max</span>(sam.T[sam.T[x].link].<span class=\"built_in\">max</span>,len));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;top;top--) vis[st[top]] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        writeln(ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>100分做法：<br>加一句如果已经找到直接break的优化……</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Rep(i,a,b) for(register int i=(a);i&lt;=int(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Dep(i,a,b) for(register int i=(a);i&gt;=int(b);--i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(register int i=(a);i&lt;int(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc getchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cout &lt;&lt; #x<span class=\"meta-string\">\" = \"</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pp(x,y) cout &lt;&lt; <span class=\"meta-string\">\"pp: \"</span> &lt;&lt; x &lt;&lt; <span class=\"meta-string\">\" \"</span> &lt;&lt; y &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rank __RANK</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> ll x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"keyword\">register</span> <span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rd read</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)x=-x,pc(<span class=\"string\">'-'</span>);<span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">10</span>)<span class=\"built_in\">write</span>(x/<span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>(x%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2e6</span>+<span class=\"number\">233</span>;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> sub[maxn];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; V[maxn];</span><br><span class=\"line\"><span class=\"keyword\">char</span> s[maxn],t[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> st[maxn],top,l[maxn],r[maxn],root[maxn];</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> lc[maxn*<span class=\"number\">40</span>],rc[maxn*<span class=\"number\">40</span>],tot=<span class=\"number\">0</span>,N;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!x || !y) <span class=\"keyword\">return</span> x|y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> now = ++tot;</span><br><span class=\"line\">    lc[now] = merge(lc[x],lc[y]);</span><br><span class=\"line\">    rc[now] = merge(rc[x],rc[y]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> now;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!o) o = ++tot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt;= mid) modify(lc[o],l,mid,x); <span class=\"keyword\">else</span></span><br><span class=\"line\">                 modify(rc[o],mid+<span class=\"number\">1</span>,r,x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!o) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y&lt;=mid) <span class=\"keyword\">return</span> query(lc[o],l,mid,x,y); <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mid+<span class=\"number\">1</span>&lt;=x) <span class=\"keyword\">return</span> query(rc[o],mid+<span class=\"number\">1</span>,r,x,y); <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = query(rc[o],mid+<span class=\"number\">1</span>,r,mid+<span class=\"number\">1</span>,y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(lc[o],l,mid,x,mid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SuffixAutomaton</span>&#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> nxt[<span class=\"number\">26</span>],link,<span class=\"built_in\">max</span>;</span><br><span class=\"line\">    &#125;T[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> start,last;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot;</span><br><span class=\"line\">    SuffixAutomaton()&#123;</span><br><span class=\"line\">        tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">        start = last = newnode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">max</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = ++tot;</span><br><span class=\"line\">        T[x] . <span class=\"built_in\">max</span> = <span class=\"built_in\">max</span>;</span><br><span class=\"line\">        mem(T[x].nxt,<span class=\"number\">0</span>);</span><br><span class=\"line\">        T[x] . link = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">extend</span><span class=\"params\">(<span class=\"keyword\">int</span> c,<span class=\"keyword\">int</span> flag)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = newnode(T[last] . <span class=\"built_in\">max</span> + <span class=\"number\">1</span>),v = last;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag != <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            modify(root[u],<span class=\"number\">1</span>,N,flag);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;v &amp;&amp; !T[v].nxt[c];v = T[v].link)</span><br><span class=\"line\">            T[v].nxt[c] = u;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!v)&#123;</span><br><span class=\"line\">            T[u] . link = start;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[T[v].nxt[c]].<span class=\"built_in\">max</span> == T[v].<span class=\"built_in\">max</span> + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            T[u].link = T[v].nxt[c];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = newnode(T[v].<span class=\"built_in\">max</span>+<span class=\"number\">1</span>),o = T[v].nxt[c];</span><br><span class=\"line\">            rep(k,<span class=\"number\">0</span>,<span class=\"number\">26</span>) T[n].nxt[k] = T[o].nxt[k];</span><br><span class=\"line\">            T[n] . link = T[o].link;</span><br><span class=\"line\">            T[o].link = T[u].link = n;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;v &amp;&amp; T[v].nxt[c] == o;v=T[v].link)</span><br><span class=\"line\">                T[v].nxt[c] = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> last = u;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; V[maxn];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">unsigned</span> i=<span class=\"number\">0</span>;i&lt;V[u].<span class=\"built_in\">size</span>();++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = V[u][i];</span><br><span class=\"line\">            dfs(v);</span><br><span class=\"line\">            root[u] = merge(root[u],root[v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">topsort</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Rep(i,<span class=\"number\">2</span>,tot)</span><br><span class=\"line\">            V[T[i].link] . push_back(<span class=\"keyword\">int</span>(i));</span><br><span class=\"line\">        dfs(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;sam;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"name.in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    freopen(<span class=\"string\">\"name.out\"</span>,<span class=\"string\">\"w\"</span>,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,s);N = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;s[i];++i) sam.extend(s[i] - <span class=\"string\">'a'</span>,i+<span class=\"number\">1</span>);</span><br><span class=\"line\">    n = rd();</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,t);</span><br><span class=\"line\">        sam.last = sam.start;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;t[j];++j)&#123;</span><br><span class=\"line\">            V[i].push_back(sam.extend(t[j] - <span class=\"string\">'a'</span>,<span class=\"number\">-1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        l[i] = rd(),r[i] = rd();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sam.topsort();</span><br><span class=\"line\">    mem(vis,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    vis[<span class=\"number\">1</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">register</span> ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        top = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"keyword\">unsigned</span> j=<span class=\"number\">0</span>;j&lt;V[i].<span class=\"built_in\">size</span>();++j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> x = V[i][j];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;!vis[x];x = sam.T[x].link)&#123;</span><br><span class=\"line\">                st[++top] = x;</span><br><span class=\"line\">                vis[x] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> X = query(root[x],<span class=\"number\">1</span>,N,l[i],r[i]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!X)&#123;</span><br><span class=\"line\">                    ans += sam.T[x].<span class=\"built_in\">max</span> - sam.T[sam.T[x].link].<span class=\"built_in\">max</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> len = X - l[i] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"comment\">//长度在1..len都不行</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(len &lt; sam.T[sam.T[x].link].<span class=\"built_in\">max</span>)&#123;</span><br><span class=\"line\">                        ans += sam.T[x].<span class=\"built_in\">max</span> - sam.T[sam.T[x].link].<span class=\"built_in\">max</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        ans += <span class=\"built_in\">max</span>(<span class=\"number\">0</span>,sam.T[x].<span class=\"built_in\">max</span> - len);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;top;top--) vis[st[top]] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        writeln(ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"NOIP2017 滚粗记","_content":"\n​\t本来不想写，毕竟自己太弱了。但怕以后在没有机会写，未来便再没有什么回忆了。\n\n<!--more-->\n\n#### Day0\n\n​\t期中考……晚上补了一波模板，听说有个同学复习了高斯消元？？\n\n#### Day1：\n\n​\t那道题面先看题\n\n​\t\tT1：这……不是原题吗？A*B-A-B啊。嗯……数据范围挺好要LL，等下再拍一下。\n\n​\t\tT2：这……看起来挺恶心的模拟？\n\n​\t\tT3：感觉是DP，咦，怎么还有0环？\n\n​\t于是很快拍过T1，做T2，要不是T2有大样例，找出了我不下3个错误。\n\n​\t\t大概还有两个半小时的样子，开始做T3。\n\n​\t没有0的，貌似最短路再套个DP就行了。有0环？貌似SPFA判一下就可以了？\n\n​\t心里想：**NOIP应该没人卡SPFA吧**\n\n​\t大概10点半左右过了样例，然而，大样例跑了4秒。\n\n​\t于是开始卡常数，11点左右卡到了3秒。\n\n​\t然后听说CCF的机子跑得很快。嗯，单元运气好点——事实证明，我听说的是CF，而CCF的老年机非常慢！\n\n​\t出考场，有人告诉我SPFA的 复杂度在判负环（或者0环）基本上每次都能到达极限。\n\n估分:100+100+~~100~~ 60  PS:删除线为出考场时的估分\n\n实际得分:100+100+70，除了0环我竟然没被卡常数呐。\n\n​\t晚上和SYY看电影，大概到11点左右打算睡觉，结果被子太热睡不着，起来上厕所貌似第二天了……于是Day2滚粗。\n\n#### Day2\n\n​\t早上起来头特别晕，发现捏自己的脸都不会感到痛，很想去跑几圈，但是衢州下着雨……\n\n​\t当时希望自己RP能好，但也预感到爆炸。\n\n​\t拿到题面。\n\n​\tT1:貌似不难，$sqrt$判一下再BFS一下？\n\n​\tT2:爆搜？？状压？？有点假\n\n​\tT3:50分貌似可以直接做，还有20分？貌似$splay$可做，貌似可做$30$分。——然而当时太$naive$的我只是听说过有splay，BST这种东西，而真正了解一点的，也就只有set的insert的lower_bound。\n\n​\t不过如果拿个250一等应该也稳了。\n\n​\t于是开始刚T1,和D1T1差不多很快就做出来了，加了一个eps。当时有点怕$sqrt$会不会超时，但觉得$NOIP$不会有人卡$sqrt$，事实证明真的没卡，有些人有乘法来比较，据范围要unsigned long long，很多人用了long long也都过了。\n\n​\t$T2$先愉快地想到了分层状压，然而当时脑子有点昏，计算复杂度大概是$O(4^n * 2^n)$，当时想的大概是枚举下一层的状态，预处理出是否可行。\n\n​\t一算，这只能过70分呀，我还是先做T3吧。\n\n​\t于是T3写了50分做法。写完大概还有两个半小时，小样例过了，大样例一测竟然有五六处错误，这些错误还不是诸如最后一排的特殊……于是认真地调起了50分暴力。\n\n​\t中间发现一直找不出错误，开始想T2的100分做法。\n\n​\t然后我应该是想到了最优解一定会被算到，然而又新YY的一个错误的DP，事实证明一个错误的DP样例都过不起但是浪费了不少时间。\n\n​\t有点痛苦，于是T2开始写$O(n!)$的暴力（当时不知怎么的忘记了之前想到的状压），发现还是没写对。\n\n​\t这时候离考试结束只有1个小时了。\n\n​\t我悲壮地写了40分做法。然后~~样例~~**自己的小数据**过了。\n\n​\t我开始悲壮地继续调T3，到考试结束还没有找出错误。\n\n\n\n​\t返程的火车上，我回忆起T3，突然想到自己在处理最后一列的问题的时候少了一个特判，会导致这一排的前面的都有问题。然后如果数据比较大，期望还是有得分的。然后没发现我还有个一个致命的错误：爆$LL$\n\n​\t看了$zzq$的题解，发现我T2的状压做法距离正解就差一个预处理！\n\n估分:~~100~~ 80+40+~~0~~ 30 ;PS:删除线为出考场时的估分\n\n实际得分:100+5+35.\n\n​\t我T2炸成5分了？？我要是当时写状压呢？？？万一一不小心满分了呢？？？那也比不过`WZP`呀！\n\n​\t我T3竟然有35分.\n\n#### 后记\n\n​\t我当时的想法就是混个提高组一等，结果真的只混了一个提高组一等。当时以为\n\n​\t然后遇到了各种神犇，像初三就510的王展鹏。\n\n\n\n​\t我在想，要是我之前就学会了splay等平衡树，我是不是能多拿30分？\n\n​\t然而发现情况比我想象的复杂，Day2我睡眠不足，神情恍惚，精神状态不对——好吧，只是我弱的一个借口。\n\n​\t我省初三神犇太多啦……\n\n​\t我省初一神犇太多了……\n\n​\t我本来想，ZJOI2018也许自己会更好(去年爆蛋)。然而貌似我得AFO啦，所以记下这篇文章。","source":"_posts/滚粗记/NOIP2017滚粗记.md","raw":"---\ntitle: NOIP2017滚粗记\ntags:\n - 游记\n---\n\n​\t本来不想写，毕竟自己太弱了。但怕以后在没有机会写，未来便再没有什么回忆了。\n\n<!--more-->\n\n#### Day0\n\n​\t期中考……晚上补了一波模板，听说有个同学复习了高斯消元？？\n\n#### Day1：\n\n​\t那道题面先看题\n\n​\t\tT1：这……不是原题吗？A*B-A-B啊。嗯……数据范围挺好要LL，等下再拍一下。\n\n​\t\tT2：这……看起来挺恶心的模拟？\n\n​\t\tT3：感觉是DP，咦，怎么还有0环？\n\n​\t于是很快拍过T1，做T2，要不是T2有大样例，找出了我不下3个错误。\n\n​\t\t大概还有两个半小时的样子，开始做T3。\n\n​\t没有0的，貌似最短路再套个DP就行了。有0环？貌似SPFA判一下就可以了？\n\n​\t心里想：**NOIP应该没人卡SPFA吧**\n\n​\t大概10点半左右过了样例，然而，大样例跑了4秒。\n\n​\t于是开始卡常数，11点左右卡到了3秒。\n\n​\t然后听说CCF的机子跑得很快。嗯，单元运气好点——事实证明，我听说的是CF，而CCF的老年机非常慢！\n\n​\t出考场，有人告诉我SPFA的 复杂度在判负环（或者0环）基本上每次都能到达极限。\n\n估分:100+100+~~100~~ 60  PS:删除线为出考场时的估分\n\n实际得分:100+100+70，除了0环我竟然没被卡常数呐。\n\n​\t晚上和SYY看电影，大概到11点左右打算睡觉，结果被子太热睡不着，起来上厕所貌似第二天了……于是Day2滚粗。\n\n#### Day2\n\n​\t早上起来头特别晕，发现捏自己的脸都不会感到痛，很想去跑几圈，但是衢州下着雨……\n\n​\t当时希望自己RP能好，但也预感到爆炸。\n\n​\t拿到题面。\n\n​\tT1:貌似不难，$sqrt$判一下再BFS一下？\n\n​\tT2:爆搜？？状压？？有点假\n\n​\tT3:50分貌似可以直接做，还有20分？貌似$splay$可做，貌似可做$30$分。——然而当时太$naive$的我只是听说过有splay，BST这种东西，而真正了解一点的，也就只有set的insert的lower_bound。\n\n​\t不过如果拿个250一等应该也稳了。\n\n​\t于是开始刚T1,和D1T1差不多很快就做出来了，加了一个eps。当时有点怕$sqrt$会不会超时，但觉得$NOIP$不会有人卡$sqrt$，事实证明真的没卡，有些人有乘法来比较，据范围要unsigned long long，很多人用了long long也都过了。\n\n​\t$T2$先愉快地想到了分层状压，然而当时脑子有点昏，计算复杂度大概是$O(4^n * 2^n)$，当时想的大概是枚举下一层的状态，预处理出是否可行。\n\n​\t一算，这只能过70分呀，我还是先做T3吧。\n\n​\t于是T3写了50分做法。写完大概还有两个半小时，小样例过了，大样例一测竟然有五六处错误，这些错误还不是诸如最后一排的特殊……于是认真地调起了50分暴力。\n\n​\t中间发现一直找不出错误，开始想T2的100分做法。\n\n​\t然后我应该是想到了最优解一定会被算到，然而又新YY的一个错误的DP，事实证明一个错误的DP样例都过不起但是浪费了不少时间。\n\n​\t有点痛苦，于是T2开始写$O(n!)$的暴力（当时不知怎么的忘记了之前想到的状压），发现还是没写对。\n\n​\t这时候离考试结束只有1个小时了。\n\n​\t我悲壮地写了40分做法。然后~~样例~~**自己的小数据**过了。\n\n​\t我开始悲壮地继续调T3，到考试结束还没有找出错误。\n\n\n\n​\t返程的火车上，我回忆起T3，突然想到自己在处理最后一列的问题的时候少了一个特判，会导致这一排的前面的都有问题。然后如果数据比较大，期望还是有得分的。然后没发现我还有个一个致命的错误：爆$LL$\n\n​\t看了$zzq$的题解，发现我T2的状压做法距离正解就差一个预处理！\n\n估分:~~100~~ 80+40+~~0~~ 30 ;PS:删除线为出考场时的估分\n\n实际得分:100+5+35.\n\n​\t我T2炸成5分了？？我要是当时写状压呢？？？万一一不小心满分了呢？？？那也比不过`WZP`呀！\n\n​\t我T3竟然有35分.\n\n#### 后记\n\n​\t我当时的想法就是混个提高组一等，结果真的只混了一个提高组一等。当时以为\n\n​\t然后遇到了各种神犇，像初三就510的王展鹏。\n\n\n\n​\t我在想，要是我之前就学会了splay等平衡树，我是不是能多拿30分？\n\n​\t然而发现情况比我想象的复杂，Day2我睡眠不足，神情恍惚，精神状态不对——好吧，只是我弱的一个借口。\n\n​\t我省初三神犇太多啦……\n\n​\t我省初一神犇太多了……\n\n​\t我本来想，ZJOI2018也许自己会更好(去年爆蛋)。然而貌似我得AFO啦，所以记下这篇文章。","slug":"滚粗记/NOIP2017滚粗记","published":1,"date":"2021-08-28T13:02:40.632Z","updated":"2021-08-28T13:02:40.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvso354001zvfnu0m3lh2d4","content":"<p>​\t本来不想写，毕竟自己太弱了。但怕以后在没有机会写，未来便再没有什么回忆了。</p><a id=\"more\"></a><h4 id=\"day0\"><a class=\"markdownIt-Anchor\" href=\"#day0\"></a> Day0</h4><p>​\t期中考……晚上补了一波模板，听说有个同学复习了高斯消元？？</p><h4 id=\"day1\"><a class=\"markdownIt-Anchor\" href=\"#day1\"></a> Day1：</h4><p>​\t那道题面先看题 </p><p>​ T1：这……不是原题吗？A*B-A-B 啊。嗯……数据范围挺好要 LL，等下再拍一下。</p><p>​ T2：这……看起来挺恶心的模拟？</p><p>​ T3：感觉是 DP，咦，怎么还有 0 环？</p><p>​\t于是很快拍过 T1，做 T2，要不是 T2 有大样例，找出了我不下 3 个错误。</p><p>​ 大概还有两个半小时的样子，开始做 T3。</p><p>​\t没有 0 的，貌似最短路再套个 DP 就行了。有 0 环？貌似 SPFA 判一下就可以了？</p><p>​\t心里想：<strong>NOIP 应该没人卡 SPFA 吧</strong></p><p>​\t大概 10 点半左右过了样例，然而，大样例跑了 4 秒。</p><p>​\t于是开始卡常数，11 点左右卡到了 3 秒。</p><p>​\t然后听说 CCF 的机子跑得很快。嗯，单元运气好点——事实证明，我听说的是 CF，而 CCF 的老年机非常慢！</p><p>​\t出考场，有人告诉我 SPFA 的 复杂度在判负环（或者 0 环）基本上每次都能到达极限。</p><p> 估分:100+100+<s>100</s> 60 PS: 删除线为出考场时的估分 </p><p> 实际得分:100+100+70，除了 0 环我竟然没被卡常数呐。</p><p>​\t晚上和 SYY 看电影，大概到 11 点左右打算睡觉，结果被子太热睡不着，起来上厕所貌似第二天了……于是 Day2 滚粗。</p><h4 id=\"day2\"><a class=\"markdownIt-Anchor\" href=\"#day2\"></a> Day2</h4><p>​\t早上起来头特别晕，发现捏自己的脸都不会感到痛，很想去跑几圈，但是衢州下着雨……</p><p>​\t当时希望自己 RP 能好，但也预感到爆炸。</p><p>​\t拿到题面。</p><p>​\tT1: 貌似不难，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>q</mi><mi>r</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">sqrt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.80952em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">t</span></span></span></span>判一下再 BFS 一下？</p><p>​\tT2: 爆搜？？状压？？有点假 </p><p>​\tT3:50 分貌似可以直接做，还有 20 分？貌似<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>p</mi><mi>l</mi><mi>a</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">splay</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span></span></span></span> 可做，貌似可做 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>30</mn></mrow><annotation encoding=\"application/x-tex\">30</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">3</span><span class=\"mord\">0</span></span></span></span> 分。——然而当时太 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mi>a</mi><mi>i</mi><mi>v</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">naive</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span></span></span></span> 的我只是听说过有 splay，BST 这种东西，而真正了解一点的，也就只有 set 的 insert 的 lower_bound。</p><p>​\t不过如果拿个 250 一等应该也稳了。</p><p>​\t于是开始刚 T1, 和 D1T1 差不多很快就做出来了，加了一个 eps。当时有点怕 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>q</mi><mi>r</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">sqrt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.80952em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">t</span></span></span></span> 会不会超时，但觉得 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mi>O</mi><mi>I</mi><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">NOIP</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10903em\">N</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mord mathdefault\" style=\"margin-right:.07847em\">I</span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span></span></span></span> 不会有人卡 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>q</mi><mi>r</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">sqrt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.80952em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">t</span></span></span></span>，事实证明真的没卡，有些人有乘法来比较，据范围要 unsigned long long，很多人用了 long long 也都过了。</p><p>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">T2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">T</span><span class=\"mord\">2</span></span></span></span> 先愉快地想到了分层状压，然而当时脑子有点昏，计算复杂度大概是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>4</mn><mi>n</mi></msup><mo>∗</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(4^n * 2^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.664392em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.664392em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，当时想的大概是枚举下一层的状态，预处理出是否可行。</p><p>​\t一算，这只能过 70 分呀，我还是先做 T3 吧。</p><p>​\t于是 T3 写了 50 分做法。写完大概还有两个半小时，小样例过了，大样例一测竟然有五六处错误，这些错误还不是诸如最后一排的特殊……于是认真地调起了 50 分暴力。</p><p>​\t中间发现一直找不出错误，开始想 T2 的 100 分做法。</p><p>​\t然后我应该是想到了最优解一定会被算到，然而又新 YY 的一个错误的 DP，事实证明一个错误的 DP 样例都过不起但是浪费了不少时间。</p><p>​\t有点痛苦，于是 T2 开始写<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n!)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">!</span><span class=\"mclose\">)</span></span></span></span> 的暴力（当时不知怎么的忘记了之前想到的状压），发现还是没写对。</p><p>​\t这时候离考试结束只有 1 个小时了。</p><p>​\t我悲壮地写了 40 分做法。然后 <s> 样例 </s><strong> 自己的小数据 </strong> 过了。</p><p>​\t我开始悲壮地继续调 T3，到考试结束还没有找出错误。</p><p>​\t返程的火车上，我回忆起 T3，突然想到自己在处理最后一列的问题的时候少了一个特判，会导致这一排的前面的都有问题。然后如果数据比较大，期望还是有得分的。然后没发现我还有个一个致命的错误：爆 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">LL</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">L</span><span class=\"mord mathdefault\">L</span></span></span></span></p><p>​\t看了<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>z</mi><mi>z</mi><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">zzq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.625em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span></span></span></span> 的题解，发现我 T2 的状压做法距离正解就差一个预处理！</p><p>估分:<s>100</s> 80+40+<s>0</s> 30 ;PS: 删除线为出考场时的估分 </p><p> 实际得分:100+5+35.</p><p>​\t我 T2 炸成 5 分了？？我要是当时写状压呢？？？万一一不小心满分了呢？？？那也比不过 <code>WZP</code> 呀！</p><p>​\t我 T3 竟然有 35 分.</p><h4 id=\"后记\"><a class=\"markdownIt-Anchor\" href=\"# 后记\"></a> 后记</h4><p>​\t我当时的想法就是混个提高组一等，结果真的只混了一个提高组一等。当时以为</p><p>​\t然后遇到了各种神犇，像初三就 510 的王展鹏。</p><p>​\t我在想，要是我之前就学会了 splay 等平衡树，我是不是能多拿 30 分？</p><p>​\t然而发现情况比我想象的复杂，Day2 我睡眠不足，神情恍惚，精神状态不对——好吧，只是我弱的一个借口。</p><p>​\t我省初三神犇太多啦……</p><p>​\t我省初一神犇太多了……</p><p>​\t我本来想，ZJOI2018 也许自己会更好(去年爆蛋)。然而貌似我得 AFO 啦，所以记下这篇文章。</p>","site":{"data":{}},"excerpt":"<p>​\t本来不想写，毕竟自己太弱了。但怕以后在没有机会写，未来便再没有什么回忆了。</p>","more":"<h4 id=\"day0\"><a class=\"markdownIt-Anchor\" href=\"#day0\"></a> Day0</h4><p>​\t期中考……晚上补了一波模板，听说有个同学复习了高斯消元？？</p><h4 id=\"day1\"><a class=\"markdownIt-Anchor\" href=\"#day1\"></a> Day1：</h4><p>​\t那道题面先看题</p><p>​ T1：这……不是原题吗？A*B-A-B啊。嗯……数据范围挺好要LL，等下再拍一下。</p><p>​ T2：这……看起来挺恶心的模拟？</p><p>​ T3：感觉是DP，咦，怎么还有0环？</p><p>​\t于是很快拍过T1，做T2，要不是T2有大样例，找出了我不下3个错误。</p><p>​ 大概还有两个半小时的样子，开始做T3。</p><p>​\t没有0的，貌似最短路再套个DP就行了。有0环？貌似SPFA判一下就可以了？</p><p>​\t心里想：<strong>NOIP应该没人卡SPFA吧</strong></p><p>​\t大概10点半左右过了样例，然而，大样例跑了4秒。</p><p>​\t于是开始卡常数，11点左右卡到了3秒。</p><p>​\t然后听说CCF的机子跑得很快。嗯，单元运气好点——事实证明，我听说的是CF，而CCF的老年机非常慢！</p><p>​\t出考场，有人告诉我SPFA的 复杂度在判负环（或者0环）基本上每次都能到达极限。</p><p>估分:100+100+<s>100</s> 60 PS:删除线为出考场时的估分</p><p>实际得分:100+100+70，除了0环我竟然没被卡常数呐。</p><p>​\t晚上和SYY看电影，大概到11点左右打算睡觉，结果被子太热睡不着，起来上厕所貌似第二天了……于是Day2滚粗。</p><h4 id=\"day2\"><a class=\"markdownIt-Anchor\" href=\"#day2\"></a> Day2</h4><p>​\t早上起来头特别晕，发现捏自己的脸都不会感到痛，很想去跑几圈，但是衢州下着雨……</p><p>​\t当时希望自己RP能好，但也预感到爆炸。</p><p>​\t拿到题面。</p><p>​\tT1:貌似不难，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>q</mi><mi>r</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">sqrt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.80952em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">t</span></span></span></span>判一下再BFS一下？</p><p>​\tT2:爆搜？？状压？？有点假</p><p>​\tT3:50分貌似可以直接做，还有20分？貌似<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>p</mi><mi>l</mi><mi>a</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">splay</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span></span></span></span>可做，貌似可做<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>30</mn></mrow><annotation encoding=\"application/x-tex\">30</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">3</span><span class=\"mord\">0</span></span></span></span>分。——然而当时太<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mi>a</mi><mi>i</mi><mi>v</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">naive</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span></span></span></span>的我只是听说过有splay，BST这种东西，而真正了解一点的，也就只有set的insert的lower_bound。</p><p>​\t不过如果拿个250一等应该也稳了。</p><p>​\t于是开始刚T1,和D1T1差不多很快就做出来了，加了一个eps。当时有点怕<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>q</mi><mi>r</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">sqrt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.80952em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">t</span></span></span></span>会不会超时，但觉得<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mi>O</mi><mi>I</mi><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">NOIP</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10903em\">N</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mord mathdefault\" style=\"margin-right:.07847em\">I</span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">P</span></span></span></span>不会有人卡<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>q</mi><mi>r</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">sqrt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.80952em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">t</span></span></span></span>，事实证明真的没卡，有些人有乘法来比较，据范围要unsigned long long，很多人用了long long也都过了。</p><p>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">T2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">T</span><span class=\"mord\">2</span></span></span></span>先愉快地想到了分层状压，然而当时脑子有点昏，计算复杂度大概是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>4</mn><mi>n</mi></msup><mo>∗</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(4^n * 2^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.664392em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.664392em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，当时想的大概是枚举下一层的状态，预处理出是否可行。</p><p>​\t一算，这只能过70分呀，我还是先做T3吧。</p><p>​\t于是T3写了50分做法。写完大概还有两个半小时，小样例过了，大样例一测竟然有五六处错误，这些错误还不是诸如最后一排的特殊……于是认真地调起了50分暴力。</p><p>​\t中间发现一直找不出错误，开始想T2的100分做法。</p><p>​\t然后我应该是想到了最优解一定会被算到，然而又新YY的一个错误的DP，事实证明一个错误的DP样例都过不起但是浪费了不少时间。</p><p>​\t有点痛苦，于是T2开始写<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n!)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">!</span><span class=\"mclose\">)</span></span></span></span>的暴力（当时不知怎么的忘记了之前想到的状压），发现还是没写对。</p><p>​\t这时候离考试结束只有1个小时了。</p><p>​\t我悲壮地写了40分做法。然后<s>样例</s><strong>自己的小数据</strong>过了。</p><p>​\t我开始悲壮地继续调T3，到考试结束还没有找出错误。</p><p>​\t返程的火车上，我回忆起T3，突然想到自己在处理最后一列的问题的时候少了一个特判，会导致这一排的前面的都有问题。然后如果数据比较大，期望还是有得分的。然后没发现我还有个一个致命的错误：爆<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">LL</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\">L</span><span class=\"mord mathdefault\">L</span></span></span></span></p><p>​\t看了<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>z</mi><mi>z</mi><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">zzq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.625em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"mord mathdefault\" style=\"margin-right:.04398em\">z</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span></span></span></span>的题解，发现我T2的状压做法距离正解就差一个预处理！</p><p>估分:<s>100</s> 80+40+<s>0</s> 30 ;PS:删除线为出考场时的估分</p><p>实际得分:100+5+35.</p><p>​\t我T2炸成5分了？？我要是当时写状压呢？？？万一一不小心满分了呢？？？那也比不过<code>WZP</code>呀！</p><p>​\t我T3竟然有35分.</p><h4 id=\"后记\"><a class=\"markdownIt-Anchor\" href=\"#后记\"></a> 后记</h4><p>​\t我当时的想法就是混个提高组一等，结果真的只混了一个提高组一等。当时以为</p><p>​\t然后遇到了各种神犇，像初三就510的王展鹏。</p><p>​\t我在想，要是我之前就学会了splay等平衡树，我是不是能多拿30分？</p><p>​\t然而发现情况比我想象的复杂，Day2我睡眠不足，神情恍惚，精神状态不对——好吧，只是我弱的一个借口。</p><p>​\t我省初三神犇太多啦……</p><p>​\t我省初一神犇太多了……</p><p>​\t我本来想，ZJOI2018也许自己会更好(去年爆蛋)。然而貌似我得AFO啦，所以记下这篇文章。</p>"},{"title":"ZJOI2018 Day1 划水记","_content":"\n​\t同市初三神犇wzp太巨了，省队已经稳了。\n\n​\t听说lyx巨佬FST拿了130结果还是rank1\n\n​\t我反正是去划水的。\n\n<!--more-->\n\n> 省选讲课笑嘻嘻，考完省选mmp\n\n​\t讲课貌似有不少模拟赛做到过的题？？反正我是不会。\n\n说省选吧，我反正是来划水的。\n\nT1没取模爆蛋\n\nT2暴力打错爆蛋\n\nT3不会做只有10分。\n\n大概是平时刷题题解看太多了？\n\n\n\n\n\n\n\n\n\n\n\n高一神犇zyy翻车了10分\n\n高二神犇要退役了。\n\nwzp捧杯反正是早晚的事情。\n\n","source":"_posts/滚粗记/ZJOI2018 Day1.md","raw":"---\ntitle: ZJOI2018 Day1划水记\ntags:\n - 游记\n---\n\n​\t同市初三神犇wzp太巨了，省队已经稳了。\n\n​\t听说lyx巨佬FST拿了130结果还是rank1\n\n​\t我反正是去划水的。\n\n<!--more-->\n\n> 省选讲课笑嘻嘻，考完省选mmp\n\n​\t讲课貌似有不少模拟赛做到过的题？？反正我是不会。\n\n说省选吧，我反正是来划水的。\n\nT1没取模爆蛋\n\nT2暴力打错爆蛋\n\nT3不会做只有10分。\n\n大概是平时刷题题解看太多了？\n\n\n\n\n\n\n\n\n\n\n\n高一神犇zyy翻车了10分\n\n高二神犇要退役了。\n\nwzp捧杯反正是早晚的事情。\n\n","slug":"滚粗记/ZJOI2018 Day1","published":1,"date":"2021-08-28T13:02:40.629Z","updated":"2021-08-28T13:02:40.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvso3550021vfnufe996cg7","content":"<p>​\t同市初三神犇 wzp 太巨了，省队已经稳了。</p><p>​\t听说 lyx 巨佬 FST 拿了 130 结果还是 rank1</p><p>​\t我反正是去划水的。</p><a id=\"more\"></a><blockquote><p>省选讲课笑嘻嘻，考完省选 mmp</p></blockquote><p>​\t讲课貌似有不少模拟赛做到过的题？？反正我是不会。</p><p>说省选吧，我反正是来划水的。</p><p>T1 没取模爆蛋 </p><p>T2 暴力打错爆蛋</p><p>T3 不会做只有 10 分。</p><p> 大概是平时刷题题解看太多了？</p><p>高一神犇 zyy 翻车了 10 分 </p><p> 高二神犇要退役了。</p><p>wzp 捧杯反正是早晚的事情。</p>","site":{"data":{}},"excerpt":"<p>​\t同市初三神犇wzp太巨了，省队已经稳了。</p><p>​\t听说lyx巨佬FST拿了130结果还是rank1</p><p>​\t我反正是去划水的。</p>","more":"<blockquote><p>省选讲课笑嘻嘻，考完省选mmp</p></blockquote><p>​\t讲课貌似有不少模拟赛做到过的题？？反正我是不会。</p><p>说省选吧，我反正是来划水的。</p><p>T1没取模爆蛋</p><p>T2暴力打错爆蛋</p><p>T3不会做只有10分。</p><p>大概是平时刷题题解看太多了？</p><p>高一神犇zyy翻车了10分</p><p>高二神犇要退役了。</p><p>wzp捧杯反正是早晚的事情。</p>"},{"title":"ZJOI2019 赛后感","_content":"\n本来想写些正经的游记，或许还能分析一下题目吧。\n\n但毕竟发现自己高一的OI生涯已经结束了。\n\n <大概是有点**简略回忆录**，反正也没什么人会看就是了>\n\n<!--more-->\n\n鉴于语文水平低下，这大概只是篇流水账罢了。\n\n#### 按正论说回忆录得有个开头，但哪些年代久远的，沉浸在记忆里的也早融化了，便也得不到个开头。\n\n​\t他自诩为emoairx，若要问他为何如此称呼，他大抵会说：“这是我曾经用时间当随机种子，随机出来的字符串，当时取了前6位emoair，只是注册账号的时候发现已经有重复了，便加了一个x”。或许他是想致敬WJMZBMR，但他不配这么做——果然这应该叫做抄袭吗？\n\n&emsp;学OI是在四年级，这不算晚，或许还算有些早，只是前些年都在浪，第一年学会了分支语句，第二年学会了循环语句。\n\n&emsp;若是问他那时候他为什么学要OI，他大抵会说：“那时候我玩war3，玩msdzls，玩pvz，当时看着这些精美的游戏，总想着写一点外挂出来，把自己的血量无限，金币无限……也许还可以自己写一个游戏……我当时用仅有的知识写一些诸位看来可笑的游戏，像是猜数啊，石头剪刀布啊，但当时感觉自己很充实。”\n\n&emsp;他说起那些有些，还有些苦笑，他说一开始是用pascal写的，界面不太美观，后来便自学了VB，写了一些贪吃蛇，2048，俄罗斯方块之类的游戏。\n\n&emsp;据他当时的设想，他打算把这些小游戏做一个闯关游戏集合，每一关都是一个小游戏，只是后来因为一些原因做了七八个之后就咕了。\n\n&emsp;再说OI上，他其实六年级就知道有NOIP这个赛事，只是初一才报名。\n\n&emsp;倒是报名了也没什么用途，他当年初赛恰好卡线，复赛第三题不知道乘法分配律，第四题不会贪心算法，而后来第三题又因为数组开太大，MLE了，便拿了240分，当时普及二等线是250，又没有三等奖，便愉快地毫无收获。\n\n&emsp;那时候已经是初中了，他在他们县里一个还不错的初中上学，那时候和他一起学OI的人确实也有一些，当时他们学校有两个初一就一等的，一个是后来鼎鼎大名的周指导，还有一个是初中三年稳居年段第一的某陈姓同学——后来也便不知道了。\n\n&emsp;初中的时候，他文化课似乎还不错，他有时候在中午去机房颓废，有时候周指导和陈同学也在，他便也会向他们请教一下文化课作业。若是问他怎么进的学校机房的，他大抵会说：“有时候是老师在，门便是开的，有时候老师不在，便撬窗，我们学校的窗户不太紧，一开始拿个笔就能撬开，时间长了直接用手往里面摁就能把窗户撬开了，然后让个人进去，把后门开了——前面是有锁的，是开不了的。到时候再锁上后门，从窗户里爬出来……”\n\n&emsp;到了第二年联赛，他又卡线进了复赛，他很快做出了前两题，看第三题的时候要读入很多行数，他马上就发现直接开一个邻接矩阵来存是会超出内存限制的。他考场上想到了一个把所有数存在一个长度为n的数组里面，然后记录一下每一段是从数组的那个位置开始持续多少。当时他把这个称作“队列数组”。——事实上，这是一个C++的vector，或者链表就可以解决的简单问题。那题的第四题，他没有发现相同的数字答案是一样的，写了一个简单的暴力，又稍微优化了一下。那年第四题他过了样例，但获得了0分的成绩，似乎是有一个地方判错了。当年的分数线是300分，他也正好是300，便卡线普及一等。\n\n&emsp;那时候周指导和陈同学依旧吊打他，他也习以为常了。\n\n&emsp;说emoairx同学倒也是有胆量，周指导和陈同学，以及同一个地区的徐同学打算初三参加提高组，emoairx同学也凑了上去，打算转C++，然后开始学提高组算法。说到那一年，emoairx充满了怀念。\n\n&emsp;“我记得那时候我是真的很认真，学校里文化课作业很多，我常常要做到十二点，但我还是会挤出时间学OI。我记得我花了好几天时间调出一道splay题，草稿纸上画满了平衡树。我记得有时候周指导，陈同学会和我一起探讨题目，东南的太阳光照在教室前的走廊上，照在指导的脸上，照在被我们涂画的草稿纸上。我记得学校运动会的时候，我们在机房里研究发现了排序加去重可以做到离散化——当时我们把它叫做哈希，并持续了许多时间。我记得陈同学教我树状数组，周指导教我线段树……有一段时间和xza一起做CF……曾经还写过写[博客]( [https://szoorz.github.io/2017/08/19/OI/Codeforces/%E9%A2%98%E8%A7%A3%EF%BC%9A2017%E6%9A%91%E5%81%87/codeforces2017%E6%9A%91%E5%81%87/](https://szoorz.github.io/2017/08/19/OI/Codeforces/题解：2017暑假/codeforces2017暑假/) )。那时候做题真的有多认真自己都想不到。两年了呀……“\n\n&emsp;我听着emoairx说，心中也挺有感触——毕竟，这是青春啊。\n\n&emsp;17年的联赛，emoairx同学获得了410分，尽管他奋力挣扎最终失败。但他已经很满意了，他觉得这个分数已经对得起他的付出了。不出所料的，周指导，陈同学和徐同学都吊打了他。\n\n&emsp;那之后，他想去徐同学想去的，当地有名的绍兴一中——这个名词还是他初二下才知道的，参加集训，绍一似乎乐于接受emoairx同学，emoairx同学便随着周指导，陈同学，徐同学在绍一集训了一段时间。\n\n&emsp;然而，因为一些奇怪的原因，于是emoairx同学又被赶回了学校，他当时有一些生无可恋，记得还因为被强制要求参加期末考试而咕掉了pkuwc。\n\n&emsp;那之后他参加了省选，其实当年他的水平完全被吊起来锤，他只是来旅游的。事实上一试他获得了全场最低分——0分。\n\n&emsp;emoairx同学后来还是去了绍兴一中，陈同学因为高超的文化课技巧选择了柯桥中学，似乎处于半退役状态，今年省选也没看到他人，周指导去了学车中学，这之后的事情大家都知道了，也不再提。当年我们三个一起游戏，一起奋斗如今分割三地，很少再联系了。\n\n&emsp;到了高中，emoairx同学渐渐地颓废了起来。他先后接触了动画片，galgame，小说……日渐沉迷，不复过去的努力。\n\n&emsp;不出所料，今年的省选他退役啦。\n\n&emsp;你若是问他，他今年省选怎么回事，他大抵会说：“我开场刚T2，先写了一个4个状态存它和它祖先是否被访问到的n^2 log n的暴力，发现可以用矩阵乘法优化，时间复杂度是n log n * 4^3的，当时我想都没想，直接写了一发，发现本机要跑9s，这时候差不多过去了两个多小时，于是他尝试卡常数，卡着卡着发现时间没多少了，直接去打T1暴力和T3暴力，结果暴力还打挂了，最后尝试把T2两个暴力拼一下，看一下第二个矩阵乘法能不能拿分，结果拼错了，最后没改成功就爆零了。出考场冷静了一下发现状态是可以做到3个的……”\n\n&emsp;但这毕竟是他的一番说辞，说到底就是他太弱了，他太颓了。\n\n以上内容——2019.3.7\n\n&emsp;后来我又问他，那你Day2为什么不能翻盘呢？\n\n&emsp;他笑着，却又有些郑重地说道：“水平不够啊。”\n\n&emsp;鉴于我的好奇，在重重追问下，他勉为其难地告诉我：“其实当时我就没想着翻盘，倒是心态也挺好，开场还是发现T2最可做，冷静分析一下发现可以直接上树剖线段树扫描线3个log的做法，当时我想到NOIP之后学DDP学到的一个叫做全局平衡二叉树的东西，那玩意儿可以把2个log的树剖优化成1个log，自己觉得没什么问题，就写完了，这写完还行，拿随机树测了一下，跑得飞快，又觉得不太靠谱，又拿链测，还是跑得飞快……这之后就普普通通地把T1和T3的暴力写了，似乎是会T3的多一些分的暴力，但毕竟不敢去写，T1又没有想到枚举非零元素消。但毕竟还是写了暴力。当时估分200，其实觉得自己不管怎么样都翻不了盘，出来也无所谓了。”\n\t\n&emsp;“只是后来出分之后发现自己第二题只有60……教练要来了程序自己测了一下，发现被卡常数了……其实也不是吧，毕竟全局平衡二叉树常数的确是挺大的，据说那个今年全国排名第四，最后被挤到第五无缘国家队的zzy也写了我这个做法，也T飞了。我当时只是奇怪为什么会T，后来我测了一下二叉树，发现的确跑得挺慢的。”\n\n&emsp;“不过，毕竟就算是200，也翻不了盘啊，就算我Day2是220分标准分，也还差好多分进省队啊。”\n\n&emsp;“那你怎么邀请赛也不去呀？”我问道。\n\n&emsp;“申不到啊，水平太低了。如果我day2没挂的话，可能有概率能申到吧……不过，我倒是无所谓了，毕竟后来打了NOI同步赛，大概是铜牌都没拿到，去现场爆蛋感觉总不如VP爆蛋来得不痛不痒。你应该知道的，今年NOI指导直接切了D1T3，进了集训队。有时候觉得吧，当时我和他的差距也才猴子和人一般，没想到现在我像那种毫无生命的无机物了。”\n\n&emsp;我看着他，心中略有些同情，听说他停了两年课，文化课已经爆蛋了，又没去过NOI，没进过省队，这种自招取消的年头，也不知道他将来流落街头的时候，有没有人会记得，曾经他也是一个拿过省一的竞赛生啊。","source":"_posts/滚粗记/ZJOI2019赛后感.md","raw":"---\ntitle: ZJOI2019赛后感\ntags:\n - 游记\n---\n\n本来想写些正经的游记，或许还能分析一下题目吧。\n\n但毕竟发现自己高一的OI生涯已经结束了。\n\n <大概是有点**简略回忆录**，反正也没什么人会看就是了>\n\n<!--more-->\n\n鉴于语文水平低下，这大概只是篇流水账罢了。\n\n#### 按正论说回忆录得有个开头，但哪些年代久远的，沉浸在记忆里的也早融化了，便也得不到个开头。\n\n​\t他自诩为emoairx，若要问他为何如此称呼，他大抵会说：“这是我曾经用时间当随机种子，随机出来的字符串，当时取了前6位emoair，只是注册账号的时候发现已经有重复了，便加了一个x”。或许他是想致敬WJMZBMR，但他不配这么做——果然这应该叫做抄袭吗？\n\n&emsp;学OI是在四年级，这不算晚，或许还算有些早，只是前些年都在浪，第一年学会了分支语句，第二年学会了循环语句。\n\n&emsp;若是问他那时候他为什么学要OI，他大抵会说：“那时候我玩war3，玩msdzls，玩pvz，当时看着这些精美的游戏，总想着写一点外挂出来，把自己的血量无限，金币无限……也许还可以自己写一个游戏……我当时用仅有的知识写一些诸位看来可笑的游戏，像是猜数啊，石头剪刀布啊，但当时感觉自己很充实。”\n\n&emsp;他说起那些有些，还有些苦笑，他说一开始是用pascal写的，界面不太美观，后来便自学了VB，写了一些贪吃蛇，2048，俄罗斯方块之类的游戏。\n\n&emsp;据他当时的设想，他打算把这些小游戏做一个闯关游戏集合，每一关都是一个小游戏，只是后来因为一些原因做了七八个之后就咕了。\n\n&emsp;再说OI上，他其实六年级就知道有NOIP这个赛事，只是初一才报名。\n\n&emsp;倒是报名了也没什么用途，他当年初赛恰好卡线，复赛第三题不知道乘法分配律，第四题不会贪心算法，而后来第三题又因为数组开太大，MLE了，便拿了240分，当时普及二等线是250，又没有三等奖，便愉快地毫无收获。\n\n&emsp;那时候已经是初中了，他在他们县里一个还不错的初中上学，那时候和他一起学OI的人确实也有一些，当时他们学校有两个初一就一等的，一个是后来鼎鼎大名的周指导，还有一个是初中三年稳居年段第一的某陈姓同学——后来也便不知道了。\n\n&emsp;初中的时候，他文化课似乎还不错，他有时候在中午去机房颓废，有时候周指导和陈同学也在，他便也会向他们请教一下文化课作业。若是问他怎么进的学校机房的，他大抵会说：“有时候是老师在，门便是开的，有时候老师不在，便撬窗，我们学校的窗户不太紧，一开始拿个笔就能撬开，时间长了直接用手往里面摁就能把窗户撬开了，然后让个人进去，把后门开了——前面是有锁的，是开不了的。到时候再锁上后门，从窗户里爬出来……”\n\n&emsp;到了第二年联赛，他又卡线进了复赛，他很快做出了前两题，看第三题的时候要读入很多行数，他马上就发现直接开一个邻接矩阵来存是会超出内存限制的。他考场上想到了一个把所有数存在一个长度为n的数组里面，然后记录一下每一段是从数组的那个位置开始持续多少。当时他把这个称作“队列数组”。——事实上，这是一个C++的vector，或者链表就可以解决的简单问题。那题的第四题，他没有发现相同的数字答案是一样的，写了一个简单的暴力，又稍微优化了一下。那年第四题他过了样例，但获得了0分的成绩，似乎是有一个地方判错了。当年的分数线是300分，他也正好是300，便卡线普及一等。\n\n&emsp;那时候周指导和陈同学依旧吊打他，他也习以为常了。\n\n&emsp;说emoairx同学倒也是有胆量，周指导和陈同学，以及同一个地区的徐同学打算初三参加提高组，emoairx同学也凑了上去，打算转C++，然后开始学提高组算法。说到那一年，emoairx充满了怀念。\n\n&emsp;“我记得那时候我是真的很认真，学校里文化课作业很多，我常常要做到十二点，但我还是会挤出时间学OI。我记得我花了好几天时间调出一道splay题，草稿纸上画满了平衡树。我记得有时候周指导，陈同学会和我一起探讨题目，东南的太阳光照在教室前的走廊上，照在指导的脸上，照在被我们涂画的草稿纸上。我记得学校运动会的时候，我们在机房里研究发现了排序加去重可以做到离散化——当时我们把它叫做哈希，并持续了许多时间。我记得陈同学教我树状数组，周指导教我线段树……有一段时间和xza一起做CF……曾经还写过写[博客]( [https://szoorz.github.io/2017/08/19/OI/Codeforces/%E9%A2%98%E8%A7%A3%EF%BC%9A2017%E6%9A%91%E5%81%87/codeforces2017%E6%9A%91%E5%81%87/](https://szoorz.github.io/2017/08/19/OI/Codeforces/题解：2017暑假/codeforces2017暑假/) )。那时候做题真的有多认真自己都想不到。两年了呀……“\n\n&emsp;我听着emoairx说，心中也挺有感触——毕竟，这是青春啊。\n\n&emsp;17年的联赛，emoairx同学获得了410分，尽管他奋力挣扎最终失败。但他已经很满意了，他觉得这个分数已经对得起他的付出了。不出所料的，周指导，陈同学和徐同学都吊打了他。\n\n&emsp;那之后，他想去徐同学想去的，当地有名的绍兴一中——这个名词还是他初二下才知道的，参加集训，绍一似乎乐于接受emoairx同学，emoairx同学便随着周指导，陈同学，徐同学在绍一集训了一段时间。\n\n&emsp;然而，因为一些奇怪的原因，于是emoairx同学又被赶回了学校，他当时有一些生无可恋，记得还因为被强制要求参加期末考试而咕掉了pkuwc。\n\n&emsp;那之后他参加了省选，其实当年他的水平完全被吊起来锤，他只是来旅游的。事实上一试他获得了全场最低分——0分。\n\n&emsp;emoairx同学后来还是去了绍兴一中，陈同学因为高超的文化课技巧选择了柯桥中学，似乎处于半退役状态，今年省选也没看到他人，周指导去了学车中学，这之后的事情大家都知道了，也不再提。当年我们三个一起游戏，一起奋斗如今分割三地，很少再联系了。\n\n&emsp;到了高中，emoairx同学渐渐地颓废了起来。他先后接触了动画片，galgame，小说……日渐沉迷，不复过去的努力。\n\n&emsp;不出所料，今年的省选他退役啦。\n\n&emsp;你若是问他，他今年省选怎么回事，他大抵会说：“我开场刚T2，先写了一个4个状态存它和它祖先是否被访问到的n^2 log n的暴力，发现可以用矩阵乘法优化，时间复杂度是n log n * 4^3的，当时我想都没想，直接写了一发，发现本机要跑9s，这时候差不多过去了两个多小时，于是他尝试卡常数，卡着卡着发现时间没多少了，直接去打T1暴力和T3暴力，结果暴力还打挂了，最后尝试把T2两个暴力拼一下，看一下第二个矩阵乘法能不能拿分，结果拼错了，最后没改成功就爆零了。出考场冷静了一下发现状态是可以做到3个的……”\n\n&emsp;但这毕竟是他的一番说辞，说到底就是他太弱了，他太颓了。\n\n以上内容——2019.3.7\n\n&emsp;后来我又问他，那你Day2为什么不能翻盘呢？\n\n&emsp;他笑着，却又有些郑重地说道：“水平不够啊。”\n\n&emsp;鉴于我的好奇，在重重追问下，他勉为其难地告诉我：“其实当时我就没想着翻盘，倒是心态也挺好，开场还是发现T2最可做，冷静分析一下发现可以直接上树剖线段树扫描线3个log的做法，当时我想到NOIP之后学DDP学到的一个叫做全局平衡二叉树的东西，那玩意儿可以把2个log的树剖优化成1个log，自己觉得没什么问题，就写完了，这写完还行，拿随机树测了一下，跑得飞快，又觉得不太靠谱，又拿链测，还是跑得飞快……这之后就普普通通地把T1和T3的暴力写了，似乎是会T3的多一些分的暴力，但毕竟不敢去写，T1又没有想到枚举非零元素消。但毕竟还是写了暴力。当时估分200，其实觉得自己不管怎么样都翻不了盘，出来也无所谓了。”\n\t\n&emsp;“只是后来出分之后发现自己第二题只有60……教练要来了程序自己测了一下，发现被卡常数了……其实也不是吧，毕竟全局平衡二叉树常数的确是挺大的，据说那个今年全国排名第四，最后被挤到第五无缘国家队的zzy也写了我这个做法，也T飞了。我当时只是奇怪为什么会T，后来我测了一下二叉树，发现的确跑得挺慢的。”\n\n&emsp;“不过，毕竟就算是200，也翻不了盘啊，就算我Day2是220分标准分，也还差好多分进省队啊。”\n\n&emsp;“那你怎么邀请赛也不去呀？”我问道。\n\n&emsp;“申不到啊，水平太低了。如果我day2没挂的话，可能有概率能申到吧……不过，我倒是无所谓了，毕竟后来打了NOI同步赛，大概是铜牌都没拿到，去现场爆蛋感觉总不如VP爆蛋来得不痛不痒。你应该知道的，今年NOI指导直接切了D1T3，进了集训队。有时候觉得吧，当时我和他的差距也才猴子和人一般，没想到现在我像那种毫无生命的无机物了。”\n\n&emsp;我看着他，心中略有些同情，听说他停了两年课，文化课已经爆蛋了，又没去过NOI，没进过省队，这种自招取消的年头，也不知道他将来流落街头的时候，有没有人会记得，曾经他也是一个拿过省一的竞赛生啊。","slug":"滚粗记/ZJOI2019赛后感","published":1,"date":"2021-08-28T13:02:40.629Z","updated":"2021-08-28T13:02:40.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvso3560022vfnu0dqn6ug2","content":"<p>本来想写些正经的游记，或许还能分析一下题目吧。</p><p>但毕竟发现自己高一的 OI 生涯已经结束了。</p><p>&lt; 大概是有点 <strong> 简略回忆录 </strong>，反正也没什么人会看就是了 &gt;</p><a id=\"more\"></a><p> 鉴于语文水平低下，这大概只是篇流水账罢了。</p><h4 id=\"按正论说回忆录得有个开头但哪些年代久远的沉浸在记忆里的也早融化了便也得不到个开头\"><a class=\"markdownIt-Anchor\" href=\"# 按正论说回忆录得有个开头但哪些年代久远的沉浸在记忆里的也早融化了便也得不到个开头\"></a> 按正论说回忆录得有个开头，但哪些年代久远的，沉浸在记忆里的也早融化了，便也得不到个开头。</h4><p>​\t他自诩为 emoairx，若要问他为何如此称呼，他大抵会说：“这是我曾经用时间当随机种子，随机出来的字符串，当时取了前 6 位 emoair，只是注册账号的时候发现已经有重复了，便加了一个 x”。或许他是想致敬 WJMZBMR，但他不配这么做——果然这应该叫做抄袭吗？</p><p> 学 OI 是在四年级，这不算晚，或许还算有些早，只是前些年都在浪，第一年学会了分支语句，第二年学会了循环语句。</p><p> 若是问他那时候他为什么学要 OI，他大抵会说：“那时候我玩 war3，玩 msdzls，玩 pvz，当时看着这些精美的游戏，总想着写一点外挂出来，把自己的血量无限，金币无限……也许还可以自己写一个游戏……我当时用仅有的知识写一些诸位看来可笑的游戏，像是猜数啊，石头剪刀布啊，但当时感觉自己很充实。”</p><p> 他说起那些有些，还有些苦笑，他说一开始是用 pascal 写的，界面不太美观，后来便自学了 VB，写了一些贪吃蛇，2048，俄罗斯方块之类的游戏。</p><p> 据他当时的设想，他打算把这些小游戏做一个闯关游戏集合，每一关都是一个小游戏，只是后来因为一些原因做了七八个之后就咕了。</p><p> 再说 OI 上，他其实六年级就知道有 NOIP 这个赛事，只是初一才报名。</p><p> 倒是报名了也没什么用途，他当年初赛恰好卡线，复赛第三题不知道乘法分配律，第四题不会贪心算法，而后来第三题又因为数组开太大，MLE 了，便拿了 240 分，当时普及二等线是 250，又没有三等奖，便愉快地毫无收获。</p><p> 那时候已经是初中了，他在他们县里一个还不错的初中上学，那时候和他一起学 OI 的人确实也有一些，当时他们学校有两个初一就一等的，一个是后来鼎鼎大名的周指导，还有一个是初中三年稳居年段第一的某陈姓同学——后来也便不知道了。</p><p> 初中的时候，他文化课似乎还不错，他有时候在中午去机房颓废，有时候周指导和陈同学也在，他便也会向他们请教一下文化课作业。若是问他怎么进的学校机房的，他大抵会说：“有时候是老师在，门便是开的，有时候老师不在，便撬窗，我们学校的窗户不太紧，一开始拿个笔就能撬开，时间长了直接用手往里面摁就能把窗户撬开了，然后让个人进去，把后门开了——前面是有锁的，是开不了的。到时候再锁上后门，从窗户里爬出来……”</p><p> 到了第二年联赛，他又卡线进了复赛，他很快做出了前两题，看第三题的时候要读入很多行数，他马上就发现直接开一个邻接矩阵来存是会超出内存限制的。他考场上想到了一个把所有数存在一个长度为 n 的数组里面，然后记录一下每一段是从数组的那个位置开始持续多少。当时他把这个称作“队列数组”。——事实上，这是一个 C++ 的 vector，或者链表就可以解决的简单问题。那题的第四题，他没有发现相同的数字答案是一样的，写了一个简单的暴力，又稍微优化了一下。那年第四题他过了样例，但获得了 0 分的成绩，似乎是有一个地方判错了。当年的分数线是 300 分，他也正好是 300，便卡线普及一等。</p><p> 那时候周指导和陈同学依旧吊打他，他也习以为常了。</p><p> 说 emoairx 同学倒也是有胆量，周指导和陈同学，以及同一个地区的徐同学打算初三参加提高组，emoairx 同学也凑了上去，打算转 C++，然后开始学提高组算法。说到那一年，emoairx 充满了怀念。</p><p> “我记得那时候我是真的很认真，学校里文化课作业很多，我常常要做到十二点，但我还是会挤出时间学 OI。我记得我花了好几天时间调出一道 splay 题，草稿纸上画满了平衡树。我记得有时候周指导，陈同学会和我一起探讨题目，东南的太阳光照在教室前的走廊上，照在指导的脸上，照在被我们涂画的草稿纸上。我记得学校运动会的时候，我们在机房里研究发现了排序加去重可以做到离散化——当时我们把它叫做哈希，并持续了许多时间。我记得陈同学教我树状数组，周指导教我线段树……有一段时间和 xza 一起做 CF……曾经还写过写 <a href=\"%5Bhttps://szoorz.github.io/2017/08/19/OI/Codeforces/%E9%A2%98%E8%A7%A3%EF%BC%9A2017%E6%9A%91%E5%81%87/codeforces2017%E6%9A%91%E5%81%87/%5D(https://szoorz.github.io/2017/08/19/OI/Codeforces/%E9%A2%98%E8%A7%A3%EF%BC%9A2017%E6%9A%91%E5%81%87/codeforces2017%E6%9A%91%E5%81%87/)\"> 博客 </a>。那时候做题真的有多认真自己都想不到。两年了呀……“</p><p> 我听着 emoairx 说，心中也挺有感触——毕竟，这是青春啊。</p><p> 17 年的联赛，emoairx 同学获得了 410 分，尽管他奋力挣扎最终失败。但他已经很满意了，他觉得这个分数已经对得起他的付出了。不出所料的，周指导，陈同学和徐同学都吊打了他。</p><p> 那之后，他想去徐同学想去的，当地有名的绍兴一中——这个名词还是他初二下才知道的，参加集训，绍一似乎乐于接受 emoairx 同学，emoairx 同学便随着周指导，陈同学，徐同学在绍一集训了一段时间。</p><p> 然而，因为一些奇怪的原因，于是 emoairx 同学又被赶回了学校，他当时有一些生无可恋，记得还因为被强制要求参加期末考试而咕掉了 pkuwc。</p><p> 那之后他参加了省选，其实当年他的水平完全被吊起来锤，他只是来旅游的。事实上一试他获得了全场最低分——0 分。</p><p> emoairx 同学后来还是去了绍兴一中，陈同学因为高超的文化课技巧选择了柯桥中学，似乎处于半退役状态，今年省选也没看到他人，周指导去了学车中学，这之后的事情大家都知道了，也不再提。当年我们三个一起游戏，一起奋斗如今分割三地，很少再联系了。</p><p> 到了高中，emoairx 同学渐渐地颓废了起来。他先后接触了动画片，galgame，小说……日渐沉迷，不复过去的努力。</p><p> 不出所料，今年的省选他退役啦。</p><p> 你若是问他，他今年省选怎么回事，他大抵会说：“我开场刚 T2，先写了一个 4 个状态存它和它祖先是否被访问到的 n^2 log n 的暴力，发现可以用矩阵乘法优化，时间复杂度是 n log n * 4^3 的，当时我想都没想，直接写了一发，发现本机要跑 9s，这时候差不多过去了两个多小时，于是他尝试卡常数，卡着卡着发现时间没多少了，直接去打 T1 暴力和 T3 暴力，结果暴力还打挂了，最后尝试把 T2 两个暴力拼一下，看一下第二个矩阵乘法能不能拿分，结果拼错了，最后没改成功就爆零了。出考场冷静了一下发现状态是可以做到 3 个的……”</p><p> 但这毕竟是他的一番说辞，说到底就是他太弱了，他太颓了。</p><p> 以上内容——2019.3.7</p><p> 后来我又问他，那你 Day2 为什么不能翻盘呢？</p><p> 他笑着，却又有些郑重地说道：“水平不够啊。”</p><p> 鉴于我的好奇，在重重追问下，他勉为其难地告诉我：“其实当时我就没想着翻盘，倒是心态也挺好，开场还是发现 T2 最可做，冷静分析一下发现可以直接上树剖线段树扫描线 3 个 log 的做法，当时我想到 NOIP 之后学 DDP 学到的一个叫做全局平衡二叉树的东西，那玩意儿可以把 2 个 log 的树剖优化成 1 个 log，自己觉得没什么问题，就写完了，这写完还行，拿随机树测了一下，跑得飞快，又觉得不太靠谱，又拿链测，还是跑得飞快……这之后就普普通通地把 T1 和 T3 的暴力写了，似乎是会 T3 的多一些分的暴力，但毕竟不敢去写，T1 又没有想到枚举非零元素消。但毕竟还是写了暴力。当时估分 200，其实觉得自己不管怎么样都翻不了盘，出来也无所谓了。”</p><p> “只是后来出分之后发现自己第二题只有 60……教练要来了程序自己测了一下，发现被卡常数了……其实也不是吧，毕竟全局平衡二叉树常数的确是挺大的，据说那个今年全国排名第四，最后被挤到第五无缘国家队的 zzy 也写了我这个做法，也 T 飞了。我当时只是奇怪为什么会 T，后来我测了一下二叉树，发现的确跑得挺慢的。”</p><p> “不过，毕竟就算是 200，也翻不了盘啊，就算我 Day2 是 220 分标准分，也还差好多分进省队啊。”</p><p> “那你怎么邀请赛也不去呀？”我问道。</p><p> “申不到啊，水平太低了。如果我 day2 没挂的话，可能有概率能申到吧……不过，我倒是无所谓了，毕竟后来打了 NOI 同步赛，大概是铜牌都没拿到，去现场爆蛋感觉总不如 VP 爆蛋来得不痛不痒。你应该知道的，今年 NOI 指导直接切了 D1T3，进了集训队。有时候觉得吧，当时我和他的差距也才猴子和人一般，没想到现在我像那种毫无生命的无机物了。”</p><p> 我看着他，心中略有些同情，听说他停了两年课，文化课已经爆蛋了，又没去过 NOI，没进过省队，这种自招取消的年头，也不知道他将来流落街头的时候，有没有人会记得，曾经他也是一个拿过省一的竞赛生啊。</p>","site":{"data":{}},"excerpt":"<p>本来想写些正经的游记，或许还能分析一下题目吧。</p><p>但毕竟发现自己高一的OI生涯已经结束了。</p><p>&lt;大概是有点<strong>简略回忆录</strong>，反正也没什么人会看就是了&gt;</p>","more":"<p>鉴于语文水平低下，这大概只是篇流水账罢了。</p><h4 id=\"按正论说回忆录得有个开头但哪些年代久远的沉浸在记忆里的也早融化了便也得不到个开头\"><a class=\"markdownIt-Anchor\" href=\"#按正论说回忆录得有个开头但哪些年代久远的沉浸在记忆里的也早融化了便也得不到个开头\"></a> 按正论说回忆录得有个开头，但哪些年代久远的，沉浸在记忆里的也早融化了，便也得不到个开头。</h4><p>​\t他自诩为emoairx，若要问他为何如此称呼，他大抵会说：“这是我曾经用时间当随机种子，随机出来的字符串，当时取了前6位emoair，只是注册账号的时候发现已经有重复了，便加了一个x”。或许他是想致敬WJMZBMR，但他不配这么做——果然这应该叫做抄袭吗？</p><p> 学OI是在四年级，这不算晚，或许还算有些早，只是前些年都在浪，第一年学会了分支语句，第二年学会了循环语句。</p><p> 若是问他那时候他为什么学要OI，他大抵会说：“那时候我玩war3，玩msdzls，玩pvz，当时看着这些精美的游戏，总想着写一点外挂出来，把自己的血量无限，金币无限……也许还可以自己写一个游戏……我当时用仅有的知识写一些诸位看来可笑的游戏，像是猜数啊，石头剪刀布啊，但当时感觉自己很充实。”</p><p> 他说起那些有些，还有些苦笑，他说一开始是用pascal写的，界面不太美观，后来便自学了VB，写了一些贪吃蛇，2048，俄罗斯方块之类的游戏。</p><p> 据他当时的设想，他打算把这些小游戏做一个闯关游戏集合，每一关都是一个小游戏，只是后来因为一些原因做了七八个之后就咕了。</p><p> 再说OI上，他其实六年级就知道有NOIP这个赛事，只是初一才报名。</p><p> 倒是报名了也没什么用途，他当年初赛恰好卡线，复赛第三题不知道乘法分配律，第四题不会贪心算法，而后来第三题又因为数组开太大，MLE了，便拿了240分，当时普及二等线是250，又没有三等奖，便愉快地毫无收获。</p><p> 那时候已经是初中了，他在他们县里一个还不错的初中上学，那时候和他一起学OI的人确实也有一些，当时他们学校有两个初一就一等的，一个是后来鼎鼎大名的周指导，还有一个是初中三年稳居年段第一的某陈姓同学——后来也便不知道了。</p><p> 初中的时候，他文化课似乎还不错，他有时候在中午去机房颓废，有时候周指导和陈同学也在，他便也会向他们请教一下文化课作业。若是问他怎么进的学校机房的，他大抵会说：“有时候是老师在，门便是开的，有时候老师不在，便撬窗，我们学校的窗户不太紧，一开始拿个笔就能撬开，时间长了直接用手往里面摁就能把窗户撬开了，然后让个人进去，把后门开了——前面是有锁的，是开不了的。到时候再锁上后门，从窗户里爬出来……”</p><p> 到了第二年联赛，他又卡线进了复赛，他很快做出了前两题，看第三题的时候要读入很多行数，他马上就发现直接开一个邻接矩阵来存是会超出内存限制的。他考场上想到了一个把所有数存在一个长度为n的数组里面，然后记录一下每一段是从数组的那个位置开始持续多少。当时他把这个称作“队列数组”。——事实上，这是一个C++的vector，或者链表就可以解决的简单问题。那题的第四题，他没有发现相同的数字答案是一样的，写了一个简单的暴力，又稍微优化了一下。那年第四题他过了样例，但获得了0分的成绩，似乎是有一个地方判错了。当年的分数线是300分，他也正好是300，便卡线普及一等。</p><p> 那时候周指导和陈同学依旧吊打他，他也习以为常了。</p><p> 说emoairx同学倒也是有胆量，周指导和陈同学，以及同一个地区的徐同学打算初三参加提高组，emoairx同学也凑了上去，打算转C++，然后开始学提高组算法。说到那一年，emoairx充满了怀念。</p><p> “我记得那时候我是真的很认真，学校里文化课作业很多，我常常要做到十二点，但我还是会挤出时间学OI。我记得我花了好几天时间调出一道splay题，草稿纸上画满了平衡树。我记得有时候周指导，陈同学会和我一起探讨题目，东南的太阳光照在教室前的走廊上，照在指导的脸上，照在被我们涂画的草稿纸上。我记得学校运动会的时候，我们在机房里研究发现了排序加去重可以做到离散化——当时我们把它叫做哈希，并持续了许多时间。我记得陈同学教我树状数组，周指导教我线段树……有一段时间和xza一起做CF……曾经还写过写<a href=\"%5Bhttps://szoorz.github.io/2017/08/19/OI/Codeforces/%E9%A2%98%E8%A7%A3%EF%BC%9A2017%E6%9A%91%E5%81%87/codeforces2017%E6%9A%91%E5%81%87/%5D(https://szoorz.github.io/2017/08/19/OI/Codeforces/%E9%A2%98%E8%A7%A3%EF%BC%9A2017%E6%9A%91%E5%81%87/codeforces2017%E6%9A%91%E5%81%87/)\">博客</a>。那时候做题真的有多认真自己都想不到。两年了呀……“</p><p> 我听着emoairx说，心中也挺有感触——毕竟，这是青春啊。</p><p> 17年的联赛，emoairx同学获得了410分，尽管他奋力挣扎最终失败。但他已经很满意了，他觉得这个分数已经对得起他的付出了。不出所料的，周指导，陈同学和徐同学都吊打了他。</p><p> 那之后，他想去徐同学想去的，当地有名的绍兴一中——这个名词还是他初二下才知道的，参加集训，绍一似乎乐于接受emoairx同学，emoairx同学便随着周指导，陈同学，徐同学在绍一集训了一段时间。</p><p> 然而，因为一些奇怪的原因，于是emoairx同学又被赶回了学校，他当时有一些生无可恋，记得还因为被强制要求参加期末考试而咕掉了pkuwc。</p><p> 那之后他参加了省选，其实当年他的水平完全被吊起来锤，他只是来旅游的。事实上一试他获得了全场最低分——0分。</p><p> emoairx同学后来还是去了绍兴一中，陈同学因为高超的文化课技巧选择了柯桥中学，似乎处于半退役状态，今年省选也没看到他人，周指导去了学车中学，这之后的事情大家都知道了，也不再提。当年我们三个一起游戏，一起奋斗如今分割三地，很少再联系了。</p><p> 到了高中，emoairx同学渐渐地颓废了起来。他先后接触了动画片，galgame，小说……日渐沉迷，不复过去的努力。</p><p> 不出所料，今年的省选他退役啦。</p><p> 你若是问他，他今年省选怎么回事，他大抵会说：“我开场刚T2，先写了一个4个状态存它和它祖先是否被访问到的n^2 log n的暴力，发现可以用矩阵乘法优化，时间复杂度是n log n * 4^3的，当时我想都没想，直接写了一发，发现本机要跑9s，这时候差不多过去了两个多小时，于是他尝试卡常数，卡着卡着发现时间没多少了，直接去打T1暴力和T3暴力，结果暴力还打挂了，最后尝试把T2两个暴力拼一下，看一下第二个矩阵乘法能不能拿分，结果拼错了，最后没改成功就爆零了。出考场冷静了一下发现状态是可以做到3个的……”</p><p> 但这毕竟是他的一番说辞，说到底就是他太弱了，他太颓了。</p><p>以上内容——2019.3.7</p><p> 后来我又问他，那你Day2为什么不能翻盘呢？</p><p> 他笑着，却又有些郑重地说道：“水平不够啊。”</p><p> 鉴于我的好奇，在重重追问下，他勉为其难地告诉我：“其实当时我就没想着翻盘，倒是心态也挺好，开场还是发现T2最可做，冷静分析一下发现可以直接上树剖线段树扫描线3个log的做法，当时我想到NOIP之后学DDP学到的一个叫做全局平衡二叉树的东西，那玩意儿可以把2个log的树剖优化成1个log，自己觉得没什么问题，就写完了，这写完还行，拿随机树测了一下，跑得飞快，又觉得不太靠谱，又拿链测，还是跑得飞快……这之后就普普通通地把T1和T3的暴力写了，似乎是会T3的多一些分的暴力，但毕竟不敢去写，T1又没有想到枚举非零元素消。但毕竟还是写了暴力。当时估分200，其实觉得自己不管怎么样都翻不了盘，出来也无所谓了。”</p><p> “只是后来出分之后发现自己第二题只有60……教练要来了程序自己测了一下，发现被卡常数了……其实也不是吧，毕竟全局平衡二叉树常数的确是挺大的，据说那个今年全国排名第四，最后被挤到第五无缘国家队的zzy也写了我这个做法，也T飞了。我当时只是奇怪为什么会T，后来我测了一下二叉树，发现的确跑得挺慢的。”</p><p> “不过，毕竟就算是200，也翻不了盘啊，就算我Day2是220分标准分，也还差好多分进省队啊。”</p><p> “那你怎么邀请赛也不去呀？”我问道。</p><p> “申不到啊，水平太低了。如果我day2没挂的话，可能有概率能申到吧……不过，我倒是无所谓了，毕竟后来打了NOI同步赛，大概是铜牌都没拿到，去现场爆蛋感觉总不如VP爆蛋来得不痛不痒。你应该知道的，今年NOI指导直接切了D1T3，进了集训队。有时候觉得吧，当时我和他的差距也才猴子和人一般，没想到现在我像那种毫无生命的无机物了。”</p><p> 我看着他，心中略有些同情，听说他停了两年课，文化课已经爆蛋了，又没去过NOI，没进过省队，这种自招取消的年头，也不知道他将来流落街头的时候，有没有人会记得，曾经他也是一个拿过省一的竞赛生啊。</p>"},{"title":"8 月 10 日随笔一则","top":true,"description":"加密","password":"password","_content":"\n​\t\t呐，我是应该羡慕我自己的吧……\n\n<!--more-->\n\n​\t\t时光的齿轮转动到一个黄昏，那个下着淅淅沥沥的细雨的黄昏。\n​\t\t我静静地看着教室里仅有的两个男孩。一个胖，一个瘦，但都很健康。\n​\t\t胖一些的男孩正在整理书包，他把桌子里的书一本一本地插入书包里，瘦一些的男孩在等着他，一起出校门。\n​\t\t我们不妨把那个胖的男孩称作詹姆，将那个瘦的男孩称作安迪。\n​\t\t安迪静静地看着詹姆，就像历史之外的我静静地看着他们。\n​\t\t“我想今年拿个联赛一等吧。”安迪突然开口，声音不算大，但也能覆盖住詹姆理书的声音。\n​\t\t“我想今年拿个联赛一等吧。”我在一旁轻声念到，嘴角微微上扬。安迪的话我不觉得尴尬，不觉得突兀，他的开口和之前的沉默是那么协调，浑然一体。\n​\t\t我笑着，继续拨动着齿轮，错过了詹姆之后的那句\"我觉得不太可能\"。\n\n​\t\t从我家往前步行五百米，走到的是我们县里最好的高中之一。\n​\t\t我父母在旧址念过高中，那里记录着他们的青春，记录他们的过去，以及，差点就能考上大学的遗憾。\n​\t\t我初中的马路对面，是我们县里最早的高中。\n​\t\t我爷爷在旧址念过初中，当时村里就他一个读过书，算是文化人——那时村里还都吃得饱饭。\n​\t\t这是同一所高中。我有幸在回忆里找到了两年前这所学校的校长。\n​\t\t“保证你能上清北”\n​\t\t这是当时校长对当时的我的成绩的一种肯定。\n​\t\t“我想至少能去国赛”\n​\t\t这是当时的我说过的一句话。\n​\t\t“哪怕是D类”这是当时的我心中所想的，但并没有说出来，于是那个藏在阴影里的观察者补充着。\n​\t\t我羡慕当时的我，羡慕那种真实，羡慕那种纯粹，不去管什么未来的利益得失，只是心中所想，坚持所为。\n​\t\t若一去不回，便一去不回。\n\n​\t\t“你还是再报一年普及比较好吧。他们是已经拿过两次了一等了，不能和他们去比的。”\n​\t\t“我还是想报提高。”\n​\t\t“那好吧。”\n​\t\t那时候的我对竞赛其实也算是一无所知，最多知道有这么一个联赛。\n​\t\t我不知道竞赛能加分，不知道竞赛能保送，不知道竞赛能走自招，我只是想学，因为真的很有趣。\n​\t\t我羡慕当时的我，那种无所顾虑的自在——可以没有半丝功利。\n\n​\t\t詹姆的双手都竖着大拇指，另一端快速地敲打着自己的大腿。\n​\t\t詹姆突然停住敲打，任由两只拇指竖着，却听到一声“adokei”从安迪口中发出。\n​\t\t“啊，又输了。”\n​\t\t平淡的话语，平凡的动作，也没有被时光遗忘。\n\n​\t\t“我想明年拿金牌”\n​\t\t“是说省赛吗？好的。”\n​\t\t“……”\n​\t\t那是一年零两个月前，我是没有机会去NOI的，D类也没有。\n那些能去NOI的巨佬，算是我仰慕的对象，我想和他们一起训练，和班主任申请停课……虽然最后还是没停。\n我不知道现在的我有没有这种勇气再把这句话说一遍。\n这确实是一种勇气，说这句话的时候，可以骄傲，可以自豪。\n那是中二的年纪啊……\n\n​\t\t如果学文化课，我大概能混个银牌，凭借文化课，裸分考个985应该没问题。\n​\t\t如果停课搞OI的话，大概率还是没Au，但文化课落下，211能不能考上都是个问题。\n​\t\t哎……我是什么时候开始忘记我的初心的呢？\n​\t\t“我想今年拿个联赛一等吧。”\n​\t\t“我想至少能去国赛……”\n​\t\t“我想明年拿金牌……”\n​\t\t我的……初心……\n​\t\t那还管他什么呢，大不了没学上嘛。\n\n​\t\t呐，我是应该羡慕我自己的吧……\n​\t\t马上十八岁了呢。\n​\t\t我给自己留下了，无与伦比的回忆啊。\n\n​\t\t**NOI2020 bless all**","source":"_posts/随笔/pre_noi2020.md","raw":"---\ntitle: 8月10日随笔一则\ntags:\n - 随笔\ntop: true\ndescription: 加密\npassword: password\n---\n\n​\t\t呐，我是应该羡慕我自己的吧……\n\n<!--more-->\n\n​\t\t时光的齿轮转动到一个黄昏，那个下着淅淅沥沥的细雨的黄昏。\n​\t\t我静静地看着教室里仅有的两个男孩。一个胖，一个瘦，但都很健康。\n​\t\t胖一些的男孩正在整理书包，他把桌子里的书一本一本地插入书包里，瘦一些的男孩在等着他，一起出校门。\n​\t\t我们不妨把那个胖的男孩称作詹姆，将那个瘦的男孩称作安迪。\n​\t\t安迪静静地看着詹姆，就像历史之外的我静静地看着他们。\n​\t\t“我想今年拿个联赛一等吧。”安迪突然开口，声音不算大，但也能覆盖住詹姆理书的声音。\n​\t\t“我想今年拿个联赛一等吧。”我在一旁轻声念到，嘴角微微上扬。安迪的话我不觉得尴尬，不觉得突兀，他的开口和之前的沉默是那么协调，浑然一体。\n​\t\t我笑着，继续拨动着齿轮，错过了詹姆之后的那句\"我觉得不太可能\"。\n\n​\t\t从我家往前步行五百米，走到的是我们县里最好的高中之一。\n​\t\t我父母在旧址念过高中，那里记录着他们的青春，记录他们的过去，以及，差点就能考上大学的遗憾。\n​\t\t我初中的马路对面，是我们县里最早的高中。\n​\t\t我爷爷在旧址念过初中，当时村里就他一个读过书，算是文化人——那时村里还都吃得饱饭。\n​\t\t这是同一所高中。我有幸在回忆里找到了两年前这所学校的校长。\n​\t\t“保证你能上清北”\n​\t\t这是当时校长对当时的我的成绩的一种肯定。\n​\t\t“我想至少能去国赛”\n​\t\t这是当时的我说过的一句话。\n​\t\t“哪怕是D类”这是当时的我心中所想的，但并没有说出来，于是那个藏在阴影里的观察者补充着。\n​\t\t我羡慕当时的我，羡慕那种真实，羡慕那种纯粹，不去管什么未来的利益得失，只是心中所想，坚持所为。\n​\t\t若一去不回，便一去不回。\n\n​\t\t“你还是再报一年普及比较好吧。他们是已经拿过两次了一等了，不能和他们去比的。”\n​\t\t“我还是想报提高。”\n​\t\t“那好吧。”\n​\t\t那时候的我对竞赛其实也算是一无所知，最多知道有这么一个联赛。\n​\t\t我不知道竞赛能加分，不知道竞赛能保送，不知道竞赛能走自招，我只是想学，因为真的很有趣。\n​\t\t我羡慕当时的我，那种无所顾虑的自在——可以没有半丝功利。\n\n​\t\t詹姆的双手都竖着大拇指，另一端快速地敲打着自己的大腿。\n​\t\t詹姆突然停住敲打，任由两只拇指竖着，却听到一声“adokei”从安迪口中发出。\n​\t\t“啊，又输了。”\n​\t\t平淡的话语，平凡的动作，也没有被时光遗忘。\n\n​\t\t“我想明年拿金牌”\n​\t\t“是说省赛吗？好的。”\n​\t\t“……”\n​\t\t那是一年零两个月前，我是没有机会去NOI的，D类也没有。\n那些能去NOI的巨佬，算是我仰慕的对象，我想和他们一起训练，和班主任申请停课……虽然最后还是没停。\n我不知道现在的我有没有这种勇气再把这句话说一遍。\n这确实是一种勇气，说这句话的时候，可以骄傲，可以自豪。\n那是中二的年纪啊……\n\n​\t\t如果学文化课，我大概能混个银牌，凭借文化课，裸分考个985应该没问题。\n​\t\t如果停课搞OI的话，大概率还是没Au，但文化课落下，211能不能考上都是个问题。\n​\t\t哎……我是什么时候开始忘记我的初心的呢？\n​\t\t“我想今年拿个联赛一等吧。”\n​\t\t“我想至少能去国赛……”\n​\t\t“我想明年拿金牌……”\n​\t\t我的……初心……\n​\t\t那还管他什么呢，大不了没学上嘛。\n\n​\t\t呐，我是应该羡慕我自己的吧……\n​\t\t马上十八岁了呢。\n​\t\t我给自己留下了，无与伦比的回忆啊。\n\n​\t\t**NOI2020 bless all**","slug":"随笔/pre_noi2020","published":1,"date":"2021-08-28T13:02:40.632Z","updated":"2021-08-28T13:02:40.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvso3570024vfnu1e01eg9p","content":"<p>​ 呐，我是应该羡慕我自己的吧……</p><a id=\"more\"></a><p>​ 时光的齿轮转动到一个黄昏，那个下着淅淅沥沥的细雨的黄昏。<br>​ 我静静地看着教室里仅有的两个男孩。一个胖，一个瘦，但都很健康。<br>​ 胖一些的男孩正在整理书包，他把桌子里的书一本一本地插入书包里，瘦一些的男孩在等着他，一起出校门。<br>​ 我们不妨把那个胖的男孩称作詹姆，将那个瘦的男孩称作安迪。<br>​ 安迪静静地看着詹姆，就像历史之外的我静静地看着他们。<br>​ “我想今年拿个联赛一等吧。”安迪突然开口，声音不算大，但也能覆盖住詹姆理书的声音。<br>​ “我想今年拿个联赛一等吧。”我在一旁轻声念到，嘴角微微上扬。安迪的话我不觉得尴尬，不觉得突兀，他的开口和之前的沉默是那么协调，浑然一体。<br>​ 我笑着，继续拨动着齿轮，错过了詹姆之后的那句 &quot; 我觉得不太可能 &quot;。</p><p>​ 从我家往前步行五百米，走到的是我们县里最好的高中之一。<br>​ 我父母在旧址念过高中，那里记录着他们的青春，记录他们的过去，以及，差点就能考上大学的遗憾。<br>​ 我初中的马路对面，是我们县里最早的高中。<br>​ 我爷爷在旧址念过初中，当时村里就他一个读过书，算是文化人——那时村里还都吃得饱饭。<br>​ 这是同一所高中。我有幸在回忆里找到了两年前这所学校的校长。<br>​ “保证你能上清北”<br>​ 这是当时校长对当时的我的成绩的一种肯定。<br>​ “我想至少能去国赛”<br>​ 这是当时的我说过的一句话。<br>​ “哪怕是 D 类”这是当时的我心中所想的，但并没有说出来，于是那个藏在阴影里的观察者补充着。<br>​ 我羡慕当时的我，羡慕那种真实，羡慕那种纯粹，不去管什么未来的利益得失，只是心中所想，坚持所为。<br>​ 若一去不回，便一去不回。</p><p>​ “你还是再报一年普及比较好吧。他们是已经拿过两次了一等了，不能和他们去比的。”<br>​ “我还是想报提高。”<br>​ “那好吧。”<br>​ 那时候的我对竞赛其实也算是一无所知，最多知道有这么一个联赛。<br>​ 我不知道竞赛能加分，不知道竞赛能保送，不知道竞赛能走自招，我只是想学，因为真的很有趣。<br>​ 我羡慕当时的我，那种无所顾虑的自在——可以没有半丝功利。</p><p>​ 詹姆的双手都竖着大拇指，另一端快速地敲打着自己的大腿。<br>​ 詹姆突然停住敲打，任由两只拇指竖着，却听到一声“adokei”从安迪口中发出。<br>​ “啊，又输了。”<br>​ 平淡的话语，平凡的动作，也没有被时光遗忘。</p><p>​ “我想明年拿金牌”<br>​ “是说省赛吗？好的。”<br>​ “……”<br>​ 那是一年零两个月前，我是没有机会去 NOI 的，D 类也没有。<br> 那些能去 NOI 的巨佬，算是我仰慕的对象，我想和他们一起训练，和班主任申请停课……虽然最后还是没停。<br> 我不知道现在的我有没有这种勇气再把这句话说一遍。<br> 这确实是一种勇气，说这句话的时候，可以骄傲，可以自豪。<br> 那是中二的年纪啊……</p><p>​ 如果学文化课，我大概能混个银牌，凭借文化课，裸分考个 985 应该没问题。<br>​ 如果停课搞 OI 的话，大概率还是没 Au，但文化课落下，211 能不能考上都是个问题。<br>​ 哎……我是什么时候开始忘记我的初心的呢？<br>​ “我想今年拿个联赛一等吧。”<br>​ “我想至少能去国赛……”<br>​ “我想明年拿金牌……”<br>​ 我的……初心……<br>​ 那还管他什么呢，大不了没学上嘛。</p><p>​ 呐，我是应该羡慕我自己的吧……<br>​ 马上十八岁了呢。<br>​ 我给自己留下了，无与伦比的回忆啊。</p><p>​ <strong>NOI2020 bless all</strong></p>","site":{"data":{}},"excerpt":"<p>​ 呐，我是应该羡慕我自己的吧……</p>","more":"<p>​ 时光的齿轮转动到一个黄昏，那个下着淅淅沥沥的细雨的黄昏。<br>​ 我静静地看着教室里仅有的两个男孩。一个胖，一个瘦，但都很健康。<br>​ 胖一些的男孩正在整理书包，他把桌子里的书一本一本地插入书包里，瘦一些的男孩在等着他，一起出校门。<br>​ 我们不妨把那个胖的男孩称作詹姆，将那个瘦的男孩称作安迪。<br>​ 安迪静静地看着詹姆，就像历史之外的我静静地看着他们。<br>​ “我想今年拿个联赛一等吧。”安迪突然开口，声音不算大，但也能覆盖住詹姆理书的声音。<br>​ “我想今年拿个联赛一等吧。”我在一旁轻声念到，嘴角微微上扬。安迪的话我不觉得尴尬，不觉得突兀，他的开口和之前的沉默是那么协调，浑然一体。<br>​ 我笑着，继续拨动着齿轮，错过了詹姆之后的那句&quot;我觉得不太可能&quot;。</p><p>​ 从我家往前步行五百米，走到的是我们县里最好的高中之一。<br>​ 我父母在旧址念过高中，那里记录着他们的青春，记录他们的过去，以及，差点就能考上大学的遗憾。<br>​ 我初中的马路对面，是我们县里最早的高中。<br>​ 我爷爷在旧址念过初中，当时村里就他一个读过书，算是文化人——那时村里还都吃得饱饭。<br>​ 这是同一所高中。我有幸在回忆里找到了两年前这所学校的校长。<br>​ “保证你能上清北”<br>​ 这是当时校长对当时的我的成绩的一种肯定。<br>​ “我想至少能去国赛”<br>​ 这是当时的我说过的一句话。<br>​ “哪怕是D类”这是当时的我心中所想的，但并没有说出来，于是那个藏在阴影里的观察者补充着。<br>​ 我羡慕当时的我，羡慕那种真实，羡慕那种纯粹，不去管什么未来的利益得失，只是心中所想，坚持所为。<br>​ 若一去不回，便一去不回。</p><p>​ “你还是再报一年普及比较好吧。他们是已经拿过两次了一等了，不能和他们去比的。”<br>​ “我还是想报提高。”<br>​ “那好吧。”<br>​ 那时候的我对竞赛其实也算是一无所知，最多知道有这么一个联赛。<br>​ 我不知道竞赛能加分，不知道竞赛能保送，不知道竞赛能走自招，我只是想学，因为真的很有趣。<br>​ 我羡慕当时的我，那种无所顾虑的自在——可以没有半丝功利。</p><p>​ 詹姆的双手都竖着大拇指，另一端快速地敲打着自己的大腿。<br>​ 詹姆突然停住敲打，任由两只拇指竖着，却听到一声“adokei”从安迪口中发出。<br>​ “啊，又输了。”<br>​ 平淡的话语，平凡的动作，也没有被时光遗忘。</p><p>​ “我想明年拿金牌”<br>​ “是说省赛吗？好的。”<br>​ “……”<br>​ 那是一年零两个月前，我是没有机会去NOI的，D类也没有。<br>那些能去NOI的巨佬，算是我仰慕的对象，我想和他们一起训练，和班主任申请停课……虽然最后还是没停。<br>我不知道现在的我有没有这种勇气再把这句话说一遍。<br>这确实是一种勇气，说这句话的时候，可以骄傲，可以自豪。<br>那是中二的年纪啊……</p><p>​ 如果学文化课，我大概能混个银牌，凭借文化课，裸分考个985应该没问题。<br>​ 如果停课搞OI的话，大概率还是没Au，但文化课落下，211能不能考上都是个问题。<br>​ 哎……我是什么时候开始忘记我的初心的呢？<br>​ “我想今年拿个联赛一等吧。”<br>​ “我想至少能去国赛……”<br>​ “我想明年拿金牌……”<br>​ 我的……初心……<br>​ 那还管他什么呢，大不了没学上嘛。</p><p>​ 呐，我是应该羡慕我自己的吧……<br>​ 马上十八岁了呢。<br>​ 我给自己留下了，无与伦比的回忆啊。</p><p>​ <strong>NOI2020 bless all</strong></p>"},{"title":"ZJOI2020 游记 && 一些感想","_content":"\n\n\n`2012·7-> 2020·6`\n\n<!--more-->\n\n​\t这一年`2019.7->2020.6`过得真的算是浑浑噩噩。说我在学文化课吧，成绩一直都在中等，大概是一本线上下的样子，英语还是年段倒数。说还在搞OI吧，OI水平倒只有一直在退步。\n\n​\t嗯，还有半年就高考了，还是得好好努力的吧。\n\n​\t其实真要说起来，这一年大概有好多好多时间浪费在一次又一次的思考人生中。其实思考人生倒也不是说无用，不但可以提升语文作文中的思辨能力，还能消磨青春，荒度日月……但毕竟，至少我依靠贫瘠的大脑，思索出一个自相矛盾的结论：“思考人生实在是不值得。“\n\n​\t也许以前我自己感受不到，但是我过去的确是无意识地自命不凡的，我捉摸大部分人或许都这么想过，而且和我一样也只是停留在幻想中。譬如说初三之后，我想，我将来或许能成为陈立杰那样的人吧，陈立杰初三联赛也炸了，我也炸了。高一之后，我想，我或许能成为周雨扬那样的人吧，周雨扬高一省选也炸了，我也炸了。只是这种停留在低层次的自娱自乐，终究只能是一种麻药，当药劲过去，回顾之前飘飘欲仙的幻想，自怨自艾一番，然后偶尔望向迷雾覆盖的未来地狱的道路，不自觉的向前走去。\n\n​\t我有很多梦想，准确一点，是有很多不切实际的毫无意义的瞎几把乱想。而且这次省选之后，仅存的不是那么夸张的瞎想几乎都湮灭了吧。\n\n我不知道我未来是否真的能够活在尚且光明的幻光中，但现在，姑且留下一些为oier学弟一些可能不切实际的建议吧，但只是出于自己主观上的臆想。\n\n1、注意舒缓压力。\n\n$ \\color{white}{……如果真心理压力太大，大概会……心痛……呼吸不畅……而且心态不好，容易造成诸如“我自闭了，我被T2续了三个半个小时，心态炸了”的惊世骇俗的言论。我高一的时候曾有一段时间，反正因为某个原因，压力比较大……然后就会动不动心痛，所谓的心痛指的是感觉心脏突然抽搐一下……然后还有呼吸不畅，就是深呼吸到一半突然就没气了，所以也算呼吸短促……那段时间真的是身体上的难受，想要去呼吸新鲜的空气，哪怕颓废都无法缓解。但好像……如果假定自己本来就是个浑浑噩噩的傻逼，好像就会好一点？\\\\\t虽然以上的确是现身说法，你也尽可以不信，可以不看，因为我也不知道如果才能保持一个好的心态。}$\n\n2、正确颓废\n\n$ \\color{white}{倒也不是不能颓废，至少颓废能帮助缓解心理压力？\\\\ 而且很遗憾，我真的不知道如何遏制颓废的欲望，但还是写一点可能有用的建议吧。\\\\ 首先，如果是该学习的时间，不要颓废。 \\\\ 然后，相比于颓废，可以尝试读一些书，可以是历史的，可以是科普的，至少这些东西的趣味性不算太差，不至于让人觉得和干正事一样难受。}$\n\n3、不要太`fake`\n\n……\n\n哎，毕竟没有什么人生阅历，连大道理都讲不出来。\n\n\n\n姑且说说这次ZJOI吧\n\nDay1和去年Day1很像\n\n\n\n​\t开场看到T1，发现是 `runs` 题，第一眼看出了 `60pts` 的暴力，感觉是类似 `串串划分`，`优秀的拆分`，但是太久没做题已经忘记怎么做的了，就先打算试一试 `60pts` 的暴力，尝试写了一波暴力 $lcp$ ，发现样例死活过不去。\n\n​\t然后……发现自己题目看错了，题目还有去重的要求，想了好久发现不太会处理，就先不管T1了。\n\n​\t看到T2之后，显然可以发现每个点是独立的，于是问题变成求每个点的贡献。通过简单的式子推一推，容易发现就是一个矩阵快速幂，和去年的Day1T2做法几乎没变。\n\n​\t我还记得我去年省选T2，也想到了几乎一样的做法，只是当时的我太 $naive$ ， 把祖先有无，当前点有无用了整整四个状态压缩，（事实上当前点有，无论祖先有无都是没必要的），然后去年省选就因此爆蛋。\n\n​\tT3想了很久费用流，发现并不会，又跑回去看T1。\n\n​\tT1加了个二位数点，勉强过了样例，又花了半个多小时把许久未写的SA敲了一遍，才大概搞到60，然后开始想`T=1` 的做法，主要是 `T=1` 给人一种只需要看每个SA缩起来的联通块中是否存在，也就是判断存在性，以为会好做。结果还是做了一年没做出来。\n\n​\t最后半个小时，把 T3 的 `30pts` 暴力写了一下。\n\n​\t尝试优化 T3 ，搞了好久没搞出来（我以为要找什么性质）， 就弃疗了。\n\n\n\nDay2和前年Day2很像\n\n​\tT1题目太长太长了，就先略去了，然后做T2。\n\n​\t想了一下 `min_max` 容斥，直接容斥似乎就有 `50pts` ，我发现我的 dp 状态大概可以用前缀和优化一下，就直接加了个前缀和优化。$\\color{red}{赛后听说大部分人都是n^2/k，就我是满的n^2……}$\n\n​\t然后开始了长长的自闭生涯。\n\n​\t最后勉为其难地写了若干傻逼暴力分。\n\n\n\n估分大概60+100+30+15+70+10\n\n……\n\n实际得分：60+100+0+10+70+10，好像卡线进队了？\n\n\n\n……\n\n一点小小的反思：\n\n​\t1、我day1T3不应该挂啊，不可能挂啊，不能挂啊，挂分真的难受。\n\n​\t2、Day2T1考场上一直不会树的分，最后去写链的暴力，但后来冷静分析一下，其实链就是树的特殊情况，如果做链之后再去类比一下树可能能搞出来。\n\n \t3、由于一段时间的生疏，一些基础算法（如 `SA` ）写了较长时间，不应该不应该。\n\n \t4、艹我这个傻逼就应该早点退役，智商不够搞什么竞赛。\n\n\n\n>取胜不是这游戏的目的\n>\n>无心插柳柳成荫才是美丽\n>\n>有哪种美好会来自于刻意\n>\n>这一生波澜壮阔或是不惊都没问题\n>\n>只愿你能够拥抱那种美丽","source":"_posts/滚粗记/ZJOI2020退役录.md","raw":"---\ntitle: ZJOI2020游记&&一些感想\ntags:\n - 游记\n---\n\n\n\n`2012·7-> 2020·6`\n\n<!--more-->\n\n​\t这一年`2019.7->2020.6`过得真的算是浑浑噩噩。说我在学文化课吧，成绩一直都在中等，大概是一本线上下的样子，英语还是年段倒数。说还在搞OI吧，OI水平倒只有一直在退步。\n\n​\t嗯，还有半年就高考了，还是得好好努力的吧。\n\n​\t其实真要说起来，这一年大概有好多好多时间浪费在一次又一次的思考人生中。其实思考人生倒也不是说无用，不但可以提升语文作文中的思辨能力，还能消磨青春，荒度日月……但毕竟，至少我依靠贫瘠的大脑，思索出一个自相矛盾的结论：“思考人生实在是不值得。“\n\n​\t也许以前我自己感受不到，但是我过去的确是无意识地自命不凡的，我捉摸大部分人或许都这么想过，而且和我一样也只是停留在幻想中。譬如说初三之后，我想，我将来或许能成为陈立杰那样的人吧，陈立杰初三联赛也炸了，我也炸了。高一之后，我想，我或许能成为周雨扬那样的人吧，周雨扬高一省选也炸了，我也炸了。只是这种停留在低层次的自娱自乐，终究只能是一种麻药，当药劲过去，回顾之前飘飘欲仙的幻想，自怨自艾一番，然后偶尔望向迷雾覆盖的未来地狱的道路，不自觉的向前走去。\n\n​\t我有很多梦想，准确一点，是有很多不切实际的毫无意义的瞎几把乱想。而且这次省选之后，仅存的不是那么夸张的瞎想几乎都湮灭了吧。\n\n我不知道我未来是否真的能够活在尚且光明的幻光中，但现在，姑且留下一些为oier学弟一些可能不切实际的建议吧，但只是出于自己主观上的臆想。\n\n1、注意舒缓压力。\n\n$ \\color{white}{……如果真心理压力太大，大概会……心痛……呼吸不畅……而且心态不好，容易造成诸如“我自闭了，我被T2续了三个半个小时，心态炸了”的惊世骇俗的言论。我高一的时候曾有一段时间，反正因为某个原因，压力比较大……然后就会动不动心痛，所谓的心痛指的是感觉心脏突然抽搐一下……然后还有呼吸不畅，就是深呼吸到一半突然就没气了，所以也算呼吸短促……那段时间真的是身体上的难受，想要去呼吸新鲜的空气，哪怕颓废都无法缓解。但好像……如果假定自己本来就是个浑浑噩噩的傻逼，好像就会好一点？\\\\\t虽然以上的确是现身说法，你也尽可以不信，可以不看，因为我也不知道如果才能保持一个好的心态。}$\n\n2、正确颓废\n\n$ \\color{white}{倒也不是不能颓废，至少颓废能帮助缓解心理压力？\\\\ 而且很遗憾，我真的不知道如何遏制颓废的欲望，但还是写一点可能有用的建议吧。\\\\ 首先，如果是该学习的时间，不要颓废。 \\\\ 然后，相比于颓废，可以尝试读一些书，可以是历史的，可以是科普的，至少这些东西的趣味性不算太差，不至于让人觉得和干正事一样难受。}$\n\n3、不要太`fake`\n\n……\n\n哎，毕竟没有什么人生阅历，连大道理都讲不出来。\n\n\n\n姑且说说这次ZJOI吧\n\nDay1和去年Day1很像\n\n\n\n​\t开场看到T1，发现是 `runs` 题，第一眼看出了 `60pts` 的暴力，感觉是类似 `串串划分`，`优秀的拆分`，但是太久没做题已经忘记怎么做的了，就先打算试一试 `60pts` 的暴力，尝试写了一波暴力 $lcp$ ，发现样例死活过不去。\n\n​\t然后……发现自己题目看错了，题目还有去重的要求，想了好久发现不太会处理，就先不管T1了。\n\n​\t看到T2之后，显然可以发现每个点是独立的，于是问题变成求每个点的贡献。通过简单的式子推一推，容易发现就是一个矩阵快速幂，和去年的Day1T2做法几乎没变。\n\n​\t我还记得我去年省选T2，也想到了几乎一样的做法，只是当时的我太 $naive$ ， 把祖先有无，当前点有无用了整整四个状态压缩，（事实上当前点有，无论祖先有无都是没必要的），然后去年省选就因此爆蛋。\n\n​\tT3想了很久费用流，发现并不会，又跑回去看T1。\n\n​\tT1加了个二位数点，勉强过了样例，又花了半个多小时把许久未写的SA敲了一遍，才大概搞到60，然后开始想`T=1` 的做法，主要是 `T=1` 给人一种只需要看每个SA缩起来的联通块中是否存在，也就是判断存在性，以为会好做。结果还是做了一年没做出来。\n\n​\t最后半个小时，把 T3 的 `30pts` 暴力写了一下。\n\n​\t尝试优化 T3 ，搞了好久没搞出来（我以为要找什么性质）， 就弃疗了。\n\n\n\nDay2和前年Day2很像\n\n​\tT1题目太长太长了，就先略去了，然后做T2。\n\n​\t想了一下 `min_max` 容斥，直接容斥似乎就有 `50pts` ，我发现我的 dp 状态大概可以用前缀和优化一下，就直接加了个前缀和优化。$\\color{red}{赛后听说大部分人都是n^2/k，就我是满的n^2……}$\n\n​\t然后开始了长长的自闭生涯。\n\n​\t最后勉为其难地写了若干傻逼暴力分。\n\n\n\n估分大概60+100+30+15+70+10\n\n……\n\n实际得分：60+100+0+10+70+10，好像卡线进队了？\n\n\n\n……\n\n一点小小的反思：\n\n​\t1、我day1T3不应该挂啊，不可能挂啊，不能挂啊，挂分真的难受。\n\n​\t2、Day2T1考场上一直不会树的分，最后去写链的暴力，但后来冷静分析一下，其实链就是树的特殊情况，如果做链之后再去类比一下树可能能搞出来。\n\n \t3、由于一段时间的生疏，一些基础算法（如 `SA` ）写了较长时间，不应该不应该。\n\n \t4、艹我这个傻逼就应该早点退役，智商不够搞什么竞赛。\n\n\n\n>取胜不是这游戏的目的\n>\n>无心插柳柳成荫才是美丽\n>\n>有哪种美好会来自于刻意\n>\n>这一生波澜壮阔或是不惊都没问题\n>\n>只愿你能够拥抱那种美丽","slug":"滚粗记/ZJOI2020退役录","published":1,"date":"2021-08-28T13:02:40.625Z","updated":"2021-08-28T13:02:40.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvso3570026vfnuekv3828i","content":"<p><code>2012·7-&gt; 2020·6</code></p><a id=\"more\"></a><p>​\t这一年 <code>2019.7-&gt;2020.6</code> 过得真的算是浑浑噩噩。说我在学文化课吧，成绩一直都在中等，大概是一本线上下的样子，英语还是年段倒数。说还在搞 OI 吧，OI 水平倒只有一直在退步。</p><p>​\t嗯，还有半年就高考了，还是得好好努力的吧。</p><p>​\t其实真要说起来，这一年大概有好多好多时间浪费在一次又一次的思考人生中。其实思考人生倒也不是说无用，不但可以提升语文作文中的思辨能力，还能消磨青春，荒度日月……但毕竟，至少我依靠贫瘠的大脑，思索出一个自相矛盾的结论：“思考人生实在是不值得。“</p><p>​\t也许以前我自己感受不到，但是我过去的确是无意识地自命不凡的，我捉摸大部分人或许都这么想过，而且和我一样也只是停留在幻想中。譬如说初三之后，我想，我将来或许能成为陈立杰那样的人吧，陈立杰初三联赛也炸了，我也炸了。高一之后，我想，我或许能成为周雨扬那样的人吧，周雨扬高一省选也炸了，我也炸了。只是这种停留在低层次的自娱自乐，终究只能是一种麻药，当药劲过去，回顾之前飘飘欲仙的幻想，自怨自艾一番，然后偶尔望向迷雾覆盖的未来地狱的道路，不自觉的向前走去。</p><p>​\t我有很多梦想，准确一点，是有很多不切实际的毫无意义的瞎几把乱想。而且这次省选之后，仅存的不是那么夸张的瞎想几乎都湮灭了吧。</p><p>我不知道我未来是否真的能够活在尚且光明的幻光中，但现在，姑且留下一些为 oier 学弟一些可能不切实际的建议吧，但只是出于自己主观上的臆想。</p><p>1、注意舒缓压力。</p><p>$ \\color{white}{……如果真心理压力太大，大概会……心痛……呼吸不畅……而且心态不好，容易造成诸如“我自闭了，我被 T2 续了三个半个小时，心态炸了”的惊世骇俗的言论。我高一的时候曾有一段时间，反正因为某个原因，压力比较大……然后就会动不动心痛，所谓的心痛指的是感觉心脏突然抽搐一下……然后还有呼吸不畅，就是深呼吸到一半突然就没气了，所以也算呼吸短促……那段时间真的是身体上的难受，想要去呼吸新鲜的空气，哪怕颓废都无法缓解。但好像……如果假定自己本来就是个浑浑噩噩的傻逼，好像就会好一点？\\\t虽然以上的确是现身说法，你也尽可以不信，可以不看，因为我也不知道如果才能保持一个好的心态。}$</p><p>2、正确颓废 </p><p>$ \\color{white}{倒也不是不能颓废，至少颓废能帮助缓解心理压力？\\ 而且很遗憾，我真的不知道如何遏制颓废的欲望，但还是写一点可能有用的建议吧。\\ 首先，如果是该学习的时间，不要颓废。 \\ 然后，相比于颓废，可以尝试读一些书，可以是历史的，可以是科普的，至少这些东西的趣味性不算太差，不至于让人觉得和干正事一样难受。}$</p><p>3、不要太<code>fake</code></p><p>……</p><p> 哎，毕竟没有什么人生阅历，连大道理都讲不出来。</p><p>姑且说说这次 ZJOI 吧 </p><p>Day1 和去年 Day1 很像</p><p>​\t开场看到 T1，发现是 <code>runs</code> 题，第一眼看出了 <code>60pts</code> 的暴力，感觉是类似 <code> 串串划分 </code>，<code> 优秀的拆分 </code>，但是太久没做题已经忘记怎么做的了，就先打算试一试 <code>60pts</code> 的暴力，尝试写了一波暴力 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>c</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">lcp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">p</span></span></span></span> ，发现样例死活过不去。</p><p>​\t然后……发现自己题目看错了，题目还有去重的要求，想了好久发现不太会处理，就先不管 T1 了。</p><p>​\t看到 T2 之后，显然可以发现每个点是独立的，于是问题变成求每个点的贡献。通过简单的式子推一推，容易发现就是一个矩阵快速幂，和去年的 Day1T2 做法几乎没变。</p><p>​\t我还记得我去年省选 T2，也想到了几乎一样的做法，只是当时的我太 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mi>a</mi><mi>i</mi><mi>v</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">naive</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span></span></span></span> ， 把祖先有无，当前点有无用了整整四个状态压缩，（事实上当前点有，无论祖先有无都是没必要的），然后去年省选就因此爆蛋。</p><p>​\tT3 想了很久费用流，发现并不会，又跑回去看 T1。</p><p>​\tT1 加了个二位数点，勉强过了样例，又花了半个多小时把许久未写的 SA 敲了一遍，才大概搞到 60，然后开始想<code>T=1</code> 的做法，主要是 <code>T=1</code> 给人一种只需要看每个 SA 缩起来的联通块中是否存在，也就是判断存在性，以为会好做。结果还是做了一年没做出来。</p><p>​\t最后半个小时，把 T3 的 <code>30pts</code> 暴力写了一下。</p><p>​\t尝试优化 T3 ，搞了好久没搞出来（我以为要找什么性质）， 就弃疗了。</p><p>Day2 和前年 Day2 很像</p><p>​\tT1 题目太长太长了，就先略去了，然后做 T2。</p><p>​\t想了一下 <code>min_max</code> 容斥，直接容斥似乎就有 <code>50pts</code> ，我发现我的 dp 状态大概可以用前缀和优化一下，就直接加了个前缀和优化。<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi mathvariant=\"normal\"> 赛</mi><mi mathvariant=\"normal\">后 </mi><mi mathvariant=\"normal\"> 听</mi><mi mathvariant=\"normal\">说 </mi><mi mathvariant=\"normal\"> 大</mi><mi mathvariant=\"normal\">部 </mi><mi mathvariant=\"normal\"> 分</mi><mi mathvariant=\"normal\">人 </mi><mi mathvariant=\"normal\"> 都</mi><mi mathvariant=\"normal\">是 </mi><msup><mi>n</mi><mn>2</mn></msup><mi mathvariant=\"normal\">/</mi><mi>k</mi><mi mathvariant=\"normal\">，</mi><mi mathvariant=\"normal\"> 就</mi><mi mathvariant=\"normal\">我 </mi><mi mathvariant=\"normal\"> 是</mi><mi mathvariant=\"normal\">满 </mi><mi mathvariant=\"normal\"> 的</mi><msup><mi>n</mi><mn>2</mn></msup><mo>…</mo><mo>…</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{赛后听说大部分人都是 n^2/k，就我是满的 n^2……}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord\" style=\"color:red\"><span class=\"mord cjk_fallback\" style=\"color:red\">赛 </span><span class=\"mord cjk_fallback\" style=\"color:red\"> 后</span><span class=\"mord cjk_fallback\" style=\"color:red\">听 </span><span class=\"mord cjk_fallback\" style=\"color:red\"> 说</span><span class=\"mord cjk_fallback\" style=\"color:red\">大 </span><span class=\"mord cjk_fallback\" style=\"color:red\"> 部</span><span class=\"mord cjk_fallback\" style=\"color:red\">分 </span><span class=\"mord cjk_fallback\" style=\"color:red\"> 人</span><span class=\"mord cjk_fallback\" style=\"color:red\">都 </span><span class=\"mord cjk_fallback\" style=\"color:red\"> 是</span><span class=\"mord\" style=\"color:red\"><span class=\"mord mathdefault\" style=\"color:red\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color:red\"><span class=\"mord mtight\" style=\"color:red\">2</span></span></span></span></span></span></span></span><span class=\"mord\" style=\"color:red\">/</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em;color:red\">k</span><span class=\"mord cjk_fallback\" style=\"color:red\">，</span><span class=\"mord cjk_fallback\" style=\"color:red\">就 </span><span class=\"mord cjk_fallback\" style=\"color:red\"> 我</span><span class=\"mord cjk_fallback\" style=\"color:red\">是 </span><span class=\"mord cjk_fallback\" style=\"color:red\"> 满</span><span class=\"mord cjk_fallback\" style=\"color:red\">的 </span><span class=\"mord\" style=\"color:red\"><span class=\"mord mathdefault\" style=\"color:red\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color:red\"><span class=\"mord mtight\" style=\"color:red\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"color:red;margin-right:.16666666666666666em\"></span><span class=\"minner\" style=\"color:red\">…</span><span class=\"mspace\" style=\"color:red;margin-right:.16666666666666666em\"></span><span class=\"minner\" style=\"color:red\">…</span></span></span></span></span></p><p>​\t然后开始了长长的自闭生涯。</p><p>​\t最后勉为其难地写了若干傻逼暴力分。</p><p> 估分大概 60+100+30+15+70+10</p><p>……</p><p>实际得分：60+100+0+10+70+10，好像卡线进队了？</p><p>……</p><p>一点小小的反思：</p><p>​\t1、我 day1T3 不应该挂啊，不可能挂啊，不能挂啊，挂分真的难受。</p><p>​\t2、Day2T1 考场上一直不会树的分，最后去写链的暴力，但后来冷静分析一下，其实链就是树的特殊情况，如果做链之后再去类比一下树可能能搞出来。</p><pre><code>3、由于一段时间的生疏，一些基础算法（如 `SA` ）写了较长时间，不应该不应该。\n\n4、艹我这个傻逼就应该早点退役，智商不够搞什么竞赛。\n</code></pre><blockquote><p>取胜不是这游戏的目的 </p><p> 无心插柳柳成荫才是美丽 </p><p> 有哪种美好会来自于刻意 </p><p> 这一生波澜壮阔或是不惊都没问题 </p><p> 只愿你能够拥抱那种美丽</p></blockquote>","site":{"data":{}},"excerpt":"<p><code>2012·7-&gt; 2020·6</code></p>","more":"<p>​\t这一年<code>2019.7-&gt;2020.6</code>过得真的算是浑浑噩噩。说我在学文化课吧，成绩一直都在中等，大概是一本线上下的样子，英语还是年段倒数。说还在搞OI吧，OI水平倒只有一直在退步。</p><p>​\t嗯，还有半年就高考了，还是得好好努力的吧。</p><p>​\t其实真要说起来，这一年大概有好多好多时间浪费在一次又一次的思考人生中。其实思考人生倒也不是说无用，不但可以提升语文作文中的思辨能力，还能消磨青春，荒度日月……但毕竟，至少我依靠贫瘠的大脑，思索出一个自相矛盾的结论：“思考人生实在是不值得。“</p><p>​\t也许以前我自己感受不到，但是我过去的确是无意识地自命不凡的，我捉摸大部分人或许都这么想过，而且和我一样也只是停留在幻想中。譬如说初三之后，我想，我将来或许能成为陈立杰那样的人吧，陈立杰初三联赛也炸了，我也炸了。高一之后，我想，我或许能成为周雨扬那样的人吧，周雨扬高一省选也炸了，我也炸了。只是这种停留在低层次的自娱自乐，终究只能是一种麻药，当药劲过去，回顾之前飘飘欲仙的幻想，自怨自艾一番，然后偶尔望向迷雾覆盖的未来地狱的道路，不自觉的向前走去。</p><p>​\t我有很多梦想，准确一点，是有很多不切实际的毫无意义的瞎几把乱想。而且这次省选之后，仅存的不是那么夸张的瞎想几乎都湮灭了吧。</p><p>我不知道我未来是否真的能够活在尚且光明的幻光中，但现在，姑且留下一些为oier学弟一些可能不切实际的建议吧，但只是出于自己主观上的臆想。</p><p>1、注意舒缓压力。</p><p>$ \\color{white}{……如果真心理压力太大，大概会……心痛……呼吸不畅……而且心态不好，容易造成诸如“我自闭了，我被T2续了三个半个小时，心态炸了”的惊世骇俗的言论。我高一的时候曾有一段时间，反正因为某个原因，压力比较大……然后就会动不动心痛，所谓的心痛指的是感觉心脏突然抽搐一下……然后还有呼吸不畅，就是深呼吸到一半突然就没气了，所以也算呼吸短促……那段时间真的是身体上的难受，想要去呼吸新鲜的空气，哪怕颓废都无法缓解。但好像……如果假定自己本来就是个浑浑噩噩的傻逼，好像就会好一点？\\\t虽然以上的确是现身说法，你也尽可以不信，可以不看，因为我也不知道如果才能保持一个好的心态。}$</p><p>2、正确颓废</p><p>$ \\color{white}{倒也不是不能颓废，至少颓废能帮助缓解心理压力？\\ 而且很遗憾，我真的不知道如何遏制颓废的欲望，但还是写一点可能有用的建议吧。\\ 首先，如果是该学习的时间，不要颓废。 \\ 然后，相比于颓废，可以尝试读一些书，可以是历史的，可以是科普的，至少这些东西的趣味性不算太差，不至于让人觉得和干正事一样难受。}$</p><p>3、不要太<code>fake</code></p><p>……</p><p>哎，毕竟没有什么人生阅历，连大道理都讲不出来。</p><p>姑且说说这次ZJOI吧</p><p>Day1和去年Day1很像</p><p>​\t开场看到T1，发现是 <code>runs</code> 题，第一眼看出了 <code>60pts</code> 的暴力，感觉是类似 <code>串串划分</code>，<code>优秀的拆分</code>，但是太久没做题已经忘记怎么做的了，就先打算试一试 <code>60pts</code> 的暴力，尝试写了一波暴力 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>c</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">lcp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">p</span></span></span></span> ，发现样例死活过不去。</p><p>​\t然后……发现自己题目看错了，题目还有去重的要求，想了好久发现不太会处理，就先不管T1了。</p><p>​\t看到T2之后，显然可以发现每个点是独立的，于是问题变成求每个点的贡献。通过简单的式子推一推，容易发现就是一个矩阵快速幂，和去年的Day1T2做法几乎没变。</p><p>​\t我还记得我去年省选T2，也想到了几乎一样的做法，只是当时的我太 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mi>a</mi><mi>i</mi><mi>v</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">naive</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span></span></span></span> ， 把祖先有无，当前点有无用了整整四个状态压缩，（事实上当前点有，无论祖先有无都是没必要的），然后去年省选就因此爆蛋。</p><p>​\tT3想了很久费用流，发现并不会，又跑回去看T1。</p><p>​\tT1加了个二位数点，勉强过了样例，又花了半个多小时把许久未写的SA敲了一遍，才大概搞到60，然后开始想<code>T=1</code> 的做法，主要是 <code>T=1</code> 给人一种只需要看每个SA缩起来的联通块中是否存在，也就是判断存在性，以为会好做。结果还是做了一年没做出来。</p><p>​\t最后半个小时，把 T3 的 <code>30pts</code> 暴力写了一下。</p><p>​\t尝试优化 T3 ，搞了好久没搞出来（我以为要找什么性质）， 就弃疗了。</p><p>Day2和前年Day2很像</p><p>​\tT1题目太长太长了，就先略去了，然后做T2。</p><p>​\t想了一下 <code>min_max</code> 容斥，直接容斥似乎就有 <code>50pts</code> ，我发现我的 dp 状态大概可以用前缀和优化一下，就直接加了个前缀和优化。<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi mathvariant=\"normal\">赛</mi><mi mathvariant=\"normal\">后</mi><mi mathvariant=\"normal\">听</mi><mi mathvariant=\"normal\">说</mi><mi mathvariant=\"normal\">大</mi><mi mathvariant=\"normal\">部</mi><mi mathvariant=\"normal\">分</mi><mi mathvariant=\"normal\">人</mi><mi mathvariant=\"normal\">都</mi><mi mathvariant=\"normal\">是</mi><msup><mi>n</mi><mn>2</mn></msup><mi mathvariant=\"normal\">/</mi><mi>k</mi><mi mathvariant=\"normal\">，</mi><mi mathvariant=\"normal\">就</mi><mi mathvariant=\"normal\">我</mi><mi mathvariant=\"normal\">是</mi><mi mathvariant=\"normal\">满</mi><mi mathvariant=\"normal\">的</mi><msup><mi>n</mi><mn>2</mn></msup><mo>…</mo><mo>…</mo></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{赛后听说大部分人都是n^2/k，就我是满的n^2……}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord\" style=\"color:red\"><span class=\"mord cjk_fallback\" style=\"color:red\">赛</span><span class=\"mord cjk_fallback\" style=\"color:red\">后</span><span class=\"mord cjk_fallback\" style=\"color:red\">听</span><span class=\"mord cjk_fallback\" style=\"color:red\">说</span><span class=\"mord cjk_fallback\" style=\"color:red\">大</span><span class=\"mord cjk_fallback\" style=\"color:red\">部</span><span class=\"mord cjk_fallback\" style=\"color:red\">分</span><span class=\"mord cjk_fallback\" style=\"color:red\">人</span><span class=\"mord cjk_fallback\" style=\"color:red\">都</span><span class=\"mord cjk_fallback\" style=\"color:red\">是</span><span class=\"mord\" style=\"color:red\"><span class=\"mord mathdefault\" style=\"color:red\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color:red\"><span class=\"mord mtight\" style=\"color:red\">2</span></span></span></span></span></span></span></span><span class=\"mord\" style=\"color:red\">/</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em;color:red\">k</span><span class=\"mord cjk_fallback\" style=\"color:red\">，</span><span class=\"mord cjk_fallback\" style=\"color:red\">就</span><span class=\"mord cjk_fallback\" style=\"color:red\">我</span><span class=\"mord cjk_fallback\" style=\"color:red\">是</span><span class=\"mord cjk_fallback\" style=\"color:red\">满</span><span class=\"mord cjk_fallback\" style=\"color:red\">的</span><span class=\"mord\" style=\"color:red\"><span class=\"mord mathdefault\" style=\"color:red\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color:red\"><span class=\"mord mtight\" style=\"color:red\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"color:red;margin-right:.16666666666666666em\"></span><span class=\"minner\" style=\"color:red\">…</span><span class=\"mspace\" style=\"color:red;margin-right:.16666666666666666em\"></span><span class=\"minner\" style=\"color:red\">…</span></span></span></span></span></p><p>​\t然后开始了长长的自闭生涯。</p><p>​\t最后勉为其难地写了若干傻逼暴力分。</p><p>估分大概60+100+30+15+70+10</p><p>……</p><p>实际得分：60+100+0+10+70+10，好像卡线进队了？</p><p>……</p><p>一点小小的反思：</p><p>​\t1、我day1T3不应该挂啊，不可能挂啊，不能挂啊，挂分真的难受。</p><p>​\t2、Day2T1考场上一直不会树的分，最后去写链的暴力，但后来冷静分析一下，其实链就是树的特殊情况，如果做链之后再去类比一下树可能能搞出来。</p><pre><code>3、由于一段时间的生疏，一些基础算法（如 `SA` ）写了较长时间，不应该不应该。\n\n4、艹我这个傻逼就应该早点退役，智商不够搞什么竞赛。\n</code></pre><blockquote><p>取胜不是这游戏的目的</p><p>无心插柳柳成荫才是美丽</p><p>有哪种美好会来自于刻意</p><p>这一生波澜壮阔或是不惊都没问题</p><p>只愿你能够拥抱那种美丽</p></blockquote>"},{"title":"BZOJ1045 [HAOI2008] 糖果传递","_content":"\n#### 题意\n\n​\t　　有n个小朋友坐成一圈，每人有ai个糖果。每人只能给左右两人传递糖果。每人每次传递一个糖果代价为1。\n\n<!--more-->\n\n#### 题解\n\n​\t设xi表示 $i$给$i-1$的糖果数，$xi$可以是负数。 \n\n​\t得到平均数$ave$\n\n​\t$a1 - x1 + x2 = ave$\n​\t$a2 - x2 + x3 = ave$\n​\t……\n​\t$an - xn + x1 = ave$\n\n转化一下 \n​\t$x2 - x1 = ave - a1$① \n​\t$x3 - x2 = ave - a2$② \n​\t$x4 - x3 = ave - a3$③ \n​\t……\n我们把①和②加起来得到\n​\t$x3 - x1 = 2 * ave - a1 - a2$\n同理\n​\t$x4 - x1 = 3 * ave - a1 - a2 - a3$\n​\t…… \n​\t设$si = i * ave - a1 - a2 - a3 - …… - ai $\n其中s0 = 0\n则\n​\t$x1 = x1 + s0$\n​\t$x2 = x1 + s1$\n​\t$x3 = x1 + s2$\n……\n要的是最小化\n​\t$|x1| + |x2| + |x3|……$\n也就是最小化\n​\t$|x1 - (-s1)| + |x2 - (-s2)| …… $\n……\n​\t令$x1 = -s1,-s2,-s3……$的中位数。\n然后算出来就行了 \n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\ntypedef long long LL;\nnamespace IO{\n\t#define getch getchar\n\tLL read(){LL T = 0,f = 1;char c = getch();while ((c<'0'||c>'9')&&c!='-') c=getch();if(c=='-')f=-1,c=getch();while (c>='0'&&c<='9'){T=((T<<1)+(T<<3))+c-48;c=getch();}return T*f;}\n\tinline void write(LL x){if(x < 0) putchar('0'),x = -x;if (x>=10) write(x / 10);putchar((x % 10)+'0');}\n};\n#define pc putchar\nusing namespace IO;\nLL s[1000005],a[1000005],x1,n,sum,ave,Ans;\nint main(){\n\tn = read();\n\tfor (int i=1;i<=n;i++) a[i] = read(),sum+=a[i];\n\tave = sum / n;\n\ts[0] = 0;\n\tfor (int i=1;i<n;i++)\n\t\ts[i] = s[i-1] + ave - a[i];\n\tfor (int i=0;i<n;i++) s[i]=-s[i];\n\tsort(s,s+n);\n\tx1 = s[n>>1];\n\tAns = 0;\n\tfor (int i=0;i<n;i++) Ans += abs(x1 - s[i]);\n\twrite(Ans);pc('\\n');\n\treturn 0;\n}\n```\n\n","source":"_posts/BZOJ1045 [HAOI2008]糖果传递.md","raw":"---\ntitle: BZOJ1045 [HAOI2008] 糖果传递\ntags:\n - BZOJ\n---\n\n#### 题意\n\n​\t　　有n个小朋友坐成一圈，每人有ai个糖果。每人只能给左右两人传递糖果。每人每次传递一个糖果代价为1。\n\n<!--more-->\n\n#### 题解\n\n​\t设xi表示 $i$给$i-1$的糖果数，$xi$可以是负数。 \n\n​\t得到平均数$ave$\n\n​\t$a1 - x1 + x2 = ave$\n​\t$a2 - x2 + x3 = ave$\n​\t……\n​\t$an - xn + x1 = ave$\n\n转化一下 \n​\t$x2 - x1 = ave - a1$① \n​\t$x3 - x2 = ave - a2$② \n​\t$x4 - x3 = ave - a3$③ \n​\t……\n我们把①和②加起来得到\n​\t$x3 - x1 = 2 * ave - a1 - a2$\n同理\n​\t$x4 - x1 = 3 * ave - a1 - a2 - a3$\n​\t…… \n​\t设$si = i * ave - a1 - a2 - a3 - …… - ai $\n其中s0 = 0\n则\n​\t$x1 = x1 + s0$\n​\t$x2 = x1 + s1$\n​\t$x3 = x1 + s2$\n……\n要的是最小化\n​\t$|x1| + |x2| + |x3|……$\n也就是最小化\n​\t$|x1 - (-s1)| + |x2 - (-s2)| …… $\n……\n​\t令$x1 = -s1,-s2,-s3……$的中位数。\n然后算出来就行了 \n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\ntypedef long long LL;\nnamespace IO{\n\t#define getch getchar\n\tLL read(){LL T = 0,f = 1;char c = getch();while ((c<'0'||c>'9')&&c!='-') c=getch();if(c=='-')f=-1,c=getch();while (c>='0'&&c<='9'){T=((T<<1)+(T<<3))+c-48;c=getch();}return T*f;}\n\tinline void write(LL x){if(x < 0) putchar('0'),x = -x;if (x>=10) write(x / 10);putchar((x % 10)+'0');}\n};\n#define pc putchar\nusing namespace IO;\nLL s[1000005],a[1000005],x1,n,sum,ave,Ans;\nint main(){\n\tn = read();\n\tfor (int i=1;i<=n;i++) a[i] = read(),sum+=a[i];\n\tave = sum / n;\n\ts[0] = 0;\n\tfor (int i=1;i<n;i++)\n\t\ts[i] = s[i-1] + ave - a[i];\n\tfor (int i=0;i<n;i++) s[i]=-s[i];\n\tsort(s,s+n);\n\tx1 = s[n>>1];\n\tAns = 0;\n\tfor (int i=0;i<n;i++) Ans += abs(x1 - s[i]);\n\twrite(Ans);pc('\\n');\n\treturn 0;\n}\n```\n\n","slug":"BZOJ1045 [HAOI2008]糖果传递","published":1,"date":"2021-08-28T13:04:29.782Z","updated":"2021-08-28T13:04:29.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvspz52000009nu9scm6q12","content":"<h4 id=\"题意\"><a class=\"markdownIt-Anchor\" href=\"# 题意\"></a> 题意 </h4><p>​\t　　有 n 个小朋友坐成一圈，每人有 ai 个糖果。每人只能给左右两人传递糖果。每人每次传递一个糖果代价为 1。</p><a id=\"more\"></a><h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"# 题解\"></a> 题解</h4><p>​\t设 xi 表示 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 给<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.74285em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span>的糖果数，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">xi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">i</span></span></span></span>可以是负数。</p><p>​\t得到平均数 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mi>v</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">ave</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span></span></span></span></p><p>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mn>1</mn><mo>−</mo><mi>x</mi><mn>1</mn><mo>+</mo><mi>x</mi><mn>2</mn><mo>=</mo><mi>a</mi><mi>v</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">a1 - x1 + x2 = ave</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span></span></span></span><br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mn>2</mn><mo>−</mo><mi>x</mi><mn>2</mn><mo>+</mo><mi>x</mi><mn>3</mn><mo>=</mo><mi>a</mi><mi>v</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">a2 - x2 + x3 = ave</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span></span></span></span><br>​\t……<br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mi>n</mi><mo>−</mo><mi>x</mi><mi>n</mi><mo>+</mo><mi>x</mi><mn>1</mn><mo>=</mo><mi>a</mi><mi>v</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">an - xn + x1 = ave</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span></span></span></span></p><p> 转化一下 <br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mn>2</mn><mo>−</mo><mi>x</mi><mn>1</mn><mo>=</mo><mi>a</mi><mi>v</mi><mi>e</mi><mo>−</mo><mi>a</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x2 - x1 = ave - a1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">1</span></span></span></span>①<br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mn>3</mn><mo>−</mo><mi>x</mi><mn>2</mn><mo>=</mo><mi>a</mi><mi>v</mi><mi>e</mi><mo>−</mo><mi>a</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">x3 - x2 = ave - a2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">2</span></span></span></span>②<br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mn>4</mn><mo>−</mo><mi>x</mi><mn>3</mn><mo>=</mo><mi>a</mi><mi>v</mi><mi>e</mi><mo>−</mo><mi>a</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">x4 - x3 = ave - a3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">3</span></span></span></span>③<br>​\t……<br> 我们把①和②加起来得到 <br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mn>3</mn><mo>−</mo><mi>x</mi><mn>1</mn><mo>=</mo><mn>2</mn><mo>∗</mo><mi>a</mi><mi>v</mi><mi>e</mi><mo>−</mo><mi>a</mi><mn>1</mn><mo>−</mo><mi>a</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">x3 - x1 = 2 * ave - a1 - a2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">2</span></span></span></span><br> 同理 <br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mn>4</mn><mo>−</mo><mi>x</mi><mn>1</mn><mo>=</mo><mn>3</mn><mo>∗</mo><mi>a</mi><mi>v</mi><mi>e</mi><mo>−</mo><mi>a</mi><mn>1</mn><mo>−</mo><mi>a</mi><mn>2</mn><mo>−</mo><mi>a</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">x4 - x1 = 3 * ave - a1 - a2 - a3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">3</span></span></span></span><br>​\t……<br>​\t设 $si = i * ave - a1 - a2 - a3 - …… - ai $<br> 其中 s0 = 0<br>则 <br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mn>1</mn><mo>=</mo><mi>x</mi><mn>1</mn><mo>+</mo><mi>s</mi><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x1 = x1 + s0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord\">0</span></span></span></span><br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mn>2</mn><mo>=</mo><mi>x</mi><mn>1</mn><mo>+</mo><mi>s</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x2 = x1 + s1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord\">1</span></span></span></span><br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mn>3</mn><mo>=</mo><mi>x</mi><mn>1</mn><mo>+</mo><mi>s</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">x3 = x1 + s2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord\">2</span></span></span></span><br>……<br> 要的是最小化 <br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mn>1</mn><mi mathvariant=\"normal\">∣</mi><mo>+</mo><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mn>2</mn><mi mathvariant=\"normal\">∣</mi><mo>+</mo><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mn>3</mn><mi mathvariant=\"normal\">∣</mi><mo>…</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">|x1| + |x2| + |x3|……</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">x</span><span class=\"mord\">1</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">x</span><span class=\"mord\">2</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">x</span><span class=\"mord\">3</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"minner\">…</span></span></span></span><br> 也就是最小化 <br>​\t$|x1 - (-s1)| + |x2 - (-s2)| …… <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>…</mo><mo>…</mo><mi mathvariant=\"normal\">​</mi><mi mathvariant=\"normal\"> 令</mi></mrow><annotation encoding=\"application/x-tex\">…… ​\t令 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.12em;vertical-align:0\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">​</span><span class=\"mord cjk_fallback\"> 令</span></span></span></span>x1 = -s1,-s2,-s3……$ 的中位数。<br>然后算出来就行了</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> IO&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> getch getchar</span></span><br><span class=\"line\">    <span class=\"function\">LL <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;LL T = <span class=\"number\">0</span>,f = <span class=\"number\">1</span>;<span class=\"keyword\">char</span> c = getch();<span class=\"keyword\">while</span> ((c&lt;<span class=\"string\">'0'</span>||c&gt;<span class=\"string\">'9'</span>)&amp;&amp;c!=<span class=\"string\">'-'</span>) c=getch();<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>,c=getch();<span class=\"keyword\">while</span> (c&gt;=<span class=\"string\">'0'</span>&amp;&amp;c&lt;=<span class=\"string\">'9'</span>)&#123;T=((T&lt;&lt;<span class=\"number\">1</span>)+(T&lt;&lt;<span class=\"number\">3</span>))+c<span class=\"number\">-48</span>;c=getch();&#125;<span class=\"keyword\">return</span> T*f;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(LL x)</span></span>&#123;<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>),x = -x;<span class=\"keyword\">if</span> (x&gt;=<span class=\"number\">10</span>) <span class=\"built_in\">write</span>(x / <span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>((x % <span class=\"number\">10</span>)+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> IO;</span><br><span class=\"line\">LL s[<span class=\"number\">1000005</span>],a[<span class=\"number\">1000005</span>],x1,n,sum,ave,Ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) a[i] = <span class=\"built_in\">read</span>(),sum+=a[i];</span><br><span class=\"line\">    ave = sum / n;</span><br><span class=\"line\">    s[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">        s[i] = s[i<span class=\"number\">-1</span>] + ave - a[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) s[i]=-s[i];</span><br><span class=\"line\">    sort(s,s+n);</span><br><span class=\"line\">    x1 = s[n&gt;&gt;<span class=\"number\">1</span>];</span><br><span class=\"line\">    Ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) Ans += <span class=\"built_in\">abs</span>(x1 - s[i]);</span><br><span class=\"line\">    <span class=\"built_in\">write</span>(Ans);pc(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"题意\"><a class=\"markdownIt-Anchor\" href=\"#题意\"></a> 题意</h4><p>​\t　　有n个小朋友坐成一圈，每人有ai个糖果。每人只能给左右两人传递糖果。每人每次传递一个糖果代价为1。</p>","more":"<h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\"></a> 题解</h4><p>​\t设xi表示 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span>给<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.74285em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">1</span></span></span></span>的糖果数，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">xi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">i</span></span></span></span>可以是负数。</p><p>​\t得到平均数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mi>v</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">ave</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span></span></span></span></p><p>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mn>1</mn><mo>−</mo><mi>x</mi><mn>1</mn><mo>+</mo><mi>x</mi><mn>2</mn><mo>=</mo><mi>a</mi><mi>v</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">a1 - x1 + x2 = ave</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span></span></span></span><br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mn>2</mn><mo>−</mo><mi>x</mi><mn>2</mn><mo>+</mo><mi>x</mi><mn>3</mn><mo>=</mo><mi>a</mi><mi>v</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">a2 - x2 + x3 = ave</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span></span></span></span><br>​\t……<br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mi>n</mi><mo>−</mo><mi>x</mi><mi>n</mi><mo>+</mo><mi>x</mi><mn>1</mn><mo>=</mo><mi>a</mi><mi>v</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">an - xn + x1 = ave</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.43056em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span></span></span></span></p><p>转化一下<br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mn>2</mn><mo>−</mo><mi>x</mi><mn>1</mn><mo>=</mo><mi>a</mi><mi>v</mi><mi>e</mi><mo>−</mo><mi>a</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x2 - x1 = ave - a1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">1</span></span></span></span>①<br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mn>3</mn><mo>−</mo><mi>x</mi><mn>2</mn><mo>=</mo><mi>a</mi><mi>v</mi><mi>e</mi><mo>−</mo><mi>a</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">x3 - x2 = ave - a2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">2</span></span></span></span>②<br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mn>4</mn><mo>−</mo><mi>x</mi><mn>3</mn><mo>=</mo><mi>a</mi><mi>v</mi><mi>e</mi><mo>−</mo><mi>a</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">x4 - x3 = ave - a3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">3</span></span></span></span>③<br>​\t……<br>我们把①和②加起来得到<br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mn>3</mn><mo>−</mo><mi>x</mi><mn>1</mn><mo>=</mo><mn>2</mn><mo>∗</mo><mi>a</mi><mi>v</mi><mi>e</mi><mo>−</mo><mi>a</mi><mn>1</mn><mo>−</mo><mi>a</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">x3 - x1 = 2 * ave - a1 - a2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">2</span></span></span></span><br>同理<br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mn>4</mn><mo>−</mo><mi>x</mi><mn>1</mn><mo>=</mo><mn>3</mn><mo>∗</mo><mi>a</mi><mi>v</mi><mi>e</mi><mo>−</mo><mi>a</mi><mn>1</mn><mo>−</mo><mi>a</mi><mn>2</mn><mo>−</mo><mi>a</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">x4 - x1 = 3 * ave - a1 - a2 - a3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.66666em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">3</span></span></span></span><br>​\t……<br>​\t设$si = i * ave - a1 - a2 - a3 - …… - ai $<br>其中s0 = 0<br>则<br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mn>1</mn><mo>=</mo><mi>x</mi><mn>1</mn><mo>+</mo><mi>s</mi><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x1 = x1 + s0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord\">0</span></span></span></span><br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mn>2</mn><mo>=</mo><mi>x</mi><mn>1</mn><mo>+</mo><mi>s</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x2 = x1 + s1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord\">1</span></span></span></span><br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mn>3</mn><mo>=</mo><mi>x</mi><mn>1</mn><mo>+</mo><mi>s</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">x3 = x1 + s2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.72777em;vertical-align:-.08333em\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord\">2</span></span></span></span><br>……<br>要的是最小化<br>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mn>1</mn><mi mathvariant=\"normal\">∣</mi><mo>+</mo><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mn>2</mn><mi mathvariant=\"normal\">∣</mi><mo>+</mo><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mn>3</mn><mi mathvariant=\"normal\">∣</mi><mo>…</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">|x1| + |x2| + |x3|……</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">x</span><span class=\"mord\">1</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">x</span><span class=\"mord\">2</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">x</span><span class=\"mord\">3</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"minner\">…</span></span></span></span><br>也就是最小化<br>​\t$|x1 - (-s1)| + |x2 - (-s2)| …… <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>…</mo><mo>…</mo><mi mathvariant=\"normal\">​</mi><mi mathvariant=\"normal\">令</mi></mrow><annotation encoding=\"application/x-tex\">…… ​\t令</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.12em;vertical-align:0\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord\">​</span><span class=\"mord cjk_fallback\">令</span></span></span></span>x1 = -s1,-s2,-s3……$的中位数。<br>然后算出来就行了</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> IO&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> getch getchar</span></span><br><span class=\"line\">    <span class=\"function\">LL <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;LL T = <span class=\"number\">0</span>,f = <span class=\"number\">1</span>;<span class=\"keyword\">char</span> c = getch();<span class=\"keyword\">while</span> ((c&lt;<span class=\"string\">'0'</span>||c&gt;<span class=\"string\">'9'</span>)&amp;&amp;c!=<span class=\"string\">'-'</span>) c=getch();<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>,c=getch();<span class=\"keyword\">while</span> (c&gt;=<span class=\"string\">'0'</span>&amp;&amp;c&lt;=<span class=\"string\">'9'</span>)&#123;T=((T&lt;&lt;<span class=\"number\">1</span>)+(T&lt;&lt;<span class=\"number\">3</span>))+c<span class=\"number\">-48</span>;c=getch();&#125;<span class=\"keyword\">return</span> T*f;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(LL x)</span></span>&#123;<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>),x = -x;<span class=\"keyword\">if</span> (x&gt;=<span class=\"number\">10</span>) <span class=\"built_in\">write</span>(x / <span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>((x % <span class=\"number\">10</span>)+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> IO;</span><br><span class=\"line\">LL s[<span class=\"number\">1000005</span>],a[<span class=\"number\">1000005</span>],x1,n,sum,ave,Ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) a[i] = <span class=\"built_in\">read</span>(),sum+=a[i];</span><br><span class=\"line\">    ave = sum / n;</span><br><span class=\"line\">    s[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">        s[i] = s[i<span class=\"number\">-1</span>] + ave - a[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) s[i]=-s[i];</span><br><span class=\"line\">    sort(s,s+n);</span><br><span class=\"line\">    x1 = s[n&gt;&gt;<span class=\"number\">1</span>];</span><br><span class=\"line\">    Ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) Ans += <span class=\"built_in\">abs</span>(x1 - s[i]);</span><br><span class=\"line\">    <span class=\"built_in\">write</span>(Ans);pc(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"BZOJ1046 [HAOI2007] 上升序列","_content":"\n#### 题意\n\n​\t　　对于一个给定的S={a1,a2,a3,…,an},若有P={ax1,ax2,ax3,…,axm},满足(x1 < x2 < … < xm)且（ ax1 < ax2 < … < axm)。那么就称P为S的一个上升序列。如果有多个P满足条件，那么我们想求字典序最小的那个。任务给出S序列，给出若干询问。对于第i个询问，求出长度为Li的上升序列，如有多个，求出字典序最小的那个（即首先x1最小，如果不唯一，再看x2最小……），如果不存在长度为Li的上升序列，则打印Impossible.\n\n<!--more-->\n\n#### 题解\n\n​\t$O(N^2)$求出LIS数组f，然后贪心。一算复杂度好低呀，都不用$n log n$了\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\ntypedef long long LL;\nnamespace IO{\n\t#define getch getchar\n\tLL read(){LL T = 0,f = 1;char c = getch();while ((c<'0'||c>'9')&&c!='-') c=getch();if(c=='-')f=-1,c=getch();while (c>='0'&&c<='9'){T=((T<<1)+(T<<3))+c-48;c=getch();}return T*f;}\n\tinline void write(LL x){if(x < 0) putchar('0'),x = -x;if (x>=10) write(x / 10);putchar((x % 10)+'0');}\n};\n#define pc putchar\nusing namespace IO;\nconst int maxn = 10005;\nint n,a[maxn],f[maxn];\n\nvoid solve(int x){\n\tint last = 0;\n\tfor (int i=1;i<=n;i++){\n\t\tif (f[i] >= x && a[i] > last){\n\t\t\tprintf(\"%d\",a[i]);\n\t\t\tif (x!=1) pc(' ');\n\t\t\tlast = a[i];\n\t\t\tx--;\n\t\t\tif (!x) break;\n\t\t}\n\t}\n\tputs(\"\");\n}\n\nint main(){\n\tn = read();\n\tfor (int i=1;i<=n;i++){\n\t\ta[i] = read();\n\t}\n\tint len = 0;\n\tfor (int i=n;i>=1;i--){\n\t\tf[i] = 0;\n\t\tfor (int j=i+1;j<=n;j++)\n\t\t\tif (a[i] < a[j])\n\t\t\t\tf[i] = max(f[i],f[j]);\n\t\tf[i]++;\n\t\tlen = max(len,f[i]);\n\t}\n\n\tint Q = read();\n\twhile (Q--){\n\t\tint mark = 0;\n\t\tint x = read();\n\t\tif (x>len) puts(\"Impossible\"); else{\n\t\t\tsolve(x);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n","source":"_posts/BZOJ1046 [HAOI2007]上升序列.md","raw":"---\ntitle: BZOJ1046 [HAOI2007]上升序列\ntags:\n - BZOJ\n - DP\n - 贪心\n---\n\n#### 题意\n\n​\t　　对于一个给定的S={a1,a2,a3,…,an},若有P={ax1,ax2,ax3,…,axm},满足(x1 < x2 < … < xm)且（ ax1 < ax2 < … < axm)。那么就称P为S的一个上升序列。如果有多个P满足条件，那么我们想求字典序最小的那个。任务给出S序列，给出若干询问。对于第i个询问，求出长度为Li的上升序列，如有多个，求出字典序最小的那个（即首先x1最小，如果不唯一，再看x2最小……），如果不存在长度为Li的上升序列，则打印Impossible.\n\n<!--more-->\n\n#### 题解\n\n​\t$O(N^2)$求出LIS数组f，然后贪心。一算复杂度好低呀，都不用$n log n$了\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\ntypedef long long LL;\nnamespace IO{\n\t#define getch getchar\n\tLL read(){LL T = 0,f = 1;char c = getch();while ((c<'0'||c>'9')&&c!='-') c=getch();if(c=='-')f=-1,c=getch();while (c>='0'&&c<='9'){T=((T<<1)+(T<<3))+c-48;c=getch();}return T*f;}\n\tinline void write(LL x){if(x < 0) putchar('0'),x = -x;if (x>=10) write(x / 10);putchar((x % 10)+'0');}\n};\n#define pc putchar\nusing namespace IO;\nconst int maxn = 10005;\nint n,a[maxn],f[maxn];\n\nvoid solve(int x){\n\tint last = 0;\n\tfor (int i=1;i<=n;i++){\n\t\tif (f[i] >= x && a[i] > last){\n\t\t\tprintf(\"%d\",a[i]);\n\t\t\tif (x!=1) pc(' ');\n\t\t\tlast = a[i];\n\t\t\tx--;\n\t\t\tif (!x) break;\n\t\t}\n\t}\n\tputs(\"\");\n}\n\nint main(){\n\tn = read();\n\tfor (int i=1;i<=n;i++){\n\t\ta[i] = read();\n\t}\n\tint len = 0;\n\tfor (int i=n;i>=1;i--){\n\t\tf[i] = 0;\n\t\tfor (int j=i+1;j<=n;j++)\n\t\t\tif (a[i] < a[j])\n\t\t\t\tf[i] = max(f[i],f[j]);\n\t\tf[i]++;\n\t\tlen = max(len,f[i]);\n\t}\n\n\tint Q = read();\n\twhile (Q--){\n\t\tint mark = 0;\n\t\tint x = read();\n\t\tif (x>len) puts(\"Impossible\"); else{\n\t\t\tsolve(x);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n","slug":"BZOJ1046 [HAOI2007]上升序列","published":1,"date":"2021-08-28T13:04:29.782Z","updated":"2021-08-28T13:04:29.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvspz59000109nucd9uagbg","content":"<h4 id=\"题意\"><a class=\"markdownIt-Anchor\" href=\"# 题意\"></a> 题意 </h4><p>​\t　　对于一个给定的 S={a1,a2,a3,…,an}, 若有 P={ax1,ax2,ax3,…,axm}, 满足(x1 &lt; x2 &lt; … &lt; xm) 且（ ax1 &lt; ax2 &lt; … &lt; axm)。那么就称 P 为 S 的一个上升序列。如果有多个 P 满足条件，那么我们想求字典序最小的那个。任务给出 S 序列，给出若干询问。对于第 i 个询问，求出长度为 Li 的上升序列，如有多个，求出字典序最小的那个（即首先 x1 最小，如果不唯一，再看 x2 最小……），如果不存在长度为 Li 的上升序列，则打印 Impossible.</p><a id=\"more\"></a><h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"# 题解\"></a> 题解 </h4><p>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10903em\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 求出 LIS 数组 f，然后贪心。一算复杂度好低呀，都不用 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n log n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mord mathdefault\">n</span></span></span></span> 了</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> IO&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> getch getchar</span></span><br><span class=\"line\">    <span class=\"function\">LL <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;LL T = <span class=\"number\">0</span>,f = <span class=\"number\">1</span>;<span class=\"keyword\">char</span> c = getch();<span class=\"keyword\">while</span> ((c&lt;<span class=\"string\">'0'</span>||c&gt;<span class=\"string\">'9'</span>)&amp;&amp;c!=<span class=\"string\">'-'</span>) c=getch();<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>,c=getch();<span class=\"keyword\">while</span> (c&gt;=<span class=\"string\">'0'</span>&amp;&amp;c&lt;=<span class=\"string\">'9'</span>)&#123;T=((T&lt;&lt;<span class=\"number\">1</span>)+(T&lt;&lt;<span class=\"number\">3</span>))+c<span class=\"number\">-48</span>;c=getch();&#125;<span class=\"keyword\">return</span> T*f;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(LL x)</span></span>&#123;<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>),x = -x;<span class=\"keyword\">if</span> (x&gt;=<span class=\"number\">10</span>) <span class=\"built_in\">write</span>(x / <span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>((x % <span class=\"number\">10</span>)+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> IO;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">10005</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,a[maxn],f[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> last = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f[i] &gt;= x &amp;&amp; a[i] &gt; last)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,a[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x!=<span class=\"number\">1</span>) pc(<span class=\"string\">''</span>);</span><br><span class=\"line\">            last = a[i];</span><br><span class=\"line\">            x--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!x) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        a[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=n;i&gt;=<span class=\"number\">1</span>;i--)&#123;</span><br><span class=\"line\">        f[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i] &lt; a[j])</span><br><span class=\"line\">                f[i] = <span class=\"built_in\">max</span>(f[i],f[j]);</span><br><span class=\"line\">        f[i]++;</span><br><span class=\"line\">        len = <span class=\"built_in\">max</span>(len,f[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Q = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (Q--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mark = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x&gt;len) <span class=\"built_in\">puts</span>(<span class=\"string\">\"Impossible\"</span>); <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            solve(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"题意\"><a class=\"markdownIt-Anchor\" href=\"#题意\"></a> 题意</h4><p>​\t　　对于一个给定的S={a1,a2,a3,…,an},若有P={ax1,ax2,ax3,…,axm},满足(x1 &lt; x2 &lt; … &lt; xm)且（ ax1 &lt; ax2 &lt; … &lt; axm)。那么就称P为S的一个上升序列。如果有多个P满足条件，那么我们想求字典序最小的那个。任务给出S序列，给出若干询问。对于第i个询问，求出长度为Li的上升序列，如有多个，求出字典序最小的那个（即首先x1最小，如果不唯一，再看x2最小……），如果不存在长度为Li的上升序列，则打印Impossible.</p>","more":"<h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\"></a> 题解</h4><p>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:.10903em\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>求出LIS数组f，然后贪心。一算复杂度好低呀，都不用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n log n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.8888799999999999em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">g</span><span class=\"mord mathdefault\">n</span></span></span></span>了</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> IO&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> getch getchar</span></span><br><span class=\"line\">    <span class=\"function\">LL <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;LL T = <span class=\"number\">0</span>,f = <span class=\"number\">1</span>;<span class=\"keyword\">char</span> c = getch();<span class=\"keyword\">while</span> ((c&lt;<span class=\"string\">'0'</span>||c&gt;<span class=\"string\">'9'</span>)&amp;&amp;c!=<span class=\"string\">'-'</span>) c=getch();<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>,c=getch();<span class=\"keyword\">while</span> (c&gt;=<span class=\"string\">'0'</span>&amp;&amp;c&lt;=<span class=\"string\">'9'</span>)&#123;T=((T&lt;&lt;<span class=\"number\">1</span>)+(T&lt;&lt;<span class=\"number\">3</span>))+c<span class=\"number\">-48</span>;c=getch();&#125;<span class=\"keyword\">return</span> T*f;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(LL x)</span></span>&#123;<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>),x = -x;<span class=\"keyword\">if</span> (x&gt;=<span class=\"number\">10</span>) <span class=\"built_in\">write</span>(x / <span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>((x % <span class=\"number\">10</span>)+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> IO;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">10005</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,a[maxn],f[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> last = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f[i] &gt;= x &amp;&amp; a[i] &gt; last)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,a[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x!=<span class=\"number\">1</span>) pc(<span class=\"string\">' '</span>);</span><br><span class=\"line\">            last = a[i];</span><br><span class=\"line\">            x--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!x) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        a[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=n;i&gt;=<span class=\"number\">1</span>;i--)&#123;</span><br><span class=\"line\">        f[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i] &lt; a[j])</span><br><span class=\"line\">                f[i] = <span class=\"built_in\">max</span>(f[i],f[j]);</span><br><span class=\"line\">        f[i]++;</span><br><span class=\"line\">        len = <span class=\"built_in\">max</span>(len,f[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Q = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (Q--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mark = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x&gt;len) <span class=\"built_in\">puts</span>(<span class=\"string\">\"Impossible\"</span>); <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            solve(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"BZOJ1048 [HAOI2007] 分割矩阵","_content":"\n#### 题面\n\n​\thttp://www.lydsy.com/JudgeOnline/problem.php?id=1048\n\n<!--more-->\n\n#### 题解\n\n ![img](https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D385/sign=7cf5a4e2caea15ce45eee60183013a25/b90e7bec54e736d150e0466f98504fc2d46269e2.jpg)\n\n而题目求标准差，要$sqrt$一下。\n\n考虑预处理出前缀和，这样可以O(1)算内部数值\n\n用$f[i][j][k][l][m]$表示左上角是$[i][j]$，右下角是$[k][l]$，当前这一个弄成m个矩形，最小的方差是多少。\n\n记忆化DFS即可。\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\ntypedef long long LL;\nnamespace IO{\n\t#define getch getchar\n\tLL read(){LL T = 0,f = 1;char c = getch();while ((c<'0'||c>'9')&&c!='-') c=getch();if(c=='-')f=-1,c=getch();while (c>='0'&&c<='9'){T=((T<<1)+(T<<3))+c-48;c=getch();}return T*f;}\n\tinline void write(LL x){if(x < 0) putchar('0'),x = -x;if (x>=10) write(x / 10);putchar((x % 10)+'0');}\n};\n#define pc putchar\nusing namespace IO;\ndouble f[15][15][15][15][15];\ndouble s[15][15];\nint a,b,n;\ndouble ave;\ndouble dfs(int a,int b,int c,int d,int e){\n\tdouble &res = f[a][b][c][d][e];\n\tif (res != -1) return res;\n\tdouble sum = s[c][d] - s[c][b-1] - s[a-1][d] + s[a-1][b-1];\n//\tprintf(\"[%d,%d][%d,%d] %lf\\n\",a,b,c,d,sum);\n\tif (e == 1) return res = (sum - ave) * (sum - ave);\n\tres = 1e10;\n\tfor (int i=a;i<c;i++)\n\t\tfor (int k=1;k<e;k++)\n\t\t\tres = min(res,dfs(a,b,i,d,k) + dfs(i+1,b,c,d,e-k));\n\tfor (int i=b;i<d;i++)\n\t\tfor (int k=1;k<e;k++)\n\t\t\tres = min(res,dfs(a,b,c,i,k) + dfs(a,i+1,c,d,e-k));\n\treturn res;\n}\n\n#define rep(i,a,b) for(int i=a;i<=b;i++)\nint main(){\n\ta = read(),b = read(),n = read();\n\tmemset(s,0,sizeof(s));\n\tfor (int i=1;i<=a;i++)\n\t\tfor (int j=1;j<=b;j++)\n\t\t\ts[i][j] = read() + s[i-1][j] + s[i][j-1] - s[i-1][j-1];\n\trep(i,0,11)rep(j,0,11)rep(k,0,11)rep(l,0,11)rep(m,0,11) f[i][j][k][l][m] = -1;\n\tave = (double)s[a][b] / n;\n\tprintf(\"%.2lf\\n\",sqrt(dfs(1,1,a,b,n) / n));\n\treturn 0;\n}\n```\n\n","source":"_posts/BZOJ1048 [HAOI2007]分割矩阵.md","raw":"---\ntitle: BZOJ1048 [HAOI2007]分割矩阵\ntags:\n - BZOJ\n - DP\n---\n\n#### 题面\n\n​\thttp://www.lydsy.com/JudgeOnline/problem.php?id=1048\n\n<!--more-->\n\n#### 题解\n\n ![img](https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D385/sign=7cf5a4e2caea15ce45eee60183013a25/b90e7bec54e736d150e0466f98504fc2d46269e2.jpg)\n\n而题目求标准差，要$sqrt$一下。\n\n考虑预处理出前缀和，这样可以O(1)算内部数值\n\n用$f[i][j][k][l][m]$表示左上角是$[i][j]$，右下角是$[k][l]$，当前这一个弄成m个矩形，最小的方差是多少。\n\n记忆化DFS即可。\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\ntypedef long long LL;\nnamespace IO{\n\t#define getch getchar\n\tLL read(){LL T = 0,f = 1;char c = getch();while ((c<'0'||c>'9')&&c!='-') c=getch();if(c=='-')f=-1,c=getch();while (c>='0'&&c<='9'){T=((T<<1)+(T<<3))+c-48;c=getch();}return T*f;}\n\tinline void write(LL x){if(x < 0) putchar('0'),x = -x;if (x>=10) write(x / 10);putchar((x % 10)+'0');}\n};\n#define pc putchar\nusing namespace IO;\ndouble f[15][15][15][15][15];\ndouble s[15][15];\nint a,b,n;\ndouble ave;\ndouble dfs(int a,int b,int c,int d,int e){\n\tdouble &res = f[a][b][c][d][e];\n\tif (res != -1) return res;\n\tdouble sum = s[c][d] - s[c][b-1] - s[a-1][d] + s[a-1][b-1];\n//\tprintf(\"[%d,%d][%d,%d] %lf\\n\",a,b,c,d,sum);\n\tif (e == 1) return res = (sum - ave) * (sum - ave);\n\tres = 1e10;\n\tfor (int i=a;i<c;i++)\n\t\tfor (int k=1;k<e;k++)\n\t\t\tres = min(res,dfs(a,b,i,d,k) + dfs(i+1,b,c,d,e-k));\n\tfor (int i=b;i<d;i++)\n\t\tfor (int k=1;k<e;k++)\n\t\t\tres = min(res,dfs(a,b,c,i,k) + dfs(a,i+1,c,d,e-k));\n\treturn res;\n}\n\n#define rep(i,a,b) for(int i=a;i<=b;i++)\nint main(){\n\ta = read(),b = read(),n = read();\n\tmemset(s,0,sizeof(s));\n\tfor (int i=1;i<=a;i++)\n\t\tfor (int j=1;j<=b;j++)\n\t\t\ts[i][j] = read() + s[i-1][j] + s[i][j-1] - s[i-1][j-1];\n\trep(i,0,11)rep(j,0,11)rep(k,0,11)rep(l,0,11)rep(m,0,11) f[i][j][k][l][m] = -1;\n\tave = (double)s[a][b] / n;\n\tprintf(\"%.2lf\\n\",sqrt(dfs(1,1,a,b,n) / n));\n\treturn 0;\n}\n```\n\n","slug":"BZOJ1048 [HAOI2007]分割矩阵","published":1,"date":"2021-08-28T13:04:29.782Z","updated":"2021-08-28T13:04:29.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvspz5c000309nubdf5duu5","content":"<h4 id=\"题面\"><a class=\"markdownIt-Anchor\" href=\"# 题面\"></a> 题面 </h4><p>​\t<a href=\"http://www.lydsy.com/JudgeOnline/problem.php?id=1048\" target=\"_blank\" rel=\"noopener\">http://www.lydsy.com/JudgeOnline/problem.php?id=1048</a></p><a id=\"more\"></a><h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"# 题解\"></a> 题解</h4><p><img src=\"https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D385/sign=7cf5a4e2caea15ce45eee60183013a25/b90e7bec54e736d150e0466f98504fc2d46269e2.jpg\" alt=\"img\"></p><p> 而题目求标准差，要 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>q</mi><mi>r</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">sqrt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.80952em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">t</span></span></span></span> 一下。</p><p>考虑预处理出前缀和，这样可以 O(1)算内部数值 </p><p> 用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>l</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>m</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[i][j][k][l][m]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">]</span></span></span></span>表示左上角是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[i][j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span></span></span></span>，右下角是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>l</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[k][l]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mclose\">]</span></span></span></span>，当前这一个弄成 m 个矩形，最小的方差是多少。</p><p> 记忆化 DFS 即可。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> IO&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> getch getchar</span></span><br><span class=\"line\">    <span class=\"function\">LL <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;LL T = <span class=\"number\">0</span>,f = <span class=\"number\">1</span>;<span class=\"keyword\">char</span> c = getch();<span class=\"keyword\">while</span> ((c&lt;<span class=\"string\">'0'</span>||c&gt;<span class=\"string\">'9'</span>)&amp;&amp;c!=<span class=\"string\">'-'</span>) c=getch();<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>,c=getch();<span class=\"keyword\">while</span> (c&gt;=<span class=\"string\">'0'</span>&amp;&amp;c&lt;=<span class=\"string\">'9'</span>)&#123;T=((T&lt;&lt;<span class=\"number\">1</span>)+(T&lt;&lt;<span class=\"number\">3</span>))+c<span class=\"number\">-48</span>;c=getch();&#125;<span class=\"keyword\">return</span> T*f;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(LL x)</span></span>&#123;<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>),x = -x;<span class=\"keyword\">if</span> (x&gt;=<span class=\"number\">10</span>) <span class=\"built_in\">write</span>(x / <span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>((x % <span class=\"number\">10</span>)+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> IO;</span><br><span class=\"line\"><span class=\"keyword\">double</span> f[<span class=\"number\">15</span>][<span class=\"number\">15</span>][<span class=\"number\">15</span>][<span class=\"number\">15</span>][<span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"keyword\">double</span> s[<span class=\"number\">15</span>][<span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> a,b,n;</span><br><span class=\"line\"><span class=\"keyword\">double</span> ave;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c,<span class=\"keyword\">int</span> d,<span class=\"keyword\">int</span> e)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> &amp;res = f[a][b][c][d][e];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res != <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> sum = s[c][d] - s[c][b<span class=\"number\">-1</span>] - s[a<span class=\"number\">-1</span>][d] + s[a<span class=\"number\">-1</span>][b<span class=\"number\">-1</span>];</span><br><span class=\"line\"><span class=\"comment\">//\tprintf(\"[%d,%d][%d,%d] %lf\\n\",a,b,c,d,sum);</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> res = (sum - ave) * (sum - ave);</span><br><span class=\"line\">    res = <span class=\"number\">1e10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=a;i&lt;c;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;e;k++)</span><br><span class=\"line\">            res = <span class=\"built_in\">min</span>(res,dfs(a,b,i,d,k) + dfs(i+<span class=\"number\">1</span>,b,c,d,e-k));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=b;i&lt;d;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;e;k++)</span><br><span class=\"line\">            res = <span class=\"built_in\">min</span>(res,dfs(a,b,c,i,k) + dfs(a,i+<span class=\"number\">1</span>,c,d,e-k));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    a = <span class=\"built_in\">read</span>(),b = <span class=\"built_in\">read</span>(),n = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(s,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(s));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=a;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=b;j++)</span><br><span class=\"line\">            s[i][j] = <span class=\"built_in\">read</span>() + s[i<span class=\"number\">-1</span>][j] + s[i][j<span class=\"number\">-1</span>] - s[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">    rep(i,<span class=\"number\">0</span>,<span class=\"number\">11</span>)rep(j,<span class=\"number\">0</span>,<span class=\"number\">11</span>)rep(k,<span class=\"number\">0</span>,<span class=\"number\">11</span>)rep(l,<span class=\"number\">0</span>,<span class=\"number\">11</span>)rep(m,<span class=\"number\">0</span>,<span class=\"number\">11</span>) f[i][j][k][l][m] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    ave = (<span class=\"keyword\">double</span>)s[a][b] / n;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.2lf\\n\"</span>,<span class=\"built_in\">sqrt</span>(dfs(<span class=\"number\">1</span>,<span class=\"number\">1</span>,a,b,n) / n));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"题面\"><a class=\"markdownIt-Anchor\" href=\"#题面\"></a> 题面</h4><p>​\t<a href=\"http://www.lydsy.com/JudgeOnline/problem.php?id=1048\" target=\"_blank\" rel=\"noopener\">http://www.lydsy.com/JudgeOnline/problem.php?id=1048</a></p>","more":"<h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\"></a> 题解</h4><p><img src=\"https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D385/sign=7cf5a4e2caea15ce45eee60183013a25/b90e7bec54e736d150e0466f98504fc2d46269e2.jpg\" alt=\"img\"></p><p>而题目求标准差，要<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>q</mi><mi>r</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">sqrt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.80952em;vertical-align:-.19444em\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">q</span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">r</span><span class=\"mord mathdefault\">t</span></span></span></span>一下。</p><p>考虑预处理出前缀和，这样可以O(1)算内部数值</p><p>用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>l</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>m</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[i][j][k][l][m]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">]</span></span></span></span>表示左上角是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[i][j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span></span></span></span>，右下角是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>l</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[k][l]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.03148em\">k</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.01968em\">l</span><span class=\"mclose\">]</span></span></span></span>，当前这一个弄成m个矩形，最小的方差是多少。</p><p>记忆化DFS即可。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> IO&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> getch getchar</span></span><br><span class=\"line\">    <span class=\"function\">LL <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;LL T = <span class=\"number\">0</span>,f = <span class=\"number\">1</span>;<span class=\"keyword\">char</span> c = getch();<span class=\"keyword\">while</span> ((c&lt;<span class=\"string\">'0'</span>||c&gt;<span class=\"string\">'9'</span>)&amp;&amp;c!=<span class=\"string\">'-'</span>) c=getch();<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>,c=getch();<span class=\"keyword\">while</span> (c&gt;=<span class=\"string\">'0'</span>&amp;&amp;c&lt;=<span class=\"string\">'9'</span>)&#123;T=((T&lt;&lt;<span class=\"number\">1</span>)+(T&lt;&lt;<span class=\"number\">3</span>))+c<span class=\"number\">-48</span>;c=getch();&#125;<span class=\"keyword\">return</span> T*f;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(LL x)</span></span>&#123;<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>),x = -x;<span class=\"keyword\">if</span> (x&gt;=<span class=\"number\">10</span>) <span class=\"built_in\">write</span>(x / <span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>((x % <span class=\"number\">10</span>)+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> IO;</span><br><span class=\"line\"><span class=\"keyword\">double</span> f[<span class=\"number\">15</span>][<span class=\"number\">15</span>][<span class=\"number\">15</span>][<span class=\"number\">15</span>][<span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"keyword\">double</span> s[<span class=\"number\">15</span>][<span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> a,b,n;</span><br><span class=\"line\"><span class=\"keyword\">double</span> ave;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c,<span class=\"keyword\">int</span> d,<span class=\"keyword\">int</span> e)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> &amp;res = f[a][b][c][d][e];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res != <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> sum = s[c][d] - s[c][b<span class=\"number\">-1</span>] - s[a<span class=\"number\">-1</span>][d] + s[a<span class=\"number\">-1</span>][b<span class=\"number\">-1</span>];</span><br><span class=\"line\"><span class=\"comment\">//\tprintf(\"[%d,%d][%d,%d] %lf\\n\",a,b,c,d,sum);</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> res = (sum - ave) * (sum - ave);</span><br><span class=\"line\">    res = <span class=\"number\">1e10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=a;i&lt;c;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;e;k++)</span><br><span class=\"line\">            res = <span class=\"built_in\">min</span>(res,dfs(a,b,i,d,k) + dfs(i+<span class=\"number\">1</span>,b,c,d,e-k));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=b;i&lt;d;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;e;k++)</span><br><span class=\"line\">            res = <span class=\"built_in\">min</span>(res,dfs(a,b,c,i,k) + dfs(a,i+<span class=\"number\">1</span>,c,d,e-k));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    a = <span class=\"built_in\">read</span>(),b = <span class=\"built_in\">read</span>(),n = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(s,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(s));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=a;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=b;j++)</span><br><span class=\"line\">            s[i][j] = <span class=\"built_in\">read</span>() + s[i<span class=\"number\">-1</span>][j] + s[i][j<span class=\"number\">-1</span>] - s[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">    rep(i,<span class=\"number\">0</span>,<span class=\"number\">11</span>)rep(j,<span class=\"number\">0</span>,<span class=\"number\">11</span>)rep(k,<span class=\"number\">0</span>,<span class=\"number\">11</span>)rep(l,<span class=\"number\">0</span>,<span class=\"number\">11</span>)rep(m,<span class=\"number\">0</span>,<span class=\"number\">11</span>) f[i][j][k][l][m] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    ave = (<span class=\"keyword\">double</span>)s[a][b] / n;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.2lf\\n\"</span>,<span class=\"built_in\">sqrt</span>(dfs(<span class=\"number\">1</span>,<span class=\"number\">1</span>,a,b,n) / n));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"BZOJ1050 [HAOI2006] 旅行 comf","_content":"\n#### 题面\n\n​\t求S到T的路径最大边比最小边的最小值。——可以重复走呐\n\n<!--more-->\n\n#### 题解\n\n​\t排序之后，考虑暴力枚举最小边，最大边直接加进去，到S和T联通了，那么就update答案。\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\ntypedef long long LL;\nnamespace IO{\n\t#define getch getchar\n\tint read(){int T = 0,f = 1;char c = getch();while ((c<'0'||c>'9')&&c!='-') c=getch();if(c=='-')f=-1,c=getch();while (c>='0'&&c<='9'){T=((T<<1)+(T<<3))+c-48;c=getch();}return T*f;}\n\tinline void write(int x){if(x < 0) putchar('0'),x = -x;if (x>=10) write(x / 10);putchar((x % 10)+'0');}\n};\n#define pc putchar\nusing namespace IO;\nconst int maxn = 505;\nconst int maxm = 5005;\nstruct Edge{\n\tint x,y,v;\n\tbool operator < (const Edge &a) const{\n\t\treturn v < a.v;\n\t}\n}edge[maxm];\nint Max,Min,n,m,fa[maxn],rank[maxn];\nint find(int x){return fa[x]==x?x:fa[x]=find(fa[x]);}\nvoid UNION(int x,int y){\n\tif (rank[x] > rank[y]) swap(x,y);\n\tfa[x] = y;\n\tif (rank[x]==rank[y]) rank[y]++;\n}\nint gcd(int a,int b){return !b?a:gcd(b,a%b);}\nint s,t;\nint main(){\n\tn = read(); m = read();\n\tfor (int i=1;i<=m;i++)\n\t\tedge[i].x = read(),edge[i].y = read(),edge[i].v = read();\n\ts=read(),t=read();\n\tsort(edge+1,edge+1+m);\n\tMax = Min = -1;\n\tfor (int i=1;i<=m;i++){\n\t\tfor (int j=1;j<=n;j++) fa[j] = j;\n\t\tfor (int j=i;j<=m;j++){\n\t\t\tint x = find(edge[j].x),y = find(edge[j].y);\n\t\t\tif (x==y) continue;\n\t\t\tUNION(x,y);\n\t\t\tif (find(s)==find(t)){\n\t\t\t\tif (Max==-1 || (double)edge[j].v / edge[i].v < (double)Max / Min){\n\t\t\t\t\tMax = edge[j].v;\n\t\t\t\t\tMin = edge[i].v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (Max==-1) puts(\"IMPOSSIBLE\"); else{\n\t\tint g = gcd(Max,Min);\n\t\tif (Min == g) write(Max/g); else\n\t\t\twrite(Max / g),pc('/'),write(Min / g);\n\t}\n\treturn 0;\n}\n```\n\n","source":"_posts/BZOJ1050 [HAOI2006]旅行comf.md","raw":"---\ntitle: BZOJ1050 [HAOI2006]旅行comf\ntags:\n - BZOJ\n - 并查集\n---\n\n#### 题面\n\n​\t求S到T的路径最大边比最小边的最小值。——可以重复走呐\n\n<!--more-->\n\n#### 题解\n\n​\t排序之后，考虑暴力枚举最小边，最大边直接加进去，到S和T联通了，那么就update答案。\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\ntypedef long long LL;\nnamespace IO{\n\t#define getch getchar\n\tint read(){int T = 0,f = 1;char c = getch();while ((c<'0'||c>'9')&&c!='-') c=getch();if(c=='-')f=-1,c=getch();while (c>='0'&&c<='9'){T=((T<<1)+(T<<3))+c-48;c=getch();}return T*f;}\n\tinline void write(int x){if(x < 0) putchar('0'),x = -x;if (x>=10) write(x / 10);putchar((x % 10)+'0');}\n};\n#define pc putchar\nusing namespace IO;\nconst int maxn = 505;\nconst int maxm = 5005;\nstruct Edge{\n\tint x,y,v;\n\tbool operator < (const Edge &a) const{\n\t\treturn v < a.v;\n\t}\n}edge[maxm];\nint Max,Min,n,m,fa[maxn],rank[maxn];\nint find(int x){return fa[x]==x?x:fa[x]=find(fa[x]);}\nvoid UNION(int x,int y){\n\tif (rank[x] > rank[y]) swap(x,y);\n\tfa[x] = y;\n\tif (rank[x]==rank[y]) rank[y]++;\n}\nint gcd(int a,int b){return !b?a:gcd(b,a%b);}\nint s,t;\nint main(){\n\tn = read(); m = read();\n\tfor (int i=1;i<=m;i++)\n\t\tedge[i].x = read(),edge[i].y = read(),edge[i].v = read();\n\ts=read(),t=read();\n\tsort(edge+1,edge+1+m);\n\tMax = Min = -1;\n\tfor (int i=1;i<=m;i++){\n\t\tfor (int j=1;j<=n;j++) fa[j] = j;\n\t\tfor (int j=i;j<=m;j++){\n\t\t\tint x = find(edge[j].x),y = find(edge[j].y);\n\t\t\tif (x==y) continue;\n\t\t\tUNION(x,y);\n\t\t\tif (find(s)==find(t)){\n\t\t\t\tif (Max==-1 || (double)edge[j].v / edge[i].v < (double)Max / Min){\n\t\t\t\t\tMax = edge[j].v;\n\t\t\t\t\tMin = edge[i].v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (Max==-1) puts(\"IMPOSSIBLE\"); else{\n\t\tint g = gcd(Max,Min);\n\t\tif (Min == g) write(Max/g); else\n\t\t\twrite(Max / g),pc('/'),write(Min / g);\n\t}\n\treturn 0;\n}\n```\n\n","slug":"BZOJ1050 [HAOI2006]旅行comf","published":1,"date":"2021-08-28T13:04:29.785Z","updated":"2021-08-28T13:04:29.785Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvspz5e000509nugpug5k2y","content":"<h4 id=\"题面\"><a class=\"markdownIt-Anchor\" href=\"# 题面\"></a> 题面 </h4><p>​\t求 S 到 T 的路径最大边比最小边的最小值。——可以重复走呐 </p><a id=\"more\"></a><h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"# 题解\"></a> 题解 </h4><p>​\t排序之后，考虑暴力枚举最小边，最大边直接加进去，到 S 和 T 联通了，那么就 update 答案。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> IO&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> getch getchar</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">int</span> T = <span class=\"number\">0</span>,f = <span class=\"number\">1</span>;<span class=\"keyword\">char</span> c = getch();<span class=\"keyword\">while</span> ((c&lt;<span class=\"string\">'0'</span>||c&gt;<span class=\"string\">'9'</span>)&amp;&amp;c!=<span class=\"string\">'-'</span>) c=getch();<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>,c=getch();<span class=\"keyword\">while</span> (c&gt;=<span class=\"string\">'0'</span>&amp;&amp;c&lt;=<span class=\"string\">'9'</span>)&#123;T=((T&lt;&lt;<span class=\"number\">1</span>)+(T&lt;&lt;<span class=\"number\">3</span>))+c<span class=\"number\">-48</span>;c=getch();&#125;<span class=\"keyword\">return</span> T*f;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>),x = -x;<span class=\"keyword\">if</span> (x&gt;=<span class=\"number\">10</span>) <span class=\"built_in\">write</span>(x / <span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>((x % <span class=\"number\">10</span>)+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> IO;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">505</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = <span class=\"number\">5005</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y,v;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> Edge &amp;a) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v &lt; a.v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;edge[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> Max,Min,n,m,fa[maxn],rank[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> fa[x]==x?x:fa[x]=<span class=\"built_in\">find</span>(fa[x]);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">UNION</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rank[x] &gt; rank[y]) swap(x,y);</span><br><span class=\"line\">    fa[x] = y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rank[x]==rank[y]) rank[y]++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;<span class=\"keyword\">return</span> !b?a:gcd(b,a%b);&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> s,t;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>(); m = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)</span><br><span class=\"line\">        edge[i].x = <span class=\"built_in\">read</span>(),edge[i].y = <span class=\"built_in\">read</span>(),edge[i].v = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    s=<span class=\"built_in\">read</span>(),t=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    sort(edge+<span class=\"number\">1</span>,edge+<span class=\"number\">1</span>+m);</span><br><span class=\"line\">    Max = Min = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++) fa[j] = j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=i;j&lt;=m;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = <span class=\"built_in\">find</span>(edge[j].x),y = <span class=\"built_in\">find</span>(edge[j].y);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x==y) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            UNION(x,y);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(s)==<span class=\"built_in\">find</span>(t))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Max==<span class=\"number\">-1</span> || (<span class=\"keyword\">double</span>)edge[j].v / edge[i].v &lt; (<span class=\"keyword\">double</span>)Max / Min)&#123;</span><br><span class=\"line\">                    Max = edge[j].v;</span><br><span class=\"line\">                    Min = edge[i].v;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Max==<span class=\"number\">-1</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">\"IMPOSSIBLE\"</span>); <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> g = gcd(Max,Min);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Min == g) <span class=\"built_in\">write</span>(Max/g); <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">write</span>(Max / g),pc(<span class=\"string\">'/'</span>),<span class=\"built_in\">write</span>(Min / g);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"题面\"><a class=\"markdownIt-Anchor\" href=\"#题面\"></a> 题面</h4><p>​\t求S到T的路径最大边比最小边的最小值。——可以重复走呐</p>","more":"<h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\"></a> 题解</h4><p>​\t排序之后，考虑暴力枚举最小边，最大边直接加进去，到S和T联通了，那么就update答案。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> IO&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> getch getchar</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">int</span> T = <span class=\"number\">0</span>,f = <span class=\"number\">1</span>;<span class=\"keyword\">char</span> c = getch();<span class=\"keyword\">while</span> ((c&lt;<span class=\"string\">'0'</span>||c&gt;<span class=\"string\">'9'</span>)&amp;&amp;c!=<span class=\"string\">'-'</span>) c=getch();<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>,c=getch();<span class=\"keyword\">while</span> (c&gt;=<span class=\"string\">'0'</span>&amp;&amp;c&lt;=<span class=\"string\">'9'</span>)&#123;T=((T&lt;&lt;<span class=\"number\">1</span>)+(T&lt;&lt;<span class=\"number\">3</span>))+c<span class=\"number\">-48</span>;c=getch();&#125;<span class=\"keyword\">return</span> T*f;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>),x = -x;<span class=\"keyword\">if</span> (x&gt;=<span class=\"number\">10</span>) <span class=\"built_in\">write</span>(x / <span class=\"number\">10</span>);<span class=\"built_in\">putchar</span>((x % <span class=\"number\">10</span>)+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> IO;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">505</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = <span class=\"number\">5005</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y,v;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> Edge &amp;a) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v &lt; a.v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;edge[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> Max,Min,n,m,fa[maxn],rank[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> fa[x]==x?x:fa[x]=<span class=\"built_in\">find</span>(fa[x]);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">UNION</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rank[x] &gt; rank[y]) swap(x,y);</span><br><span class=\"line\">    fa[x] = y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rank[x]==rank[y]) rank[y]++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;<span class=\"keyword\">return</span> !b?a:gcd(b,a%b);&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> s,t;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>(); m = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)</span><br><span class=\"line\">        edge[i].x = <span class=\"built_in\">read</span>(),edge[i].y = <span class=\"built_in\">read</span>(),edge[i].v = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    s=<span class=\"built_in\">read</span>(),t=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    sort(edge+<span class=\"number\">1</span>,edge+<span class=\"number\">1</span>+m);</span><br><span class=\"line\">    Max = Min = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++) fa[j] = j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=i;j&lt;=m;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = <span class=\"built_in\">find</span>(edge[j].x),y = <span class=\"built_in\">find</span>(edge[j].y);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x==y) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            UNION(x,y);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(s)==<span class=\"built_in\">find</span>(t))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Max==<span class=\"number\">-1</span> || (<span class=\"keyword\">double</span>)edge[j].v / edge[i].v &lt; (<span class=\"keyword\">double</span>)Max / Min)&#123;</span><br><span class=\"line\">                    Max = edge[j].v;</span><br><span class=\"line\">                    Min = edge[i].v;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Max==<span class=\"number\">-1</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">\"IMPOSSIBLE\"</span>); <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> g = gcd(Max,Min);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Min == g) <span class=\"built_in\">write</span>(Max/g); <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">write</span>(Max / g),pc(<span class=\"string\">'/'</span>),<span class=\"built_in\">write</span>(Min / g);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"BZOJ1061 [Noi2008] 志愿者招募","_content":"\n#### 题面\n\n​\t题意还是比较简单明了的：http://www.lydsy.com/JudgeOnline/problem.php?id=1061\n\n<!--more-->\n\n#### 题解\n\n​\t网上有人评价这题是：费用流神题，单纯性裸题。\n\n​\t然而我并不知道什么是线性规划。\n\n​\t有一种做法大概是这样的：（先假设有解）\n\n​\t对于每一种类型志愿者的人数我们设为$X[i]$\n\n​\t那么对于每一天，设可以涵盖这一天的志愿者类型分别是$f[i][1]$,$f[i][2]$……\n\n​\t那么我们要满足对于所有$\\sum_{i=1}^{f[i]存在} X[f[i]]   >= A[i]$\n\n​\t不妨假设总是存在一个$y[i]$，满足$y[i]>=0$，并且\n\n​\t$\\sum_{j=1}^{f[i][j]存在} X[f[i][j]]  -y[i] = A[i]$\n\n​\t作差分(A[0]=A[n+1]=0)\n\n​\t得到了下面的式子：\t\n$$\n\\sum_{j=1}^{f[i][j]存在} X[f[i][j]]-\\sum_{j=1}^{f[i-1][j]存在} X[f[i-1][j]]  -y[i] + y[i-1] - A[i] + A[i-1] = 0\n$$\n​\t然后抵消后每一个$X[i]$必然只会加一次，减一次。\n\nhint:流量平衡\n\n​\t设每一天（或者说每一个等式）为节点，增加源点S和汇点T。\n\n- 如果$A[i]-A[i-1]$小于0，那么S到$i$连一条容量为(A[i]-A[i-1])，费用为0的边，否则$i$到$T$连一条 容量为(A[i-1]-A[i])，费用为0的边\n\n\n- 如果一个变量X[i]在第j个等式中出现为X[i]，在第k个等式中出现为-X[i]，从顶点j向顶点k连接一条容量为∞，权值为V[i]的有向边。\n\n\n- 如果一个变量Y[i]在第j个等式中出现为Y[i]，在第k个等式中出现为-Y[i]，从顶点j向顶点k连接一条容量为∞，权值为0的有向边。\n\n然后跑最小费用最大流。因为流量平衡，并且y[i]>=0，所以有解即可。\n\n​\t[参考，from network1](https://www.byvoid.com/zhs/blog/noi-2008-employee)\n\n​\t 网上还有别的做法，貌似很好理解\n\n​\t[from network2](http://blog.csdn.net/u013368721/article/details/39900027)\n\n\n\n~~难看的~~Code\n\n```c++\n//Hello Wolrd\n//There is Special Pig Jiong in the world.\n#include<cstdio>\n#include<ctype.h>\n#include<cstring>\n#include<cstdlib>\n#include<cmath>\n#include<cstdlib>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\nconst int inf = 0x3f3f3f3f,oo = inf;\n#define pc putchar\n#define RG register\nchar __wzp[1<<15|1],*__S=__wzp+32768;\n#define gc() (__S>=__wzp+32768?(__wzp[fread(__wzp,sizeof(char),1<<15,stdin)]=EOF),*((__S=__wzp)++):*(__S++))\ninline ll read(){\n\tRG ll x=0,f=1;RG char c=gc();\n\tfor(;!isdigit(c);c=gc())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n\treturn x*f;\n}\n#define mem(x,v) memset(x,v,sizeof(x))\n#define rep(i,a,b) for(RG int i=(a);i<(b);++i)\n#define N 2005 \n#define M 50005 \nstruct Edge{\n\tint to,nxt,cap,cost;\n\tEdge(){}\n\tEdge(int to,int nxt,int cap,int cost):to(to),nxt(nxt),cap(cap),cost(cost){}\n}edge[2*M];\nint first[N],nume,n,m;\nvoid Addedge(int a,int b,int cap,int cost){\n\tedge[nume] = Edge(b,first[a],cap,cost);first[a] = nume++;\n\tedge[nume] = Edge(a,first[b],0,-cost);first[b] = nume++;\n}\nint dis[N],vis[N],pre[N];\nint S,T,a[N];\nbool spfa(){\n\tqueue<int> q;\n\tmem(dis,0x3f);\n\tmem(vis,false);\n\tmem(pre,-1);\n\tdis[S]=0;\n\tvis[S]=true;\n\tq.push(S);\n\twhile(!q.empty()){\n\t\tint u = q.front();q.pop();\n\t\tvis[u] = false;\n\t\tfor (int e=first[u];~e;e=edge[e].nxt){\n\t\t\tint v = edge[e].to;\n\t\t\tif(edge[e].cap&&dis[v]>dis[u]+edge[e].cost){\n\t\t\t\tdis[v]=dis[u]+edge[e].cost;\n\t\t\t\tpre[v] = e;\n\t\t\t\tif(!vis[v]){\n\t\t\t\t\tq.push(v);\n\t\t\t\t\tvis[v]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[T]!=inf;\n}\nint mcmf(){\n\tint minflow,maxflow=0,mincost=0;\n\twhile(spfa()){\n\t\tminflow = inf;\n\t\tfor(int i=pre[T];~i;i=pre[edge[i^1].to])\n\t\t\tminflow = min(minflow,edge[i].cap);\n\t\tfor(int i=pre[T];~i;i=pre[edge[i^1].to])\n\t\t\tedge[i].cap -= minflow,\n\t\t\tedge[i^1].cap += minflow;\n\t\tmincost += minflow * dis[T];\n\t\tmaxflow += minflow;\n\t}\n\treturn mincost;\n}\nint main(){\n\tmem(first,-1);nume = 0;\n\tn = read(),m = read();\n\tS = n + 2;T = S + 1;\n\tfor(int i=1;i<=n;i++) a[i] = read();\n\tfor(int i=1;i<=m;i++){\n\t\tint s = read(),t = read(),c = read();\n\t\tAddedge(s,t+1,inf,c);\n\t}\n\ta[0]=a[n+1]=0;\n\tfor(int i=1;i<=n+1;i++){\n\t\tif(a[i]-a[i-1]>=0)\n\t\t\tAddedge(S,i,a[i]-a[i-1],0);\n\t\telse\n\t\t\tAddedge(i,T,a[i-1]-a[i],0);\n\t}\n\tfor(int i=1;i<=n;i++) Addedge(i+1,i,inf,0);\n\tprintf(\"%d\\n\",mcmf());\n\treturn 0;\n}\n```\n\n","source":"_posts/BZOJ1061 [Noi2008]志愿者招募.md","raw":"---\ntitle: BZOJ1061 [Noi2008]志愿者招募\ntags:\n - BZOJ\n - 网络流\n---\n\n#### 题面\n\n​\t题意还是比较简单明了的：http://www.lydsy.com/JudgeOnline/problem.php?id=1061\n\n<!--more-->\n\n#### 题解\n\n​\t网上有人评价这题是：费用流神题，单纯性裸题。\n\n​\t然而我并不知道什么是线性规划。\n\n​\t有一种做法大概是这样的：（先假设有解）\n\n​\t对于每一种类型志愿者的人数我们设为$X[i]$\n\n​\t那么对于每一天，设可以涵盖这一天的志愿者类型分别是$f[i][1]$,$f[i][2]$……\n\n​\t那么我们要满足对于所有$\\sum_{i=1}^{f[i]存在} X[f[i]]   >= A[i]$\n\n​\t不妨假设总是存在一个$y[i]$，满足$y[i]>=0$，并且\n\n​\t$\\sum_{j=1}^{f[i][j]存在} X[f[i][j]]  -y[i] = A[i]$\n\n​\t作差分(A[0]=A[n+1]=0)\n\n​\t得到了下面的式子：\t\n$$\n\\sum_{j=1}^{f[i][j]存在} X[f[i][j]]-\\sum_{j=1}^{f[i-1][j]存在} X[f[i-1][j]]  -y[i] + y[i-1] - A[i] + A[i-1] = 0\n$$\n​\t然后抵消后每一个$X[i]$必然只会加一次，减一次。\n\nhint:流量平衡\n\n​\t设每一天（或者说每一个等式）为节点，增加源点S和汇点T。\n\n- 如果$A[i]-A[i-1]$小于0，那么S到$i$连一条容量为(A[i]-A[i-1])，费用为0的边，否则$i$到$T$连一条 容量为(A[i-1]-A[i])，费用为0的边\n\n\n- 如果一个变量X[i]在第j个等式中出现为X[i]，在第k个等式中出现为-X[i]，从顶点j向顶点k连接一条容量为∞，权值为V[i]的有向边。\n\n\n- 如果一个变量Y[i]在第j个等式中出现为Y[i]，在第k个等式中出现为-Y[i]，从顶点j向顶点k连接一条容量为∞，权值为0的有向边。\n\n然后跑最小费用最大流。因为流量平衡，并且y[i]>=0，所以有解即可。\n\n​\t[参考，from network1](https://www.byvoid.com/zhs/blog/noi-2008-employee)\n\n​\t 网上还有别的做法，貌似很好理解\n\n​\t[from network2](http://blog.csdn.net/u013368721/article/details/39900027)\n\n\n\n~~难看的~~Code\n\n```c++\n//Hello Wolrd\n//There is Special Pig Jiong in the world.\n#include<cstdio>\n#include<ctype.h>\n#include<cstring>\n#include<cstdlib>\n#include<cmath>\n#include<cstdlib>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\nconst int inf = 0x3f3f3f3f,oo = inf;\n#define pc putchar\n#define RG register\nchar __wzp[1<<15|1],*__S=__wzp+32768;\n#define gc() (__S>=__wzp+32768?(__wzp[fread(__wzp,sizeof(char),1<<15,stdin)]=EOF),*((__S=__wzp)++):*(__S++))\ninline ll read(){\n\tRG ll x=0,f=1;RG char c=gc();\n\tfor(;!isdigit(c);c=gc())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n\treturn x*f;\n}\n#define mem(x,v) memset(x,v,sizeof(x))\n#define rep(i,a,b) for(RG int i=(a);i<(b);++i)\n#define N 2005 \n#define M 50005 \nstruct Edge{\n\tint to,nxt,cap,cost;\n\tEdge(){}\n\tEdge(int to,int nxt,int cap,int cost):to(to),nxt(nxt),cap(cap),cost(cost){}\n}edge[2*M];\nint first[N],nume,n,m;\nvoid Addedge(int a,int b,int cap,int cost){\n\tedge[nume] = Edge(b,first[a],cap,cost);first[a] = nume++;\n\tedge[nume] = Edge(a,first[b],0,-cost);first[b] = nume++;\n}\nint dis[N],vis[N],pre[N];\nint S,T,a[N];\nbool spfa(){\n\tqueue<int> q;\n\tmem(dis,0x3f);\n\tmem(vis,false);\n\tmem(pre,-1);\n\tdis[S]=0;\n\tvis[S]=true;\n\tq.push(S);\n\twhile(!q.empty()){\n\t\tint u = q.front();q.pop();\n\t\tvis[u] = false;\n\t\tfor (int e=first[u];~e;e=edge[e].nxt){\n\t\t\tint v = edge[e].to;\n\t\t\tif(edge[e].cap&&dis[v]>dis[u]+edge[e].cost){\n\t\t\t\tdis[v]=dis[u]+edge[e].cost;\n\t\t\t\tpre[v] = e;\n\t\t\t\tif(!vis[v]){\n\t\t\t\t\tq.push(v);\n\t\t\t\t\tvis[v]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[T]!=inf;\n}\nint mcmf(){\n\tint minflow,maxflow=0,mincost=0;\n\twhile(spfa()){\n\t\tminflow = inf;\n\t\tfor(int i=pre[T];~i;i=pre[edge[i^1].to])\n\t\t\tminflow = min(minflow,edge[i].cap);\n\t\tfor(int i=pre[T];~i;i=pre[edge[i^1].to])\n\t\t\tedge[i].cap -= minflow,\n\t\t\tedge[i^1].cap += minflow;\n\t\tmincost += minflow * dis[T];\n\t\tmaxflow += minflow;\n\t}\n\treturn mincost;\n}\nint main(){\n\tmem(first,-1);nume = 0;\n\tn = read(),m = read();\n\tS = n + 2;T = S + 1;\n\tfor(int i=1;i<=n;i++) a[i] = read();\n\tfor(int i=1;i<=m;i++){\n\t\tint s = read(),t = read(),c = read();\n\t\tAddedge(s,t+1,inf,c);\n\t}\n\ta[0]=a[n+1]=0;\n\tfor(int i=1;i<=n+1;i++){\n\t\tif(a[i]-a[i-1]>=0)\n\t\t\tAddedge(S,i,a[i]-a[i-1],0);\n\t\telse\n\t\t\tAddedge(i,T,a[i-1]-a[i],0);\n\t}\n\tfor(int i=1;i<=n;i++) Addedge(i+1,i,inf,0);\n\tprintf(\"%d\\n\",mcmf());\n\treturn 0;\n}\n```\n\n","slug":"BZOJ1061 [Noi2008]志愿者招募","published":1,"date":"2021-08-28T13:04:29.789Z","updated":"2021-08-28T13:04:29.789Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvspz5g000709nubc4x2prk","content":"<h4 id=\"题面\"><a class=\"markdownIt-Anchor\" href=\"# 题面\"></a> 题面 </h4><p>​\t题意还是比较简单明了的：<a href=\"http://www.lydsy.com/JudgeOnline/problem.php?id=1061\" target=\"_blank\" rel=\"noopener\">http://www.lydsy.com/JudgeOnline/problem.php?id=1061</a></p><a id=\"more\"></a><h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"# 题解\"></a> 题解</h4><p>​\t网上有人评价这题是：费用流神题，单纯性裸题。</p><p>​\t然而我并不知道什么是线性规划。</p><p>​\t有一种做法大概是这样的：（先假设有解）</p><p>​\t对于每一种类型志愿者的人数我们设为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">X[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07847em\">X</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span></p><p>​\t那么对于每一天，设可以涵盖这一天的志愿者类型分别是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[i][1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>2</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[i][2]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mclose\">]</span></span></span></span>……</p><p>​\t那么我们要满足对于所有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\"> 存</mi><mi mathvariant=\"normal\">在 </mi></mrow></msubsup><mi>X</mi><mo stretchy=\"false\">[</mo><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mo>=</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{i=1}^{f[i] 存在} X[f[i]] &gt;= A[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.32761em;vertical-align:-.29971000000000003em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0278999999999998em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.10764em\">f</span><span class=\"mopen mtight\">[</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mclose mtight\">]</span><span class=\"mord cjk_fallback mtight\">存 </span><span class=\"mord cjk_fallback mtight\"> 在</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29971000000000003em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07847em\">X</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span></p><p>​\t不妨假设总是存在一个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">y[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>，满足<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">y[i]&gt;=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">0</span></span></span></span>，并且</p><p>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\"> 存</mi><mi mathvariant=\"normal\">在 </mi></mrow></msubsup><mi>X</mi><mo stretchy=\"false\">[</mo><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">]</mo><mo>−</mo><mi>y</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{j=1}^{f[i][j] 存在} X[f[i][j]] -y[i] = A[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.463718em;vertical-align:-.43581800000000004em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0279em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.10764em\">f</span><span class=\"mopen mtight\">[</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mclose mtight\">]</span><span class=\"mopen mtight\">[</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mclose mtight\">]</span><span class=\"mord cjk_fallback mtight\">存 </span><span class=\"mord cjk_fallback mtight\"> 在</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.43581800000000004em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07847em\">X</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span></p><p>​\t作差分 (A[0]=A[n+1]=0)</p><p>​\t得到了下面的式子：</p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\"> 存</mi><mi mathvariant=\"normal\">在 </mi></mrow></munderover><mi>X</mi><mo stretchy=\"false\">[</mo><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">]</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\"> 存</mi><mi mathvariant=\"normal\">在 </mi></mrow></munderover><mi>X</mi><mo stretchy=\"false\">[</mo><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">]</mo><mo>−</mo><mi>y</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>y</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>−</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\sum_{j=1}^{f[i][j] 存在} X[f[i][j]]-\\sum_{j=1}^{f[i-1][j]存在} X[f[i-1][j]] -y[i] + y[i-1] - A[i] + A[i-1] = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.3747820000000006em;vertical-align:-1.4137769999999998em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.9610050000000006em\"><span style=\"top:-1.872331em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.386005em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.10764em\">f</span><span class=\"mopen mtight\">[</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mclose mtight\">]</span><span class=\"mopen mtight\">[</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mclose mtight\">]</span><span class=\"mord cjk_fallback mtight\">存 </span><span class=\"mord cjk_fallback mtight\"> 在</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4137769999999998em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07847em\">X</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.3747820000000006em;vertical-align:-1.4137769999999998em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.9610050000000006em\"><span style=\"top:-1.872331em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.386005em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.10764em\">f</span><span class=\"mopen mtight\">[</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">]</span><span class=\"mopen mtight\">[</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mclose mtight\">]</span><span class=\"mord cjk_fallback mtight\">存 </span><span class=\"mord cjk_fallback mtight\"> 在</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4137769999999998em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07847em\">X</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">0</span></span></span></span></span></p><p>​\t然后抵消后每一个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">X[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07847em\">X</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span> 必然只会加一次，减一次。</p><p>hint: 流量平衡 </p><p>​\t设每一天（或者说每一个等式）为节点，增加源点 S 和汇点 T。</p><ul><li><p> 如果 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A[i]-A[i-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> 小于 0，那么 S 到 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 连一条容量为 (A[i]-A[i-1])，费用为 0 的边，否则<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">T</span></span></span></span>连一条 容量为 (A[i-1]-A[i])，费用为 0 的边</p></li><li><p> 如果一个变量 X[i]在第 j 个等式中出现为 X[i]，在第 k 个等式中出现为 -X[i]，从顶点 j 向顶点 k 连接一条容量为∞，权值为 V[i]的有向边。</p></li><li><p>如果一个变量 Y[i]在第 j 个等式中出现为 Y[i]，在第 k 个等式中出现为 -Y[i]，从顶点 j 向顶点 k 连接一条容量为∞，权值为 0 的有向边。</p></li></ul><p>然后跑最小费用最大流。因为流量平衡，并且 y[i]&gt;=0，所以有解即可。</p><p>​\t<a href=\"https://www.byvoid.com/zhs/blog/noi-2008-employee\" target=\"_blank\" rel=\"noopener\">参考，from network1</a></p><p>​  网上还有别的做法，貌似很好理解 </p><p>​\t<a href=\"http://blog.csdn.net/u013368721/article/details/39900027\" target=\"_blank\" rel=\"noopener\">from network2</a></p><p><s> 难看的</s>Code</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Hello Wolrd</span></span><br><span class=\"line\"><span class=\"comment\">//There is Special Pig Jiong in the world.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x3f3f3f3f</span>,oo = inf;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RG register</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> __wzp[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">15</span>|<span class=\"number\">1</span>],*__S=__wzp+<span class=\"number\">32768</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc() (__S&gt;=__wzp+32768?(__wzp[fread(__wzp,sizeof(char),1&lt;&lt;15,stdin)]=EOF),*((__S=__wzp)++):*(__S++))</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RG ll x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;RG <span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(RG int i=(a);i&lt;(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 2005 </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 50005 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,nxt,cap,cost;</span><br><span class=\"line\">    Edge()&#123;&#125;</span><br><span class=\"line\">    Edge(<span class=\"keyword\">int</span> to,<span class=\"keyword\">int</span> nxt,<span class=\"keyword\">int</span> cap,<span class=\"keyword\">int</span> cost):to(to),nxt(nxt),cap(cap),cost(cost)&#123;&#125;</span><br><span class=\"line\">&#125;edge[<span class=\"number\">2</span>*M];</span><br><span class=\"line\"><span class=\"keyword\">int</span> first[N],nume,n,m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> cap,<span class=\"keyword\">int</span> cost)</span></span>&#123;</span><br><span class=\"line\">    edge[nume] = Edge(b,first[a],cap,cost);first[a] = nume++;</span><br><span class=\"line\">    edge[nume] = Edge(a,first[b],<span class=\"number\">0</span>,-cost);first[b] = nume++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[N],vis[N],pre[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> S,T,a[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">spfa</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    mem(dis,<span class=\"number\">0x3f</span>);</span><br><span class=\"line\">    mem(vis,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    mem(pre,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    dis[S]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    vis[S]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    q.push(S);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q.front();q.pop();</span><br><span class=\"line\">        vis[u] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e=first[u];~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = edge[e].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(edge[e].cap&amp;&amp;dis[v]&gt;dis[u]+edge[e].cost)&#123;</span><br><span class=\"line\">                dis[v]=dis[u]+edge[e].cost;</span><br><span class=\"line\">                pre[v] = e;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!vis[v])&#123;</span><br><span class=\"line\">                    q.push(v);</span><br><span class=\"line\">                    vis[v]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dis[T]!=inf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mcmf</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> minflow,maxflow=<span class=\"number\">0</span>,mincost=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(spfa())&#123;</span><br><span class=\"line\">        minflow = inf;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=pre[T];~i;i=pre[edge[i^<span class=\"number\">1</span>].to])</span><br><span class=\"line\">            minflow = <span class=\"built_in\">min</span>(minflow,edge[i].cap);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=pre[T];~i;i=pre[edge[i^<span class=\"number\">1</span>].to])</span><br><span class=\"line\">            edge[i].cap -= minflow,</span><br><span class=\"line\">            edge[i^<span class=\"number\">1</span>].cap += minflow;</span><br><span class=\"line\">        mincost += minflow * dis[T];</span><br><span class=\"line\">        maxflow += minflow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mincost;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>(),m = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    S = n + <span class=\"number\">2</span>;T = S + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) a[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s = <span class=\"built_in\">read</span>(),t = <span class=\"built_in\">read</span>(),c = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        Addedge(s,t+<span class=\"number\">1</span>,inf,c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a[<span class=\"number\">0</span>]=a[n+<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n+<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i]-a[i<span class=\"number\">-1</span>]&gt;=<span class=\"number\">0</span>)</span><br><span class=\"line\">            Addedge(S,i,a[i]-a[i<span class=\"number\">-1</span>],<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            Addedge(i,T,a[i<span class=\"number\">-1</span>]-a[i],<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) Addedge(i+<span class=\"number\">1</span>,i,inf,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,mcmf());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"题面\"><a class=\"markdownIt-Anchor\" href=\"#题面\"></a> 题面</h4><p>​\t题意还是比较简单明了的：<a href=\"http://www.lydsy.com/JudgeOnline/problem.php?id=1061\" target=\"_blank\" rel=\"noopener\">http://www.lydsy.com/JudgeOnline/problem.php?id=1061</a></p>","more":"<h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\"></a> 题解</h4><p>​\t网上有人评价这题是：费用流神题，单纯性裸题。</p><p>​\t然而我并不知道什么是线性规划。</p><p>​\t有一种做法大概是这样的：（先假设有解）</p><p>​\t对于每一种类型志愿者的人数我们设为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">X[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07847em\">X</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span></p><p>​\t那么对于每一天，设可以涵盖这一天的志愿者类型分别是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[i][1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>2</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[i][2]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mclose\">]</span></span></span></span>……</p><p>​\t那么我们要满足对于所有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">存</mi><mi mathvariant=\"normal\">在</mi></mrow></msubsup><mi>X</mi><mo stretchy=\"false\">[</mo><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mo>=</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{i=1}^{f[i]存在} X[f[i]] &gt;= A[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.32761em;vertical-align:-.29971000000000003em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0278999999999998em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.10764em\">f</span><span class=\"mopen mtight\">[</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mclose mtight\">]</span><span class=\"mord cjk_fallback mtight\">存</span><span class=\"mord cjk_fallback mtight\">在</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.29971000000000003em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07847em\">X</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span></p><p>​\t不妨假设总是存在一个<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">y[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>，满足<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">y[i]&gt;=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">0</span></span></span></span>，并且</p><p>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">存</mi><mi mathvariant=\"normal\">在</mi></mrow></msubsup><mi>X</mi><mo stretchy=\"false\">[</mo><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">]</mo><mo>−</mo><mi>y</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{j=1}^{f[i][j]存在} X[f[i][j]] -y[i] = A[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.463718em;vertical-align:-.43581800000000004em\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-.0000050000000000050004em\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0279em\"><span style=\"top:-2.40029em;margin-left:0;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.10764em\">f</span><span class=\"mopen mtight\">[</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mclose mtight\">]</span><span class=\"mopen mtight\">[</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mclose mtight\">]</span><span class=\"mord cjk_fallback mtight\">存</span><span class=\"mord cjk_fallback mtight\">在</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.43581800000000004em\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07847em\">X</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span></p><p>​\t作差分(A[0]=A[n+1]=0)</p><p>​\t得到了下面的式子：</p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">存</mi><mi mathvariant=\"normal\">在</mi></mrow></munderover><mi>X</mi><mo stretchy=\"false\">[</mo><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">]</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">存</mi><mi mathvariant=\"normal\">在</mi></mrow></munderover><mi>X</mi><mo stretchy=\"false\">[</mo><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">]</mo><mo>−</mo><mi>y</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>y</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>−</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\sum_{j=1}^{f[i][j]存在} X[f[i][j]]-\\sum_{j=1}^{f[i-1][j]存在} X[f[i-1][j]] -y[i] + y[i-1] - A[i] + A[i-1] = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.3747820000000006em;vertical-align:-1.4137769999999998em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.9610050000000006em\"><span style=\"top:-1.872331em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.386005em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.10764em\">f</span><span class=\"mopen mtight\">[</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mclose mtight\">]</span><span class=\"mopen mtight\">[</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mclose mtight\">]</span><span class=\"mord cjk_fallback mtight\">存</span><span class=\"mord cjk_fallback mtight\">在</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4137769999999998em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07847em\">X</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.3747820000000006em;vertical-align:-1.4137769999999998em\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.9610050000000006em\"><span style=\"top:-1.872331em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.386005em;margin-left:0\"><span class=\"pstrut\" style=\"height:3.05em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:.10764em\">f</span><span class=\"mopen mtight\">[</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">]</span><span class=\"mopen mtight\">[</span><span class=\"mord mathdefault mtight\" style=\"margin-right:.05724em\">j</span><span class=\"mclose mtight\">]</span><span class=\"mord cjk_fallback mtight\">存</span><span class=\"mord cjk_fallback mtight\">在</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4137769999999998em\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:.16666666666666666em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07847em\">X</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.03588em\">y</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.64444em;vertical-align:0\"></span><span class=\"mord\">0</span></span></span></span></span></p><p>​\t然后抵消后每一个<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">X[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.07847em\">X</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>必然只会加一次，减一次。</p><p>hint:流量平衡</p><p>​\t设每一天（或者说每一个等式）为节点，增加源点S和汇点T。</p><ul><li><p>如果<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A[i]-A[i-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">A</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>小于0，那么S到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span>连一条容量为(A[i]-A[i-1])，费用为0的边，否则<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span>到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:.68333em;vertical-align:0\"></span><span class=\"mord mathdefault\" style=\"margin-right:.13889em\">T</span></span></span></span>连一条 容量为(A[i-1]-A[i])，费用为0的边</p></li><li><p>如果一个变量X[i]在第j个等式中出现为X[i]，在第k个等式中出现为-X[i]，从顶点j向顶点k连接一条容量为∞，权值为V[i]的有向边。</p></li><li><p>如果一个变量Y[i]在第j个等式中出现为Y[i]，在第k个等式中出现为-Y[i]，从顶点j向顶点k连接一条容量为∞，权值为0的有向边。</p></li></ul><p>然后跑最小费用最大流。因为流量平衡，并且y[i]&gt;=0，所以有解即可。</p><p>​\t<a href=\"https://www.byvoid.com/zhs/blog/noi-2008-employee\" target=\"_blank\" rel=\"noopener\">参考，from network1</a></p><p>​  网上还有别的做法，貌似很好理解</p><p>​\t<a href=\"http://blog.csdn.net/u013368721/article/details/39900027\" target=\"_blank\" rel=\"noopener\">from network2</a></p><p><s>难看的</s>Code</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Hello Wolrd</span></span><br><span class=\"line\"><span class=\"comment\">//There is Special Pig Jiong in the world.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x3f3f3f3f</span>,oo = inf;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RG register</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> __wzp[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">15</span>|<span class=\"number\">1</span>],*__S=__wzp+<span class=\"number\">32768</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc() (__S&gt;=__wzp+32768?(__wzp[fread(__wzp,sizeof(char),1&lt;&lt;15,stdin)]=EOF),*((__S=__wzp)++):*(__S++))</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RG ll x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;RG <span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(RG int i=(a);i&lt;(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 2005 </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 50005 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,nxt,cap,cost;</span><br><span class=\"line\">    Edge()&#123;&#125;</span><br><span class=\"line\">    Edge(<span class=\"keyword\">int</span> to,<span class=\"keyword\">int</span> nxt,<span class=\"keyword\">int</span> cap,<span class=\"keyword\">int</span> cost):to(to),nxt(nxt),cap(cap),cost(cost)&#123;&#125;</span><br><span class=\"line\">&#125;edge[<span class=\"number\">2</span>*M];</span><br><span class=\"line\"><span class=\"keyword\">int</span> first[N],nume,n,m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> cap,<span class=\"keyword\">int</span> cost)</span></span>&#123;</span><br><span class=\"line\">    edge[nume] = Edge(b,first[a],cap,cost);first[a] = nume++;</span><br><span class=\"line\">    edge[nume] = Edge(a,first[b],<span class=\"number\">0</span>,-cost);first[b] = nume++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[N],vis[N],pre[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> S,T,a[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">spfa</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    mem(dis,<span class=\"number\">0x3f</span>);</span><br><span class=\"line\">    mem(vis,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    mem(pre,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    dis[S]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    vis[S]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    q.push(S);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q.front();q.pop();</span><br><span class=\"line\">        vis[u] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e=first[u];~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = edge[e].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(edge[e].cap&amp;&amp;dis[v]&gt;dis[u]+edge[e].cost)&#123;</span><br><span class=\"line\">                dis[v]=dis[u]+edge[e].cost;</span><br><span class=\"line\">                pre[v] = e;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!vis[v])&#123;</span><br><span class=\"line\">                    q.push(v);</span><br><span class=\"line\">                    vis[v]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dis[T]!=inf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mcmf</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> minflow,maxflow=<span class=\"number\">0</span>,mincost=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(spfa())&#123;</span><br><span class=\"line\">        minflow = inf;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=pre[T];~i;i=pre[edge[i^<span class=\"number\">1</span>].to])</span><br><span class=\"line\">            minflow = <span class=\"built_in\">min</span>(minflow,edge[i].cap);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=pre[T];~i;i=pre[edge[i^<span class=\"number\">1</span>].to])</span><br><span class=\"line\">            edge[i].cap -= minflow,</span><br><span class=\"line\">            edge[i^<span class=\"number\">1</span>].cap += minflow;</span><br><span class=\"line\">        mincost += minflow * dis[T];</span><br><span class=\"line\">        maxflow += minflow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mincost;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>(),m = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    S = n + <span class=\"number\">2</span>;T = S + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) a[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s = <span class=\"built_in\">read</span>(),t = <span class=\"built_in\">read</span>(),c = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        Addedge(s,t+<span class=\"number\">1</span>,inf,c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a[<span class=\"number\">0</span>]=a[n+<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n+<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i]-a[i<span class=\"number\">-1</span>]&gt;=<span class=\"number\">0</span>)</span><br><span class=\"line\">            Addedge(S,i,a[i]-a[i<span class=\"number\">-1</span>],<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            Addedge(i,T,a[i<span class=\"number\">-1</span>]-a[i],<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) Addedge(i+<span class=\"number\">1</span>,i,inf,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,mcmf());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"BZOJ1095[ZJOI2007]Hide 捉迷藏","_content":"\n#### 题面\n\n​\thttp://www.lydsy.com/JudgeOnline/problem.php?id=1095\n\n<!--more-->\n\n#### 题意\n\n​\t有黑色和白色两种颜色。\n\n​\t给你一棵树，一开始全部是黑色，每次可以把一个点变成相反的颜色，或者询问树上最远的两个黑色点对。\n\n#### 无关扯淡\n\n​\t这题做法好像很多。网上能找到的最多的有动态点分治和括号序列的做法。\n\n​\t然而：我括号序列看了好久都没看懂（大概半年前？）。\n\n​\t动态点分治抄HZWER代码简直一摸一样了还是WA(40ms)（大概几个月前？）\n\n​\t然后听说了周YY的好些好理解的做法。\n\n​\t真适合我这种智商欠缺码力不足的蒟蒻。\n\n​\t顺便奶一口周YY要AK_ZJOI，旺仔怒进省队。\n\n#### 题解\n\n​\t~~容易~~发现是求类似于~~虚树的~~直径。\n\n​\t如果我们已经求出只考虑端点为L~mid的直径（La和Lb)，以及mid+1~R的直径（Ra和Rb)，考虑如何得到L~R。\n\n​\t类比一般图求直径的那个两遍BFS的思想，~~显然~~只考虑端点在L~R的直径的两个端点必然在(La,Lb,Ra,Rb)中选出。\n\n​\t那么令单独一个点x的直径的为(x,0)，依次更新非0的答案，最终算到(1~R)就是答案。用上线段树可以支持在线修改。\n\nPS：以下树剖两只log，可以用RMQ求树上距离使得变成一只log\n\n```c++\n//Hello Wolrd\n//WZP will AK ZJOI \n#include<cstdio>\n#include<ctype.h>\n#include<cstring>\n#include<cstdlib>\n#include<map>\n#include<set>\n#include<queue>\n#include<cmath>\n#include<cstdlib>\n#include<algorithm>\nusing namespace std;\ntypedef unsigned long long ull;\ntypedef long long ll;\ntypedef pair<int,int> pii;\nconst int inf = 0x3f3f3f3f,oo = inf;\n#define pc putchar\n#define RG register\n#ifdef LOCAL\nchar __wzp[1<<15|1],*__S=__wzp+32768;\n#define gc() (__S>=__wzp+32768?(__wzp[fread(__wzp,sizeof(char),1<<15,stdin)]=EOF),*((__S=__wzp)++):*(__S++))\n#else\n#define gc getchar\n#endif\ninline ll read(){\n    RG ll x=0,f=1;RG char c=gc();\n    for(;!isdigit(c);c=gc())if(c=='-')f=-1;\n    for(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n    return x*f;\n}\nvoid write(ll x){\n    if(x<0)x=-x,pc('-');\n    if(x>=10)write(x/10);\n    putchar(x%10+'0');\n}\n#define rd read\n#define mem(x,v) memset(x,v,sizeof(x))\n#define pb push_back\n#define mp make_pair\n#define sqr(x) ((x)*(x))\n#define lowbit(x) ((x)&(-(x)))\n#define rep(i,a,b) for(RG int i=(a);i<(b);++i)\n#define Rep(i,a,b) for(RG int i=(a);i<=(b);++i)\n#define Down(i,a,b) for(RG int i=(a);i>=(b);--i)\n#define fin(x) {freopen(#x\".in\",\"r\",stdin);}\n#define fout(x) {freopen(#x\".in\",\"r\",stdin);}\n#define y1 ________y1\n#define union Union\nconst int maxn = 100005;\nstruct Edge{int to,nxt;}edge[maxn*2];\nint nume,first[maxn];\nint deep[maxn],size[maxn],son[maxn],fa[maxn],top[maxn];//pos[maxn];\nint n,m;\nvoid Addedge(int a,int b){\n    edge[nume] . to = b;edge[nume] . nxt = first[a];\n    first[a] = nume++;\n    edge[nume] . to = a;edge[nume] . nxt = first[b];\n    first[b] = nume++;\n}\n \nvoid dfs(int u){\n    size[u] = 1;\n    son[u] = 0;\n    for (int e=first[u];~e;e=edge[e].nxt){\n        int v = edge[e].to;\n        if (v==fa[u]) continue;\n        fa[v] = u;\n        deep[v] = deep[u] + 1;\n        dfs(v);\n        size[u] += size[v];\n        if (size[v] > size[son[u]]) son[u] = v;\n    }\n}\n  \nint dfsclk;\nvoid divide(int u,int chain){\n    top[u] = chain;\n//  pos[u] = ++dfsclk;\n    if (son[u]==0) return ;\n    divide(son[u],chain);\n    for (int e=first[u];~e;e=edge[e].nxt)\n        if (deep[edge[e].to] == deep[u] + 1 && edge[e].to != son[u])\n            divide(edge[e].to,edge[e].to);\n}\n \nint LCA(int x,int y){\n    while(top[x]!=top[y]){\n//      printf(\"%d %d\\n\",x,y);\n        if(deep[top[x]] > deep[top[y]])\n            x = fa[top[x]];\n        else\n            y = fa[top[y]];\n    }\n    return deep[x] > deep[y] ? y : x;\n}\n \nint dist(int a,int b){\n    if(a==0||b==0) return 0;\n    return deep[a] + deep[b] - 2 * deep[LCA(a,b)];\n}\n#define mid ((l+r) >> 1)\n#define lson (o << 1)\n#define rson (o << 1 | 1)\nstruct Node{\n    int a,b;\n    Node(){}\n    Node(int x,int y){a = x,b = y;}\n}T[maxn<<2];\nvoid update(Node &x,Node y){\n    if(x.a==0) x=y; else\n    if(dist(x.a,x.b) < dist(y.a,y.b)){\n        x.a = y.a;\n        x.b = y.b;\n    }\n}\nvoid pushup(int o){\n    T[o] = T[lson];update(T[o],T[rson]);\n    update(T[o],Node(T[lson].a,T[rson].a));\n    update(T[o],Node(T[lson].a,T[rson].b));\n    update(T[o],Node(T[lson].b,T[rson].a));\n    update(T[o],Node(T[lson].b,T[rson].b));\n}\nint TOT;\nvoid change(int o,int l,int r,int x){\n    if(l==r){\n        T[o].a = x - T[o].a;\n        if(T[o].a != 0) TOT++; else TOT--;\n        T[o].b = 0;\n        return ;\n    }\n    if(x<=mid)   change(lson,l,mid,x); else\n                change(rson,mid+1,r,x);\n    pushup(o);\n}\nint color[maxn];\nint main(){\n    mem(first,-1);nume = 0;\n    n = rd();\n    Rep(i,1,n-1) Addedge(rd(),rd());\n    deep[0]=0;dfsclk=0;\n    dfs(1);\n    divide(1,1);\n    TOT = 0;\n    Rep(i,1,n){\n        change(1,1,n,i);\n    }\n    m = rd();\n    Rep(i,1,m){\n        char op = gc();\n        while(op!='G'&&op!='C') op=gc();\n        if(op=='G'){\n            if(TOT == 0) puts(\"-1\"); else\n            if(TOT == 1) puts(\"0\"); else\n            printf(\"%d\\n\",dist(T[1].a,T[1].b));\n        } else{\n            int x = rd();\n            change(1,1,n,x);\n        }\n    }\n    return 0;\n}\n```\n\n","source":"_posts/BZOJ1095[ZJOI2007]Hide 捉迷藏.md","raw":"---\ntitle: BZOJ1095[ZJOI2007]Hide 捉迷藏\ntags:\n - 线段树\n - 贪心\n - BZOJ\n - 树\n---\n\n#### 题面\n\n​\thttp://www.lydsy.com/JudgeOnline/problem.php?id=1095\n\n<!--more-->\n\n#### 题意\n\n​\t有黑色和白色两种颜色。\n\n​\t给你一棵树，一开始全部是黑色，每次可以把一个点变成相反的颜色，或者询问树上最远的两个黑色点对。\n\n#### 无关扯淡\n\n​\t这题做法好像很多。网上能找到的最多的有动态点分治和括号序列的做法。\n\n​\t然而：我括号序列看了好久都没看懂（大概半年前？）。\n\n​\t动态点分治抄HZWER代码简直一摸一样了还是WA(40ms)（大概几个月前？）\n\n​\t然后听说了周YY的好些好理解的做法。\n\n​\t真适合我这种智商欠缺码力不足的蒟蒻。\n\n​\t顺便奶一口周YY要AK_ZJOI，旺仔怒进省队。\n\n#### 题解\n\n​\t~~容易~~发现是求类似于~~虚树的~~直径。\n\n​\t如果我们已经求出只考虑端点为L~mid的直径（La和Lb)，以及mid+1~R的直径（Ra和Rb)，考虑如何得到L~R。\n\n​\t类比一般图求直径的那个两遍BFS的思想，~~显然~~只考虑端点在L~R的直径的两个端点必然在(La,Lb,Ra,Rb)中选出。\n\n​\t那么令单独一个点x的直径的为(x,0)，依次更新非0的答案，最终算到(1~R)就是答案。用上线段树可以支持在线修改。\n\nPS：以下树剖两只log，可以用RMQ求树上距离使得变成一只log\n\n```c++\n//Hello Wolrd\n//WZP will AK ZJOI \n#include<cstdio>\n#include<ctype.h>\n#include<cstring>\n#include<cstdlib>\n#include<map>\n#include<set>\n#include<queue>\n#include<cmath>\n#include<cstdlib>\n#include<algorithm>\nusing namespace std;\ntypedef unsigned long long ull;\ntypedef long long ll;\ntypedef pair<int,int> pii;\nconst int inf = 0x3f3f3f3f,oo = inf;\n#define pc putchar\n#define RG register\n#ifdef LOCAL\nchar __wzp[1<<15|1],*__S=__wzp+32768;\n#define gc() (__S>=__wzp+32768?(__wzp[fread(__wzp,sizeof(char),1<<15,stdin)]=EOF),*((__S=__wzp)++):*(__S++))\n#else\n#define gc getchar\n#endif\ninline ll read(){\n    RG ll x=0,f=1;RG char c=gc();\n    for(;!isdigit(c);c=gc())if(c=='-')f=-1;\n    for(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n    return x*f;\n}\nvoid write(ll x){\n    if(x<0)x=-x,pc('-');\n    if(x>=10)write(x/10);\n    putchar(x%10+'0');\n}\n#define rd read\n#define mem(x,v) memset(x,v,sizeof(x))\n#define pb push_back\n#define mp make_pair\n#define sqr(x) ((x)*(x))\n#define lowbit(x) ((x)&(-(x)))\n#define rep(i,a,b) for(RG int i=(a);i<(b);++i)\n#define Rep(i,a,b) for(RG int i=(a);i<=(b);++i)\n#define Down(i,a,b) for(RG int i=(a);i>=(b);--i)\n#define fin(x) {freopen(#x\".in\",\"r\",stdin);}\n#define fout(x) {freopen(#x\".in\",\"r\",stdin);}\n#define y1 ________y1\n#define union Union\nconst int maxn = 100005;\nstruct Edge{int to,nxt;}edge[maxn*2];\nint nume,first[maxn];\nint deep[maxn],size[maxn],son[maxn],fa[maxn],top[maxn];//pos[maxn];\nint n,m;\nvoid Addedge(int a,int b){\n    edge[nume] . to = b;edge[nume] . nxt = first[a];\n    first[a] = nume++;\n    edge[nume] . to = a;edge[nume] . nxt = first[b];\n    first[b] = nume++;\n}\n \nvoid dfs(int u){\n    size[u] = 1;\n    son[u] = 0;\n    for (int e=first[u];~e;e=edge[e].nxt){\n        int v = edge[e].to;\n        if (v==fa[u]) continue;\n        fa[v] = u;\n        deep[v] = deep[u] + 1;\n        dfs(v);\n        size[u] += size[v];\n        if (size[v] > size[son[u]]) son[u] = v;\n    }\n}\n  \nint dfsclk;\nvoid divide(int u,int chain){\n    top[u] = chain;\n//  pos[u] = ++dfsclk;\n    if (son[u]==0) return ;\n    divide(son[u],chain);\n    for (int e=first[u];~e;e=edge[e].nxt)\n        if (deep[edge[e].to] == deep[u] + 1 && edge[e].to != son[u])\n            divide(edge[e].to,edge[e].to);\n}\n \nint LCA(int x,int y){\n    while(top[x]!=top[y]){\n//      printf(\"%d %d\\n\",x,y);\n        if(deep[top[x]] > deep[top[y]])\n            x = fa[top[x]];\n        else\n            y = fa[top[y]];\n    }\n    return deep[x] > deep[y] ? y : x;\n}\n \nint dist(int a,int b){\n    if(a==0||b==0) return 0;\n    return deep[a] + deep[b] - 2 * deep[LCA(a,b)];\n}\n#define mid ((l+r) >> 1)\n#define lson (o << 1)\n#define rson (o << 1 | 1)\nstruct Node{\n    int a,b;\n    Node(){}\n    Node(int x,int y){a = x,b = y;}\n}T[maxn<<2];\nvoid update(Node &x,Node y){\n    if(x.a==0) x=y; else\n    if(dist(x.a,x.b) < dist(y.a,y.b)){\n        x.a = y.a;\n        x.b = y.b;\n    }\n}\nvoid pushup(int o){\n    T[o] = T[lson];update(T[o],T[rson]);\n    update(T[o],Node(T[lson].a,T[rson].a));\n    update(T[o],Node(T[lson].a,T[rson].b));\n    update(T[o],Node(T[lson].b,T[rson].a));\n    update(T[o],Node(T[lson].b,T[rson].b));\n}\nint TOT;\nvoid change(int o,int l,int r,int x){\n    if(l==r){\n        T[o].a = x - T[o].a;\n        if(T[o].a != 0) TOT++; else TOT--;\n        T[o].b = 0;\n        return ;\n    }\n    if(x<=mid)   change(lson,l,mid,x); else\n                change(rson,mid+1,r,x);\n    pushup(o);\n}\nint color[maxn];\nint main(){\n    mem(first,-1);nume = 0;\n    n = rd();\n    Rep(i,1,n-1) Addedge(rd(),rd());\n    deep[0]=0;dfsclk=0;\n    dfs(1);\n    divide(1,1);\n    TOT = 0;\n    Rep(i,1,n){\n        change(1,1,n,i);\n    }\n    m = rd();\n    Rep(i,1,m){\n        char op = gc();\n        while(op!='G'&&op!='C') op=gc();\n        if(op=='G'){\n            if(TOT == 0) puts(\"-1\"); else\n            if(TOT == 1) puts(\"0\"); else\n            printf(\"%d\\n\",dist(T[1].a,T[1].b));\n        } else{\n            int x = rd();\n            change(1,1,n,x);\n        }\n    }\n    return 0;\n}\n```\n\n","slug":"BZOJ1095[ZJOI2007]Hide 捉迷藏","published":1,"date":"2021-08-28T13:04:29.789Z","updated":"2021-08-28T13:04:29.789Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvspz5u000a09nucl6u22f4","content":"<h4 id=\"题面\"><a class=\"markdownIt-Anchor\" href=\"# 题面\"></a> 题面 </h4><p>​\t<a href=\"http://www.lydsy.com/JudgeOnline/problem.php?id=1095\" target=\"_blank\" rel=\"noopener\">http://www.lydsy.com/JudgeOnline/problem.php?id=1095</a></p><a id=\"more\"></a><h4 id=\"题意\"><a class=\"markdownIt-Anchor\" href=\"# 题意\"></a> 题意</h4><p>​\t有黑色和白色两种颜色。</p><p>​\t给你一棵树，一开始全部是黑色，每次可以把一个点变成相反的颜色，或者询问树上最远的两个黑色点对。</p><h4 id=\"无关扯淡\"><a class=\"markdownIt-Anchor\" href=\"# 无关扯淡\"></a> 无关扯淡</h4><p>​\t这题做法好像很多。网上能找到的最多的有动态点分治和括号序列的做法。</p><p>​\t然而：我括号序列看了好久都没看懂（大概半年前？）。</p><p>​\t动态点分治抄 HZWER 代码简直一摸一样了还是 WA(40ms)（大概几个月前？）</p><p>​\t然后听说了周 YY 的好些好理解的做法。</p><p>​\t真适合我这种智商欠缺码力不足的蒟蒻。</p><p>​\t顺便奶一口周 YY 要 AK_ZJOI，旺仔怒进省队。</p><h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"# 题解\"></a> 题解</h4><p>​\t<s> 容易 </s> 发现是求类似于 <s> 虚树的 </s> 直径。</p><p>​\t如果我们已经求出只考虑端点为 L<sub>mid 的直径（La 和 Lb)，以及 mid+1</sub>R 的直径（Ra 和 Rb)，考虑如何得到 L~R。</p><p>​\t类比一般图求直径的那个两遍 BFS 的思想，<s>显然 </s> 只考虑端点在 L~R 的直径的两个端点必然在 (La,Lb,Ra,Rb) 中选出。</p><p>​\t那么令单独一个点 x 的直径的为 (x,0)，依次更新非 0 的答案，最终算到(1~R) 就是答案。用上线段树可以支持在线修改。</p><p>PS：以下树剖两只 log，可以用 RMQ 求树上距离使得变成一只 log</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Hello Wolrd</span></span><br><span class=\"line\"><span class=\"comment\">//WZP will AK ZJOI </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x3f3f3f3f</span>,oo = inf;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RG register</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> LOCAL</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> __wzp[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">15</span>|<span class=\"number\">1</span>],*__S=__wzp+<span class=\"number\">32768</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc() (__S&gt;=__wzp+32768?(__wzp[fread(__wzp,sizeof(char),1&lt;&lt;15,stdin)]=EOF),*((__S=__wzp)++):*(__S++))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc getchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RG ll x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;RG <span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ll x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)x=-x,pc(<span class=\"string\">'-'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">10</span>)<span class=\"built_in\">write</span>(x/<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rd read</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mp make_pair</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sqr(x) ((x)*(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(RG int i=(a);i&lt;(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Rep(i,a,b) for(RG int i=(a);i&lt;=(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Down(i,a,b) for(RG int i=(a);i&gt;=(b);--i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fin(x) &#123;freopen(#x<span class=\"meta-string\">\".in\"</span>,<span class=\"meta-string\">\"r\"</span>,stdin);&#125;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fout(x) &#123;freopen(#x<span class=\"meta-string\">\".in\"</span>,<span class=\"meta-string\">\"r\"</span>,stdin);&#125;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y1 ________y1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> union Union</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">100005</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span><span class=\"keyword\">int</span> to,nxt;&#125;edge[maxn*<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> nume,first[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> deep[maxn],<span class=\"built_in\">size</span>[maxn],son[maxn],fa[maxn],top[maxn];<span class=\"comment\">//pos[maxn];</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    edge[nume] . to = b;edge[nume] . nxt = first[a];</span><br><span class=\"line\">    first[a] = nume++;</span><br><span class=\"line\">    edge[nume] . to = a;edge[nume] . nxt = first[b];</span><br><span class=\"line\">    first[b] = nume++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">size</span>[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    son[u] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e=first[u];~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = edge[e].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v==fa[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        fa[v] = u;</span><br><span class=\"line\">        deep[v] = deep[u] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        dfs(v);</span><br><span class=\"line\">        <span class=\"built_in\">size</span>[u] += <span class=\"built_in\">size</span>[v];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">size</span>[v] &gt; <span class=\"built_in\">size</span>[son[u]]) son[u] = v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">int</span> dfsclk;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">divide</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> chain)</span></span>&#123;</span><br><span class=\"line\">    top[u] = chain;</span><br><span class=\"line\"><span class=\"comment\">//  pos[u] = ++dfsclk;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (son[u]==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    divide(son[u],chain);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e=first[u];~e;e=edge[e].nxt)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (deep[edge[e].to] == deep[u] + <span class=\"number\">1</span> &amp;&amp; edge[e].to != son[u])</span><br><span class=\"line\">            divide(edge[e].to,edge[e].to);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">LCA</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(top[x]!=top[y])&#123;</span><br><span class=\"line\"><span class=\"comment\">//      printf(\"%d %d\\n\",x,y);</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(deep[top[x]] &gt; deep[top[y]])</span><br><span class=\"line\">            x = fa[top[x]];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            y = fa[top[y]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> deep[x] &gt; deep[y] ? y : x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dist</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a==<span class=\"number\">0</span>||b==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> deep[a] + deep[b] - <span class=\"number\">2</span> * deep[LCA(a,b)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l+r) &gt;&gt; 1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lson (o &lt;&lt; 1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rson (o &lt;&lt; 1 | 1)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,b;</span><br><span class=\"line\">    Node()&#123;&#125;</span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)&#123;a = x,b = y;&#125;</span><br><span class=\"line\">&#125;T[maxn&lt;&lt;<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Node &amp;x,Node y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x.a==<span class=\"number\">0</span>) x=y; <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dist(x.a,x.b) &lt; dist(y.a,y.b))&#123;</span><br><span class=\"line\">        x.a = y.a;</span><br><span class=\"line\">        x.b = y.b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span></span>&#123;</span><br><span class=\"line\">    T[o] = T[lson];update(T[o],T[rson]);</span><br><span class=\"line\">    update(T[o],Node(T[lson].a,T[rson].a));</span><br><span class=\"line\">    update(T[o],Node(T[lson].a,T[rson].b));</span><br><span class=\"line\">    update(T[o],Node(T[lson].b,T[rson].a));</span><br><span class=\"line\">    update(T[o],Node(T[lson].b,T[rson].b));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> TOT;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r)&#123;</span><br><span class=\"line\">        T[o].a = x - T[o].a;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[o].a != <span class=\"number\">0</span>) TOT++; <span class=\"keyword\">else</span> TOT--;</span><br><span class=\"line\">        T[o].b = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;=mid)   change(lson,l,mid,x); <span class=\"keyword\">else</span></span><br><span class=\"line\">                change(rson,mid+<span class=\"number\">1</span>,r,x);</span><br><span class=\"line\">    pushup(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> color[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    n = rd();</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n<span class=\"number\">-1</span>) Addedge(rd(),rd());</span><br><span class=\"line\">    deep[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;dfsclk=<span class=\"number\">0</span>;</span><br><span class=\"line\">    dfs(<span class=\"number\">1</span>);</span><br><span class=\"line\">    divide(<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    TOT = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        change(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n,i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    m = rd();</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,m)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> op = gc();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(op!=<span class=\"string\">'G'</span>&amp;&amp;op!=<span class=\"string\">'C'</span>) op=gc();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op==<span class=\"string\">'G'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(TOT == <span class=\"number\">0</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">\"-1\"</span>); <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(TOT == <span class=\"number\">1</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">\"0\"</span>); <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,dist(T[<span class=\"number\">1</span>].a,T[<span class=\"number\">1</span>].b));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = rd();</span><br><span class=\"line\">            change(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"题面\"><a class=\"markdownIt-Anchor\" href=\"#题面\"></a> 题面</h4><p>​\t<a href=\"http://www.lydsy.com/JudgeOnline/problem.php?id=1095\" target=\"_blank\" rel=\"noopener\">http://www.lydsy.com/JudgeOnline/problem.php?id=1095</a></p>","more":"<h4 id=\"题意\"><a class=\"markdownIt-Anchor\" href=\"#题意\"></a> 题意</h4><p>​\t有黑色和白色两种颜色。</p><p>​\t给你一棵树，一开始全部是黑色，每次可以把一个点变成相反的颜色，或者询问树上最远的两个黑色点对。</p><h4 id=\"无关扯淡\"><a class=\"markdownIt-Anchor\" href=\"#无关扯淡\"></a> 无关扯淡</h4><p>​\t这题做法好像很多。网上能找到的最多的有动态点分治和括号序列的做法。</p><p>​\t然而：我括号序列看了好久都没看懂（大概半年前？）。</p><p>​\t动态点分治抄HZWER代码简直一摸一样了还是WA(40ms)（大概几个月前？）</p><p>​\t然后听说了周YY的好些好理解的做法。</p><p>​\t真适合我这种智商欠缺码力不足的蒟蒻。</p><p>​\t顺便奶一口周YY要AK_ZJOI，旺仔怒进省队。</p><h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\"></a> 题解</h4><p>​\t<s>容易</s>发现是求类似于<s>虚树的</s>直径。</p><p>​\t如果我们已经求出只考虑端点为L<sub>mid的直径（La和Lb)，以及mid+1</sub>R的直径（Ra和Rb)，考虑如何得到L~R。</p><p>​\t类比一般图求直径的那个两遍BFS的思想，<s>显然</s>只考虑端点在L~R的直径的两个端点必然在(La,Lb,Ra,Rb)中选出。</p><p>​\t那么令单独一个点x的直径的为(x,0)，依次更新非0的答案，最终算到(1~R)就是答案。用上线段树可以支持在线修改。</p><p>PS：以下树剖两只log，可以用RMQ求树上距离使得变成一只log</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Hello Wolrd</span></span><br><span class=\"line\"><span class=\"comment\">//WZP will AK ZJOI </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x3f3f3f3f</span>,oo = inf;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RG register</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> LOCAL</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> __wzp[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">15</span>|<span class=\"number\">1</span>],*__S=__wzp+<span class=\"number\">32768</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc() (__S&gt;=__wzp+32768?(__wzp[fread(__wzp,sizeof(char),1&lt;&lt;15,stdin)]=EOF),*((__S=__wzp)++):*(__S++))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc getchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RG ll x=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;RG <span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())<span class=\"keyword\">if</span>(c==<span class=\"string\">'-'</span>)f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ll x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)x=-x,pc(<span class=\"string\">'-'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">10</span>)<span class=\"built_in\">write</span>(x/<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rd read</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mp make_pair</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sqr(x) ((x)*(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(RG int i=(a);i&lt;(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Rep(i,a,b) for(RG int i=(a);i&lt;=(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Down(i,a,b) for(RG int i=(a);i&gt;=(b);--i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fin(x) &#123;freopen(#x<span class=\"meta-string\">\".in\"</span>,<span class=\"meta-string\">\"r\"</span>,stdin);&#125;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fout(x) &#123;freopen(#x<span class=\"meta-string\">\".in\"</span>,<span class=\"meta-string\">\"r\"</span>,stdin);&#125;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y1 ________y1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> union Union</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">100005</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span><span class=\"keyword\">int</span> to,nxt;&#125;edge[maxn*<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> nume,first[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> deep[maxn],<span class=\"built_in\">size</span>[maxn],son[maxn],fa[maxn],top[maxn];<span class=\"comment\">//pos[maxn];</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    edge[nume] . to = b;edge[nume] . nxt = first[a];</span><br><span class=\"line\">    first[a] = nume++;</span><br><span class=\"line\">    edge[nume] . to = a;edge[nume] . nxt = first[b];</span><br><span class=\"line\">    first[b] = nume++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">size</span>[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    son[u] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e=first[u];~e;e=edge[e].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = edge[e].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v==fa[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        fa[v] = u;</span><br><span class=\"line\">        deep[v] = deep[u] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        dfs(v);</span><br><span class=\"line\">        <span class=\"built_in\">size</span>[u] += <span class=\"built_in\">size</span>[v];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">size</span>[v] &gt; <span class=\"built_in\">size</span>[son[u]]) son[u] = v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">int</span> dfsclk;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">divide</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> chain)</span></span>&#123;</span><br><span class=\"line\">    top[u] = chain;</span><br><span class=\"line\"><span class=\"comment\">//  pos[u] = ++dfsclk;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (son[u]==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    divide(son[u],chain);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e=first[u];~e;e=edge[e].nxt)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (deep[edge[e].to] == deep[u] + <span class=\"number\">1</span> &amp;&amp; edge[e].to != son[u])</span><br><span class=\"line\">            divide(edge[e].to,edge[e].to);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">LCA</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(top[x]!=top[y])&#123;</span><br><span class=\"line\"><span class=\"comment\">//      printf(\"%d %d\\n\",x,y);</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(deep[top[x]] &gt; deep[top[y]])</span><br><span class=\"line\">            x = fa[top[x]];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            y = fa[top[y]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> deep[x] &gt; deep[y] ? y : x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dist</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a==<span class=\"number\">0</span>||b==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> deep[a] + deep[b] - <span class=\"number\">2</span> * deep[LCA(a,b)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l+r) &gt;&gt; 1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lson (o &lt;&lt; 1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rson (o &lt;&lt; 1 | 1)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,b;</span><br><span class=\"line\">    Node()&#123;&#125;</span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)&#123;a = x,b = y;&#125;</span><br><span class=\"line\">&#125;T[maxn&lt;&lt;<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Node &amp;x,Node y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x.a==<span class=\"number\">0</span>) x=y; <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dist(x.a,x.b) &lt; dist(y.a,y.b))&#123;</span><br><span class=\"line\">        x.a = y.a;</span><br><span class=\"line\">        x.b = y.b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span></span>&#123;</span><br><span class=\"line\">    T[o] = T[lson];update(T[o],T[rson]);</span><br><span class=\"line\">    update(T[o],Node(T[lson].a,T[rson].a));</span><br><span class=\"line\">    update(T[o],Node(T[lson].a,T[rson].b));</span><br><span class=\"line\">    update(T[o],Node(T[lson].b,T[rson].a));</span><br><span class=\"line\">    update(T[o],Node(T[lson].b,T[rson].b));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> TOT;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r)&#123;</span><br><span class=\"line\">        T[o].a = x - T[o].a;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(T[o].a != <span class=\"number\">0</span>) TOT++; <span class=\"keyword\">else</span> TOT--;</span><br><span class=\"line\">        T[o].b = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;=mid)   change(lson,l,mid,x); <span class=\"keyword\">else</span></span><br><span class=\"line\">                change(rson,mid+<span class=\"number\">1</span>,r,x);</span><br><span class=\"line\">    pushup(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> color[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    mem(first,<span class=\"number\">-1</span>);nume = <span class=\"number\">0</span>;</span><br><span class=\"line\">    n = rd();</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n<span class=\"number\">-1</span>) Addedge(rd(),rd());</span><br><span class=\"line\">    deep[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;dfsclk=<span class=\"number\">0</span>;</span><br><span class=\"line\">    dfs(<span class=\"number\">1</span>);</span><br><span class=\"line\">    divide(<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    TOT = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        change(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n,i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    m = rd();</span><br><span class=\"line\">    Rep(i,<span class=\"number\">1</span>,m)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> op = gc();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(op!=<span class=\"string\">'G'</span>&amp;&amp;op!=<span class=\"string\">'C'</span>) op=gc();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op==<span class=\"string\">'G'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(TOT == <span class=\"number\">0</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">\"-1\"</span>); <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(TOT == <span class=\"number\">1</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">\"0\"</span>); <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,dist(T[<span class=\"number\">1</span>].a,T[<span class=\"number\">1</span>].b));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = rd();</span><br><span class=\"line\">            change(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"BZOJ1337 最小圆覆盖","_content":"\n[原题戳这里](https://www.lydsy.com/JudgeOnline/problem.php?id=1337)\n\n#### 题意\n\n> 给你n个点，求最小的半径的圆覆盖这n个点\n\n#### 吐槽\n\n​\t这题只有1个数据点，而且n=10，~~所以直接puts就行了~~\n\n```c++\n#include<cstdio>\nusing namespace std;\nint main(){\n    puts(\"48.770\");\n}\n```\n\n下面是数据\n\n> 10\n>\n> 24.4 57.4\n>\n> 71.7 99\n>\n> 85.4 78.6\n>\n> 70.6 39.2\n>\n> 35.3 8.9\n>\n> 14.8 77.6\n>\n> 2.3 50\n>\n> 14.1 84.9\n>\n> 99.3 49.6\n>\n> 47.8 43\n\n<!--more-->\n\n\n\n好吧，这题貌似叫做随机增量法？？\n\n大概就是暴力枚举一个点，不行用两个点，还不行三个点，然后这样期望复杂度是$O(n)$的\n\n其实我就是来贴个计算几何模板的。\n\n```c++\n#include<bits/stdc++.h>\n#include<cmath>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\nconst int inf = 0x3f3f3f3f,oo = inf;\n#define pi 3.14159265358979323846\n#define IL inline\n#define RG register\n#define rep(i,a,b) for(RG int i=(a);i<(b);++i)\n#define Rep(i,a,b) for(RG int i=(a);i<=(b);++i)\n#define Dep(i,a,b) for(RG int i=(a);i>=(b);--i)\n#define pc putchar\n#define gc getchar\nIL ll read(){\n    RG ll x=0;char f=0;RG char c=gc();\n    for(;!isdigit(c);c=gc())f|=(c=='-');\n    for(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n    return f?-x:x;\n}\nIL double readdb(){\n    RG double x=0,p=0.1;RG char f=0,c=gc();\n    for(;!isdigit(c);c=gc())f|=(c=='-');\n    for(;isdigit(c);c=gc())x=x*10+(c^48);\n    if(c=='.')for(c=gc();isdigit(c);c=gc(),p/=10)x=x+(c^48)*p;\n    return f?-x:x;\n}\nIL void write(ll x){if(x<0)x=-x,pc('-');if(x>=10)write(x/10);pc(x%10+'0');}\nIL void writeln(ll x){write(x);puts(\"\");}\nIL void writeln(ll x,char c,ll y){write(x);pc(c);writeln(y);}\nIL void writeln(ll x,char c,ll y,char d,ll z){write(x);pc(c);write(y);pc(d);writeln(z);}\n#define debug(x) printf(#x\" = %d\\n\",x);\n#define rd() read()\n#define rdb() readdb()\n#define mem(x,v) memset(x,v,sizeof(x))\n#define pb push_back\n#define mp make_pair\n#define sqr(x) ((x)*(x))\n#define lowbit(x) ((x)&(-(x)))\n#define fin(x) freopen(#x\".in\",\"r\",stdin)\n#define fout(x) freopen(#x\".out\",\"w\",stdout)\n#define y1 ____y1\n#define hash __hash\n#define union _union\n#define ramdom ((double)rand() / RAND_MAX)\n#define x first\n#define y second\nconst double eps = 1e-8;\nint dcmp(double x){if(fabs(x) < eps) return 0;return x<0?-1:1;}\nstruct Point{\n\tdouble x,y;\n\tPoint(double x=0,double y=0):x(x),y(y){};\n\tPoint operator + (const Point &a)const{return Point(x+a.x,y+a.y);}\n\tPoint operator - (const Point &a)const{return Point(x-a.x,y-a.y);}\n\tPoint operator * (double a){return Point(x*a,y*a);}\n\tPoint operator / (double a){return Point(x/a,y/a);}\n\tvoid out(){\n\t\tprintf(\"{%.3lf,%.3lf}\",x,y);\n\t}\n}; \ntypedef Point Vector;\ndouble cross(Point a,Point b){return a.x*b.y-b.x*a.y;}\ndouble dot(Point a,Point b){return a.x*b.x+a.y*b.y;}\ndouble dist(Point a,Point b){return sqrt(sqr(a.x-b.x)+sqr(a.y-b.y));}\nPoint rotate(Vector a,double rad){\n\treturn Point(a.x*cos(rad)-a.y*sin(rad),a.x*sin(rad)+a.y*cos(rad));\n}//向量绕原点旋转rad度 \nstruct Line{\n\tPoint x,y; \n\tLine(Point x,Point y):x(x),y(y){}\n\tvoid out(){\n\t\tpc('[');x.out();y.out();pc(']');\n\t}\n};\ntypedef Line Segment;\nPoint Line_jiao(Line a,Line b){\n\tdouble r1 = cross(a.x-b.x,b.y-b.x),r2 = cross(b.y-b.x,a.y-b.x);\n\treturn a.x+(a.y-a.x)*r1/(r1+r2);\n}//给出两条直线，求它们的交点 \nPoint center(Point A,Point B,Point C){\n\tPoint p = (A+B) / 2;\n\tPoint q = (A+C) / 2;\n\tif(dcmp(cross(p-C,A-C))==0){\n\t\tif(dcmp(dist(A,B)+dist(B,C)-dist(A,C))==0) return (A+C)/2;\n\t\tif(dcmp(dist(A,B)+dist(A,B)-dist(B,C))==0) return (B+C)/2;\n\t\tif(dcmp(dist(A,C)+dist(B,C)-dist(A,B))==0) return (A+B)/2;\n\t}\n\tPoint _p=p+Point(-(p-A).y,(p-A).x);\n\tPoint _q=q+Point(-(q-A).y,(q-A).x);\n\tPoint answ = Line_jiao(Line(p,_p),Line(q,_q));\n\treturn answ;\n}//给定三个点，求一个点满足这个点到三个点的距离的最大值最小 \nconst int maxn = 1e5+233;\nPoint p[maxn];int n;\ndouble min_circle_cover(Point p[],int n){\n\tsrand((unsigned long long)\"Wzp Ak All OI contests\");\n\trandom_shuffle(p,p+n);\n\tdouble r = 0;\n\tPoint c = p[0];\n\trep(i,1,n){\n\t\tif(dcmp(dist(p[i],c) - r) > 0){\n\t\t\tc = p[i];r = 0;//够不到（逃 \n\t\t\trep(j,0,i){\n\t\t\t\tif(dcmp(dist(p[j],c)-r)>0){\n\t\t\t\t\tc = (p[i]+p[j])/2;r = dist(p[i],c);\n\t\t\t\t\trep(k,0,j){\n\t\t\t\t\t\tif(dcmp(dist(p[k],c)-r)>0){\n\t\t\t\t\t\t\tc = center(p[i],p[j],p[k]);\n\t\t\t\t\t\t\tr = dist(p[i],c);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} \n\treturn r;\n}//给定n个点，求它们的最小圆覆盖的半径\nint main(){\n\tn = rd();\n\trep(i,0,n)\n\t\tp[i].x=rdb(),p[i].y=rdb();\n\tprintf(\"%.3lf\\n\",min_circle_cover());\n\treturn 0;\n}\n\n```\n\n~~突然想开个坑来填模板~~","source":"_posts/BZOJ1337 最小圆覆盖.md","raw":"---\ntitle: BZOJ1337 最小圆覆盖\ntags: \n - 计算几何\n - 期望\n---\n\n[原题戳这里](https://www.lydsy.com/JudgeOnline/problem.php?id=1337)\n\n#### 题意\n\n> 给你n个点，求最小的半径的圆覆盖这n个点\n\n#### 吐槽\n\n​\t这题只有1个数据点，而且n=10，~~所以直接puts就行了~~\n\n```c++\n#include<cstdio>\nusing namespace std;\nint main(){\n    puts(\"48.770\");\n}\n```\n\n下面是数据\n\n> 10\n>\n> 24.4 57.4\n>\n> 71.7 99\n>\n> 85.4 78.6\n>\n> 70.6 39.2\n>\n> 35.3 8.9\n>\n> 14.8 77.6\n>\n> 2.3 50\n>\n> 14.1 84.9\n>\n> 99.3 49.6\n>\n> 47.8 43\n\n<!--more-->\n\n\n\n好吧，这题貌似叫做随机增量法？？\n\n大概就是暴力枚举一个点，不行用两个点，还不行三个点，然后这样期望复杂度是$O(n)$的\n\n其实我就是来贴个计算几何模板的。\n\n```c++\n#include<bits/stdc++.h>\n#include<cmath>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\nconst int inf = 0x3f3f3f3f,oo = inf;\n#define pi 3.14159265358979323846\n#define IL inline\n#define RG register\n#define rep(i,a,b) for(RG int i=(a);i<(b);++i)\n#define Rep(i,a,b) for(RG int i=(a);i<=(b);++i)\n#define Dep(i,a,b) for(RG int i=(a);i>=(b);--i)\n#define pc putchar\n#define gc getchar\nIL ll read(){\n    RG ll x=0;char f=0;RG char c=gc();\n    for(;!isdigit(c);c=gc())f|=(c=='-');\n    for(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n    return f?-x:x;\n}\nIL double readdb(){\n    RG double x=0,p=0.1;RG char f=0,c=gc();\n    for(;!isdigit(c);c=gc())f|=(c=='-');\n    for(;isdigit(c);c=gc())x=x*10+(c^48);\n    if(c=='.')for(c=gc();isdigit(c);c=gc(),p/=10)x=x+(c^48)*p;\n    return f?-x:x;\n}\nIL void write(ll x){if(x<0)x=-x,pc('-');if(x>=10)write(x/10);pc(x%10+'0');}\nIL void writeln(ll x){write(x);puts(\"\");}\nIL void writeln(ll x,char c,ll y){write(x);pc(c);writeln(y);}\nIL void writeln(ll x,char c,ll y,char d,ll z){write(x);pc(c);write(y);pc(d);writeln(z);}\n#define debug(x) printf(#x\" = %d\\n\",x);\n#define rd() read()\n#define rdb() readdb()\n#define mem(x,v) memset(x,v,sizeof(x))\n#define pb push_back\n#define mp make_pair\n#define sqr(x) ((x)*(x))\n#define lowbit(x) ((x)&(-(x)))\n#define fin(x) freopen(#x\".in\",\"r\",stdin)\n#define fout(x) freopen(#x\".out\",\"w\",stdout)\n#define y1 ____y1\n#define hash __hash\n#define union _union\n#define ramdom ((double)rand() / RAND_MAX)\n#define x first\n#define y second\nconst double eps = 1e-8;\nint dcmp(double x){if(fabs(x) < eps) return 0;return x<0?-1:1;}\nstruct Point{\n\tdouble x,y;\n\tPoint(double x=0,double y=0):x(x),y(y){};\n\tPoint operator + (const Point &a)const{return Point(x+a.x,y+a.y);}\n\tPoint operator - (const Point &a)const{return Point(x-a.x,y-a.y);}\n\tPoint operator * (double a){return Point(x*a,y*a);}\n\tPoint operator / (double a){return Point(x/a,y/a);}\n\tvoid out(){\n\t\tprintf(\"{%.3lf,%.3lf}\",x,y);\n\t}\n}; \ntypedef Point Vector;\ndouble cross(Point a,Point b){return a.x*b.y-b.x*a.y;}\ndouble dot(Point a,Point b){return a.x*b.x+a.y*b.y;}\ndouble dist(Point a,Point b){return sqrt(sqr(a.x-b.x)+sqr(a.y-b.y));}\nPoint rotate(Vector a,double rad){\n\treturn Point(a.x*cos(rad)-a.y*sin(rad),a.x*sin(rad)+a.y*cos(rad));\n}//向量绕原点旋转rad度 \nstruct Line{\n\tPoint x,y; \n\tLine(Point x,Point y):x(x),y(y){}\n\tvoid out(){\n\t\tpc('[');x.out();y.out();pc(']');\n\t}\n};\ntypedef Line Segment;\nPoint Line_jiao(Line a,Line b){\n\tdouble r1 = cross(a.x-b.x,b.y-b.x),r2 = cross(b.y-b.x,a.y-b.x);\n\treturn a.x+(a.y-a.x)*r1/(r1+r2);\n}//给出两条直线，求它们的交点 \nPoint center(Point A,Point B,Point C){\n\tPoint p = (A+B) / 2;\n\tPoint q = (A+C) / 2;\n\tif(dcmp(cross(p-C,A-C))==0){\n\t\tif(dcmp(dist(A,B)+dist(B,C)-dist(A,C))==0) return (A+C)/2;\n\t\tif(dcmp(dist(A,B)+dist(A,B)-dist(B,C))==0) return (B+C)/2;\n\t\tif(dcmp(dist(A,C)+dist(B,C)-dist(A,B))==0) return (A+B)/2;\n\t}\n\tPoint _p=p+Point(-(p-A).y,(p-A).x);\n\tPoint _q=q+Point(-(q-A).y,(q-A).x);\n\tPoint answ = Line_jiao(Line(p,_p),Line(q,_q));\n\treturn answ;\n}//给定三个点，求一个点满足这个点到三个点的距离的最大值最小 \nconst int maxn = 1e5+233;\nPoint p[maxn];int n;\ndouble min_circle_cover(Point p[],int n){\n\tsrand((unsigned long long)\"Wzp Ak All OI contests\");\n\trandom_shuffle(p,p+n);\n\tdouble r = 0;\n\tPoint c = p[0];\n\trep(i,1,n){\n\t\tif(dcmp(dist(p[i],c) - r) > 0){\n\t\t\tc = p[i];r = 0;//够不到（逃 \n\t\t\trep(j,0,i){\n\t\t\t\tif(dcmp(dist(p[j],c)-r)>0){\n\t\t\t\t\tc = (p[i]+p[j])/2;r = dist(p[i],c);\n\t\t\t\t\trep(k,0,j){\n\t\t\t\t\t\tif(dcmp(dist(p[k],c)-r)>0){\n\t\t\t\t\t\t\tc = center(p[i],p[j],p[k]);\n\t\t\t\t\t\t\tr = dist(p[i],c);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} \n\treturn r;\n}//给定n个点，求它们的最小圆覆盖的半径\nint main(){\n\tn = rd();\n\trep(i,0,n)\n\t\tp[i].x=rdb(),p[i].y=rdb();\n\tprintf(\"%.3lf\\n\",min_circle_cover());\n\treturn 0;\n}\n\n```\n\n~~突然想开个坑来填模板~~","slug":"BZOJ1337 最小圆覆盖","published":1,"date":"2021-08-28T13:04:29.789Z","updated":"2021-08-28T13:04:29.789Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvspz5w000c09nuc5v922wc","content":"<p><a href=\"https://www.lydsy.com/JudgeOnline/problem.php?id=1337\" target=\"_blank\" rel=\"noopener\">原题戳这里 </a></p><h4 id=\"题意\"><a class=\"markdownIt-Anchor\" href=\"# 题意\"></a> 题意</h4><blockquote><p> 给你 n 个点，求最小的半径的圆覆盖这 n 个点 </p></blockquote><h4 id=\"吐槽\"><a class=\"markdownIt-Anchor\" href=\"# 吐槽\"></a> 吐槽</h4><p>​\t这题只有 1 个数据点，而且 n=10，<s> 所以直接 puts 就行了 </s></p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"48.770\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p> 下面是数据 </p><blockquote><p>10</p><p>24.4 57.4</p><p>71.7 99</p><p>85.4 78.6</p><p>70.6 39.2</p><p>35.3 8.9</p><p>14.8 77.6</p><p>2.3 50</p><p>14.1 84.9</p><p>99.3 49.6</p><p>47.8 43</p></blockquote><a id=\"more\"></a><p> 好吧，这题貌似叫做随机增量法？？</p><p>大概就是暴力枚举一个点，不行用两个点，还不行三个点，然后这样期望复杂度是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> 的</p><p>其实我就是来贴个计算几何模板的。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x3f3f3f3f</span>,oo = inf;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pi 3.14159265358979323846</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IL inline</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RG register</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(RG int i=(a);i&lt;(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Rep(i,a,b) for(RG int i=(a);i&lt;=(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Dep(i,a,b) for(RG int i=(a);i&gt;=(b);--i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc getchar</span></span><br><span class=\"line\"><span class=\"function\">IL ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RG ll x=<span class=\"number\">0</span>;<span class=\"keyword\">char</span> f=<span class=\"number\">0</span>;RG <span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())f|=(c==<span class=\"string\">'-'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f?-x:x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"keyword\">double</span> <span class=\"title\">readdb</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RG <span class=\"keyword\">double</span> x=<span class=\"number\">0</span>,p=<span class=\"number\">0.1</span>;RG <span class=\"keyword\">char</span> f=<span class=\"number\">0</span>,c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())f|=(c==<span class=\"string\">'-'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=x*<span class=\"number\">10</span>+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c==<span class=\"string\">'.'</span>)<span class=\"keyword\">for</span>(c=gc();<span class=\"built_in\">isdigit</span>(c);c=gc(),p/=<span class=\"number\">10</span>)x=x+(c^<span class=\"number\">48</span>)*p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f?-x:x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)x=-x,pc(<span class=\"string\">'-'</span>);<span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">10</span>)<span class=\"built_in\">write</span>(x/<span class=\"number\">10</span>);pc(x%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x,<span class=\"keyword\">char</span> c,ll y)</span></span>&#123;<span class=\"built_in\">write</span>(x);pc(c);writeln(y);&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x,<span class=\"keyword\">char</span> c,ll y,<span class=\"keyword\">char</span> d,ll z)</span></span>&#123;<span class=\"built_in\">write</span>(x);pc(c);<span class=\"built_in\">write</span>(y);pc(d);writeln(z);&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) printf(#x<span class=\"meta-string\">\" = %d\\n\"</span>,x);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rd() read()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rdb() readdb()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mp make_pair</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sqr(x) ((x)*(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fin(x) freopen(#x<span class=\"meta-string\">\".in\"</span>,<span class=\"meta-string\">\"r\"</span>,stdin)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fout(x) freopen(#x<span class=\"meta-string\">\".out\"</span>,<span class=\"meta-string\">\"w\"</span>,stdout)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y1 ____y1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> hash __hash</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> union _union</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ramdom ((double)rand() / RAND_MAX)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps = <span class=\"number\">1e-8</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dcmp</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span></span>&#123;<span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(x) &lt; eps) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"keyword\">return</span> x&lt;<span class=\"number\">0</span>?<span class=\"number\">-1</span>:<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> x,y;</span><br><span class=\"line\">    Point(<span class=\"keyword\">double</span> x=<span class=\"number\">0</span>,<span class=\"keyword\">double</span> y=<span class=\"number\">0</span>):x(x),y(y)&#123;&#125;;</span><br><span class=\"line\">    Point <span class=\"keyword\">operator</span> + (<span class=\"keyword\">const</span> Point &amp;a)<span class=\"keyword\">const</span>&#123;<span class=\"keyword\">return</span> Point(x+a.x,y+a.y);&#125;</span><br><span class=\"line\">    Point <span class=\"keyword\">operator</span> - (<span class=\"keyword\">const</span> Point &amp;a)<span class=\"keyword\">const</span>&#123;<span class=\"keyword\">return</span> Point(x-a.x,y-a.y);&#125;</span><br><span class=\"line\">    Point <span class=\"keyword\">operator</span> * (<span class=\"keyword\">double</span> a)&#123;<span class=\"keyword\">return</span> Point(x*a,y*a);&#125;</span><br><span class=\"line\">    Point <span class=\"keyword\">operator</span> / (<span class=\"keyword\">double</span> a)&#123;<span class=\"keyword\">return</span> Point(x/a,y/a);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">out</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"&#123;%.3lf,%.3lf&#125;\"</span>,x,y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Point Vector;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">cross</span><span class=\"params\">(Point a,Point b)</span></span>&#123;<span class=\"keyword\">return</span> a.x*b.y-b.x*a.y;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">dot</span><span class=\"params\">(Point a,Point b)</span></span>&#123;<span class=\"keyword\">return</span> a.x*b.x+a.y*b.y;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">dist</span><span class=\"params\">(Point a,Point b)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(sqr(a.x-b.x)+sqr(a.y-b.y));&#125;</span><br><span class=\"line\"><span class=\"function\">Point <span class=\"title\">rotate</span><span class=\"params\">(Vector a,<span class=\"keyword\">double</span> rad)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Point(a.x*<span class=\"built_in\">cos</span>(rad)-a.y*<span class=\"built_in\">sin</span>(rad),a.x*<span class=\"built_in\">sin</span>(rad)+a.y*<span class=\"built_in\">cos</span>(rad));</span><br><span class=\"line\">&#125;<span class=\"comment\">// 向量绕原点旋转 rad 度 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Line</span>&#123;</span></span><br><span class=\"line\">    Point x,y; </span><br><span class=\"line\">    Line(Point x,Point y):x(x),y(y)&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">out</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        pc(<span class=\"string\">'['</span>);x.out();y.out();pc(<span class=\"string\">']'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Line Segment;</span><br><span class=\"line\"><span class=\"function\">Point <span class=\"title\">Line_jiao</span><span class=\"params\">(Line a,Line b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> r1 = cross(a.x-b.x,b.y-b.x),r2 = cross(b.y-b.x,a.y-b.x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x+(a.y-a.x)*r1/(r1+r2);</span><br><span class=\"line\">&#125;<span class=\"comment\">// 给出两条直线，求它们的交点 </span></span><br><span class=\"line\"><span class=\"function\">Point <span class=\"title\">center</span><span class=\"params\">(Point A,Point B,Point C)</span></span>&#123;</span><br><span class=\"line\">    Point p = (A+B) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    Point q = (A+C) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dcmp(cross(p-C,A-C))==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dcmp(dist(A,B)+dist(B,C)-dist(A,C))==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> (A+C)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dcmp(dist(A,B)+dist(A,B)-dist(B,C))==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> (B+C)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dcmp(dist(A,C)+dist(B,C)-dist(A,B))==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> (A+B)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Point _p=p+Point(-(p-A).y,(p-A).x);</span><br><span class=\"line\">    Point _q=q+Point(-(q-A).y,(q-A).x);</span><br><span class=\"line\">    Point answ = Line_jiao(Line(p,_p),Line(q,_q));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> answ;</span><br><span class=\"line\">&#125;<span class=\"comment\">// 给定三个点，求一个点满足这个点到三个点的距离的最大值最小 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span>+<span class=\"number\">233</span>;</span><br><span class=\"line\">Point p[maxn];<span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">min_circle_cover</span><span class=\"params\">(Point p[],<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    srand((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)<span class=\"string\">\"Wzp Ak All OI contests\"</span>);</span><br><span class=\"line\">    random_shuffle(p,p+n);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Point c = p[<span class=\"number\">0</span>];</span><br><span class=\"line\">    rep(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dcmp(dist(p[i],c) - r) &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            c = p[i];r = <span class=\"number\">0</span>;<span class=\"comment\">// 够不到（逃 </span></span><br><span class=\"line\">            rep(j,<span class=\"number\">0</span>,i)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dcmp(dist(p[j],c)-r)&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    c = (p[i]+p[j])/<span class=\"number\">2</span>;r = dist(p[i],c);</span><br><span class=\"line\">                    rep(k,<span class=\"number\">0</span>,j)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(dcmp(dist(p[k],c)-r)&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                            c = center(p[i],p[j],p[k]);</span><br><span class=\"line\">                            r = dist(p[i],c);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;<span class=\"comment\">// 给定 n 个点，求它们的最小圆覆盖的半径 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = rd();</span><br><span class=\"line\">    rep(i,<span class=\"number\">0</span>,n)</span><br><span class=\"line\">        p[i].x=rdb(),p[i].y=rdb();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.3lf\\n\"</span>,min_circle_cover());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><s> 突然想开个坑来填模板</s></p>","site":{"data":{}},"excerpt":"<p><a href=\"https://www.lydsy.com/JudgeOnline/problem.php?id=1337\" target=\"_blank\" rel=\"noopener\">原题戳这里</a></p><h4 id=\"题意\"><a class=\"markdownIt-Anchor\" href=\"#题意\"></a> 题意</h4><blockquote><p>给你n个点，求最小的半径的圆覆盖这n个点</p></blockquote><h4 id=\"吐槽\"><a class=\"markdownIt-Anchor\" href=\"#吐槽\"></a> 吐槽</h4><p>​\t这题只有1个数据点，而且n=10，<s>所以直接puts就行了</s></p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"48.770\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>下面是数据</p><blockquote><p>10</p><p>24.4 57.4</p><p>71.7 99</p><p>85.4 78.6</p><p>70.6 39.2</p><p>35.3 8.9</p><p>14.8 77.6</p><p>2.3 50</p><p>14.1 84.9</p><p>99.3 49.6</p><p>47.8 43</p></blockquote>","more":"<p>好吧，这题貌似叫做随机增量法？？</p><p>大概就是暴力枚举一个点，不行用两个点，还不行三个点，然后这样期望复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>的</p><p>其实我就是来贴个计算几何模板的。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf = <span class=\"number\">0x3f3f3f3f</span>,oo = inf;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pi 3.14159265358979323846</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IL inline</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RG register</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(RG int i=(a);i&lt;(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Rep(i,a,b) for(RG int i=(a);i&lt;=(b);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Dep(i,a,b) for(RG int i=(a);i&gt;=(b);--i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc putchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc getchar</span></span><br><span class=\"line\"><span class=\"function\">IL ll <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RG ll x=<span class=\"number\">0</span>;<span class=\"keyword\">char</span> f=<span class=\"number\">0</span>;RG <span class=\"keyword\">char</span> c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())f|=(c==<span class=\"string\">'-'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=(x&lt;&lt;<span class=\"number\">1</span>)+(x&lt;&lt;<span class=\"number\">3</span>)+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f?-x:x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"keyword\">double</span> <span class=\"title\">readdb</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RG <span class=\"keyword\">double</span> x=<span class=\"number\">0</span>,p=<span class=\"number\">0.1</span>;RG <span class=\"keyword\">char</span> f=<span class=\"number\">0</span>,c=gc();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=gc())f|=(c==<span class=\"string\">'-'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=gc())x=x*<span class=\"number\">10</span>+(c^<span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c==<span class=\"string\">'.'</span>)<span class=\"keyword\">for</span>(c=gc();<span class=\"built_in\">isdigit</span>(c);c=gc(),p/=<span class=\"number\">10</span>)x=x+(c^<span class=\"number\">48</span>)*p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f?-x:x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)x=-x,pc(<span class=\"string\">'-'</span>);<span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">10</span>)<span class=\"built_in\">write</span>(x/<span class=\"number\">10</span>);pc(x%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"built_in\">write</span>(x);<span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x,<span class=\"keyword\">char</span> c,ll y)</span></span>&#123;<span class=\"built_in\">write</span>(x);pc(c);writeln(y);&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(ll x,<span class=\"keyword\">char</span> c,ll y,<span class=\"keyword\">char</span> d,ll z)</span></span>&#123;<span class=\"built_in\">write</span>(x);pc(c);<span class=\"built_in\">write</span>(y);pc(d);writeln(z);&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) printf(#x<span class=\"meta-string\">\" = %d\\n\"</span>,x);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rd() read()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rdb() readdb()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(x,v) memset(x,v,sizeof(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mp make_pair</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sqr(x) ((x)*(x))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fin(x) freopen(#x<span class=\"meta-string\">\".in\"</span>,<span class=\"meta-string\">\"r\"</span>,stdin)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fout(x) freopen(#x<span class=\"meta-string\">\".out\"</span>,<span class=\"meta-string\">\"w\"</span>,stdout)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y1 ____y1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> hash __hash</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> union _union</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ramdom ((double)rand() / RAND_MAX)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps = <span class=\"number\">1e-8</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dcmp</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span></span>&#123;<span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(x) &lt; eps) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"keyword\">return</span> x&lt;<span class=\"number\">0</span>?<span class=\"number\">-1</span>:<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> x,y;</span><br><span class=\"line\">    Point(<span class=\"keyword\">double</span> x=<span class=\"number\">0</span>,<span class=\"keyword\">double</span> y=<span class=\"number\">0</span>):x(x),y(y)&#123;&#125;;</span><br><span class=\"line\">    Point <span class=\"keyword\">operator</span> + (<span class=\"keyword\">const</span> Point &amp;a)<span class=\"keyword\">const</span>&#123;<span class=\"keyword\">return</span> Point(x+a.x,y+a.y);&#125;</span><br><span class=\"line\">    Point <span class=\"keyword\">operator</span> - (<span class=\"keyword\">const</span> Point &amp;a)<span class=\"keyword\">const</span>&#123;<span class=\"keyword\">return</span> Point(x-a.x,y-a.y);&#125;</span><br><span class=\"line\">    Point <span class=\"keyword\">operator</span> * (<span class=\"keyword\">double</span> a)&#123;<span class=\"keyword\">return</span> Point(x*a,y*a);&#125;</span><br><span class=\"line\">    Point <span class=\"keyword\">operator</span> / (<span class=\"keyword\">double</span> a)&#123;<span class=\"keyword\">return</span> Point(x/a,y/a);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">out</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"&#123;%.3lf,%.3lf&#125;\"</span>,x,y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Point Vector;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">cross</span><span class=\"params\">(Point a,Point b)</span></span>&#123;<span class=\"keyword\">return</span> a.x*b.y-b.x*a.y;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">dot</span><span class=\"params\">(Point a,Point b)</span></span>&#123;<span class=\"keyword\">return</span> a.x*b.x+a.y*b.y;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">dist</span><span class=\"params\">(Point a,Point b)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(sqr(a.x-b.x)+sqr(a.y-b.y));&#125;</span><br><span class=\"line\"><span class=\"function\">Point <span class=\"title\">rotate</span><span class=\"params\">(Vector a,<span class=\"keyword\">double</span> rad)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Point(a.x*<span class=\"built_in\">cos</span>(rad)-a.y*<span class=\"built_in\">sin</span>(rad),a.x*<span class=\"built_in\">sin</span>(rad)+a.y*<span class=\"built_in\">cos</span>(rad));</span><br><span class=\"line\">&#125;<span class=\"comment\">//向量绕原点旋转rad度 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Line</span>&#123;</span></span><br><span class=\"line\">    Point x,y; </span><br><span class=\"line\">    Line(Point x,Point y):x(x),y(y)&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">out</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        pc(<span class=\"string\">'['</span>);x.out();y.out();pc(<span class=\"string\">']'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Line Segment;</span><br><span class=\"line\"><span class=\"function\">Point <span class=\"title\">Line_jiao</span><span class=\"params\">(Line a,Line b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> r1 = cross(a.x-b.x,b.y-b.x),r2 = cross(b.y-b.x,a.y-b.x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x+(a.y-a.x)*r1/(r1+r2);</span><br><span class=\"line\">&#125;<span class=\"comment\">//给出两条直线，求它们的交点 </span></span><br><span class=\"line\"><span class=\"function\">Point <span class=\"title\">center</span><span class=\"params\">(Point A,Point B,Point C)</span></span>&#123;</span><br><span class=\"line\">    Point p = (A+B) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    Point q = (A+C) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dcmp(cross(p-C,A-C))==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dcmp(dist(A,B)+dist(B,C)-dist(A,C))==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> (A+C)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dcmp(dist(A,B)+dist(A,B)-dist(B,C))==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> (B+C)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dcmp(dist(A,C)+dist(B,C)-dist(A,B))==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> (A+B)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Point _p=p+Point(-(p-A).y,(p-A).x);</span><br><span class=\"line\">    Point _q=q+Point(-(q-A).y,(q-A).x);</span><br><span class=\"line\">    Point answ = Line_jiao(Line(p,_p),Line(q,_q));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> answ;</span><br><span class=\"line\">&#125;<span class=\"comment\">//给定三个点，求一个点满足这个点到三个点的距离的最大值最小 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span>+<span class=\"number\">233</span>;</span><br><span class=\"line\">Point p[maxn];<span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">min_circle_cover</span><span class=\"params\">(Point p[],<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    srand((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)<span class=\"string\">\"Wzp Ak All OI contests\"</span>);</span><br><span class=\"line\">    random_shuffle(p,p+n);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Point c = p[<span class=\"number\">0</span>];</span><br><span class=\"line\">    rep(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dcmp(dist(p[i],c) - r) &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            c = p[i];r = <span class=\"number\">0</span>;<span class=\"comment\">//够不到（逃 </span></span><br><span class=\"line\">            rep(j,<span class=\"number\">0</span>,i)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dcmp(dist(p[j],c)-r)&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    c = (p[i]+p[j])/<span class=\"number\">2</span>;r = dist(p[i],c);</span><br><span class=\"line\">                    rep(k,<span class=\"number\">0</span>,j)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(dcmp(dist(p[k],c)-r)&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                            c = center(p[i],p[j],p[k]);</span><br><span class=\"line\">                            r = dist(p[i],c);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;<span class=\"comment\">//给定n个点，求它们的最小圆覆盖的半径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = rd();</span><br><span class=\"line\">    rep(i,<span class=\"number\">0</span>,n)</span><br><span class=\"line\">        p[i].x=rdb(),p[i].y=rdb();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.3lf\\n\"</span>,min_circle_cover());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><s>突然想开个坑来填模板</s></p>"},{"title":"BZOj1049 [HAOI2006] 数字序列","_content":"\n#### 题面\n\n​\t现在我们有一个长度为n的整数序列A。但是它太不好看了，于是我们希望把它变成一个单调严格上升的序列。但是不希望改变过多的数，也不希望改变的幅度太大。\n\n<!--more-->\n\n#### 题解\n\n第一问：\n\n​\t设$b[i] = a[i] - i$那么变成了修改最少的b，使得b非单调递减，也就是对于每一个$b[i+1] >= b[i]$\n\n​\t再转化一下，就是使得不修改的b最多，那么哪些不修改呢？显然是b的LIS呀。\n\n​\t然后转化成经典算法。\n\n第二问：\n\n​\t………………………………………………不会\n\n​\t于是:szOhttp://hzwer.com/5325.html\n\n​\t\tszOhttp://pan.baidu.com/share/link?uk=2651016602&shareid=1490516411\n\n​\t大概就是设$f[i]$表示1到i的答案，$f[i]$向$f[j]$转移，然后一个结论是一定有一个分割点，使得左边一半是属于$b[i]$，右边一半属于$b[j]$\n\n​\t然后这样理论上是$O(n^3)$但是数据随机可以过。\n\n​\t然后优化是考虑先全部变成$b[j]$，然后类似的求一个前缀min，预处理出来。\n\n​\thttps://www.cnblogs.com/czllgzmzl/p/5186419.html","source":"_posts/BZOj1049 [HAOI2006]数字序列.md","raw":"---\ntitle: BZOj1049 [HAOI2006]数字序列\ntags:\n - BZOJ\n - DP\n---\n\n#### 题面\n\n​\t现在我们有一个长度为n的整数序列A。但是它太不好看了，于是我们希望把它变成一个单调严格上升的序列。但是不希望改变过多的数，也不希望改变的幅度太大。\n\n<!--more-->\n\n#### 题解\n\n第一问：\n\n​\t设$b[i] = a[i] - i$那么变成了修改最少的b，使得b非单调递减，也就是对于每一个$b[i+1] >= b[i]$\n\n​\t再转化一下，就是使得不修改的b最多，那么哪些不修改呢？显然是b的LIS呀。\n\n​\t然后转化成经典算法。\n\n第二问：\n\n​\t………………………………………………不会\n\n​\t于是:szOhttp://hzwer.com/5325.html\n\n​\t\tszOhttp://pan.baidu.com/share/link?uk=2651016602&shareid=1490516411\n\n​\t大概就是设$f[i]$表示1到i的答案，$f[i]$向$f[j]$转移，然后一个结论是一定有一个分割点，使得左边一半是属于$b[i]$，右边一半属于$b[j]$\n\n​\t然后这样理论上是$O(n^3)$但是数据随机可以过。\n\n​\t然后优化是考虑先全部变成$b[j]$，然后类似的求一个前缀min，预处理出来。\n\n​\thttps://www.cnblogs.com/czllgzmzl/p/5186419.html","slug":"BZOj1049 [HAOI2006]数字序列","published":1,"date":"2021-08-28T13:04:29.782Z","updated":"2021-08-28T13:04:29.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvspz5y000e09nu8ecgclc8","content":"<h4 id=\"题面\"><a class=\"markdownIt-Anchor\" href=\"# 题面\"></a> 题面 </h4><p>​\t现在我们有一个长度为 n 的整数序列 A。但是它太不好看了，于是我们希望把它变成一个单调严格上升的序列。但是不希望改变过多的数，也不希望改变的幅度太大。</p><a id=\"more\"></a><h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"# 题解\"></a> 题解</h4><p> 第一问：</p><p>​\t设 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">b[i] = a[i] - i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">b</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span> 那么变成了修改最少的 b，使得 b 非单调递减，也就是对于每一个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mo>=</mo><mi>b</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">b[i+1] &gt;= b[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">b</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">b</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span></p><p>​\t再转化一下，就是使得不修改的 b 最多，那么哪些不修改呢？显然是 b 的 LIS 呀。</p><p>​\t然后转化成经典算法。</p><p> 第二问：</p><p>​\t………………………………………………不会 </p><p>​\t于是:szOhttp://hzwer.com/5325.html</p><p>​ szOhttp://pan.baidu.com/share/link?uk=2651016602&amp;shareid=1490516411</p><p>​\t大概就是设<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span> 表示 1 到 i 的答案，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>向 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span></span></span></span> 转移，然后一个结论是一定有一个分割点，使得左边一半是属于 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">b[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">b</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>，右边一半属于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">b[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">b</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span></span></span></span></p><p>​\t然后这样理论上是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 但是数据随机可以过。</p><p>​\t然后优化是考虑先全部变成<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">b[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">b</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span></span></span></span>，然后类似的求一个前缀 min，预处理出来。</p><p>​\t<a href=\"https://www.cnblogs.com/czllgzmzl/p/5186419.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/czllgzmzl/p/5186419.html</a></p>","site":{"data":{}},"excerpt":"<h4 id=\"题面\"><a class=\"markdownIt-Anchor\" href=\"#题面\"></a> 题面</h4><p>​\t现在我们有一个长度为n的整数序列A。但是它太不好看了，于是我们希望把它变成一个单调严格上升的序列。但是不希望改变过多的数，也不希望改变的幅度太大。</p>","more":"<h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\"></a> 题解</h4><p>第一问：</p><p>​\t设<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">b[i] = a[i] - i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">b</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">a</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:.65952em;vertical-align:0\"></span><span class=\"mord mathdefault\">i</span></span></span></span>那么变成了修改最少的b，使得b非单调递减，也就是对于每一个<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mo>=</mo><mi>b</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">b[i+1] &gt;= b[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">b</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:.2222222222222222em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:.36687em;vertical-align:0\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:.2777777777777778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">b</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span></p><p>​\t再转化一下，就是使得不修改的b最多，那么哪些不修改呢？显然是b的LIS呀。</p><p>​\t然后转化成经典算法。</p><p>第二问：</p><p>​\t………………………………………………不会</p><p>​\t于是:szOhttp://hzwer.com/5325.html</p><p>​ szOhttp://pan.baidu.com/share/link?uk=2651016602&amp;shareid=1490516411</p><p>​\t大概就是设<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>表示1到i的答案，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>向<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.10764em\">f</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span></span></span></span>转移，然后一个结论是一定有一个分割点，使得左边一半是属于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">b[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">b</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span></span></span></span>，右边一半属于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">b[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">b</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span></span></span></span></p><p>​\t然后这样理论上是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\" style=\"margin-right:.02778em\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:.8141079999999999em\"><span style=\"top:-3.063em;margin-right:.05em\"><span class=\"pstrut\" style=\"height:2.7em\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>但是数据随机可以过。</p><p>​\t然后优化是考虑先全部变成<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">b[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-.25em\"></span><span class=\"mord mathdefault\">b</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:.05724em\">j</span><span class=\"mclose\">]</span></span></span></span>，然后类似的求一个前缀min，预处理出来。</p><p>​\t<a href=\"https://www.cnblogs.com/czllgzmzl/p/5186419.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/czllgzmzl/p/5186419.html</a></p>"}],"PostAsset":[{"_id":"source/_posts/AGC024 A-E题解/举例1.png","slug":"举例1.png","post":"cksvso3260006vfnufknphfy7","modified":0,"renderable":0},{"_id":"source/_posts/BZOJ1043 [HAOI2008]下落的圆盘/W.png","slug":"W.png","post":"cksvso32m000fvfnu4137c7ae","modified":0,"renderable":0},{"_id":"source/_posts/学习笔记/Suffix-automaton-notes/WF.png","slug":"WF.png","post":"cksvso350001tvfnuc59g5yhe","modified":0,"renderable":0},{"_id":"source/_posts/学习笔记/Suffix-automaton-notes/构造1.jpg","slug":"构造1.jpg","post":"cksvso350001tvfnuc59g5yhe","modified":0,"renderable":0},{"_id":"source/_posts/学习笔记/Suffix-automaton-notes/构造2.jpg","slug":"构造2.jpg","post":"cksvso350001tvfnuc59g5yhe","modified":0,"renderable":0},{"_id":"source/_posts/学习笔记/Suffix-automaton-notes/构造3.jpg","slug":"构造3.jpg","post":"cksvso350001tvfnuc59g5yhe","modified":0,"renderable":0},{"_id":"source/_posts/学习笔记/Suffix-automaton-notes/构造4.jpg","slug":"构造4.jpg","post":"cksvso350001tvfnuc59g5yhe","modified":0,"renderable":0},{"_id":"source/_posts/学习笔记/Suffix-automaton-notes/构造5.jpg","slug":"构造5.jpg","post":"cksvso350001tvfnuc59g5yhe","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cksvso31r0001vfnu2kbhf9tz","tag_id":"cksvso3230005vfnu7u6uftxe","_id":"cksvso32u000lvfnu0h3299e3"},{"post_id":"cksvso31r0001vfnu2kbhf9tz","tag_id":"cksvso32e000bvfnu5umg5dkn","_id":"cksvso32u000mvfnu3cfo49ol"},{"post_id":"cksvso31r0001vfnu2kbhf9tz","tag_id":"cksvso32p000hvfnuesho84bg","_id":"cksvso32v000ovfnugwhvcatv"},{"post_id":"cksvso32s000jvfnugw9e36ic","tag_id":"cksvso32e000bvfnu5umg5dkn","_id":"cksvso32v000pvfnueyp853k7"},{"post_id":"cksvso31y0003vfnu66ql2evs","tag_id":"cksvso32t000kvfnu1tochbyr","_id":"cksvso32y000svfnubl9p0t8k"},{"post_id":"cksvso31y0003vfnu66ql2evs","tag_id":"cksvso32u000nvfnu9d820c2i","_id":"cksvso32y000tvfnuh5ll8asw"},{"post_id":"cksvso31y0003vfnu66ql2evs","tag_id":"cksvso32p000hvfnuesho84bg","_id":"cksvso32z000vvfnuawengw39"},{"post_id":"cksvso3260006vfnufknphfy7","tag_id":"cksvso32x000rvfnu68wodmzd","_id":"cksvso331000yvfnub72becwq"},{"post_id":"cksvso3260006vfnufknphfy7","tag_id":"cksvso32y000uvfnufz2q38tb","_id":"cksvso331000zvfnucp0ug1cs"},{"post_id":"cksvso3260006vfnufknphfy7","tag_id":"cksvso32z000wvfnu5df1hux0","_id":"cksvso3320011vfnu9gsx0mpm"},{"post_id":"cksvso3290008vfnu4wks1zx2","tag_id":"cksvso32t000kvfnu1tochbyr","_id":"cksvso3340015vfnu1tm69902"},{"post_id":"cksvso3290008vfnu4wks1zx2","tag_id":"cksvso32p000hvfnuesho84bg","_id":"cksvso3340016vfnug9ggcppw"},{"post_id":"cksvso3290008vfnu4wks1zx2","tag_id":"cksvso32y000uvfnufz2q38tb","_id":"cksvso3350018vfnubao80rtj"},{"post_id":"cksvso3290008vfnu4wks1zx2","tag_id":"cksvso3330013vfnucymb864v","_id":"cksvso3350019vfnuculs0rbv"},{"post_id":"cksvso32d000avfnubq2n9dn5","tag_id":"cksvso3340014vfnu4fzwgthp","_id":"cksvso336001bvfnudp3pfvwz"},{"post_id":"cksvso32d000avfnubq2n9dn5","tag_id":"cksvso32p000hvfnuesho84bg","_id":"cksvso336001cvfnudhk9dvod"},{"post_id":"cksvso32h000dvfnu9jtk42ks","tag_id":"cksvso32p000hvfnuesho84bg","_id":"cksvso337001gvfnudy8zbffc"},{"post_id":"cksvso32h000dvfnu9jtk42ks","tag_id":"cksvso32t000kvfnu1tochbyr","_id":"cksvso338001hvfnu4uwncsss"},{"post_id":"cksvso32h000dvfnu9jtk42ks","tag_id":"cksvso337001evfnuhsf8a7xm","_id":"cksvso338001jvfnu09yb9pdp"},{"post_id":"cksvso32m000fvfnu4137c7ae","tag_id":"cksvso32p000hvfnuesho84bg","_id":"cksvso338001kvfnu0gv1aynu"},{"post_id":"cksvso32q000ivfnu0y5b1367","tag_id":"cksvso32p000hvfnuesho84bg","_id":"cksvso33c001mvfnuaie366kq"},{"post_id":"cksvso32q000ivfnu0y5b1367","tag_id":"cksvso32t000kvfnu1tochbyr","_id":"cksvso33c001nvfnu7dn1457y"},{"post_id":"cksvso32q000ivfnu0y5b1367","tag_id":"cksvso339001lvfnuh3p21xci","_id":"cksvso33c001ovfnug24g554q"},{"post_id":"cksvso34x001pvfnuc31t30vu","tag_id":"cksvso34z001rvfnuh4el5rat","_id":"cksvso352001wvfnu1qsuawgo"},{"post_id":"cksvso34x001pvfnuc31t30vu","tag_id":"cksvso32e000bvfnu5umg5dkn","_id":"cksvso354001yvfnu0kqc0r01"},{"post_id":"cksvso34y001qvfnuhgrj1cjp","tag_id":"cksvso352001vvfnuhf1m6rbi","_id":"cksvso3570025vfnugqo11exc"},{"post_id":"cksvso34y001qvfnuhgrj1cjp","tag_id":"cksvso3540020vfnuhr4wcg4s","_id":"cksvso3580027vfnucqzt1mhu"},{"post_id":"cksvso34z001svfnugmx04pyy","tag_id":"cksvso3560023vfnu5oiqfwrp","_id":"cksvso359002avfnu8vgeejic"},{"post_id":"cksvso34z001svfnugmx04pyy","tag_id":"cksvso352001vvfnuhf1m6rbi","_id":"cksvso359002bvfnugv5hdxu2"},{"post_id":"cksvso350001tvfnuc59g5yhe","tag_id":"cksvso3590029vfnubndw22fo","_id":"cksvso35a002fvfnu762e2gp0"},{"post_id":"cksvso350001tvfnuc59g5yhe","tag_id":"cksvso359002cvfnua9j20dnm","_id":"cksvso35a002gvfnuezp72zfb"},{"post_id":"cksvso350001tvfnuc59g5yhe","tag_id":"cksvso35a002dvfnu56gc6hjr","_id":"cksvso35b002ivfnubx5q53se"},{"post_id":"cksvso353001xvfnufhuy9h4o","tag_id":"cksvso35a002evfnub8ds263t","_id":"cksvso35b002lvfnu53eje9fj"},{"post_id":"cksvso353001xvfnufhuy9h4o","tag_id":"cksvso35a002dvfnu56gc6hjr","_id":"cksvso35c002mvfnu3zhh90rt"},{"post_id":"cksvso353001xvfnufhuy9h4o","tag_id":"cksvso35b002jvfnu8rq51k70","_id":"cksvso35c002ovfnu1i8pg79u"},{"post_id":"cksvso353001xvfnufhuy9h4o","tag_id":"cksvso3230005vfnu7u6uftxe","_id":"cksvso35c002pvfnu2u9k9ob0"},{"post_id":"cksvso354001zvfnu0m3lh2d4","tag_id":"cksvso35a002evfnub8ds263t","_id":"cksvso35d002rvfnucjnp4zbg"},{"post_id":"cksvso3550021vfnufe996cg7","tag_id":"cksvso35a002evfnub8ds263t","_id":"cksvso35d002svfnuchpacm0y"},{"post_id":"cksvso3560022vfnu0dqn6ug2","tag_id":"cksvso35a002evfnub8ds263t","_id":"cksvso35d002uvfnu0lnb7exv"},{"post_id":"cksvso3570024vfnu1e01eg9p","tag_id":"cksvso35d002tvfnu6gageg9g","_id":"cksvso35e002wvfnu6qqf0m01"},{"post_id":"cksvso3570026vfnuekv3828i","tag_id":"cksvso35a002evfnub8ds263t","_id":"cksvso35e002xvfnu99ucfcnz"},{"post_id":"cksvspz52000009nu9scm6q12","tag_id":"cksvso32p000hvfnuesho84bg","_id":"cksvspz5c000209nueyx08rhp"},{"post_id":"cksvspz59000109nucd9uagbg","tag_id":"cksvso32p000hvfnuesho84bg","_id":"cksvspz5e000409nu5hhg212z"},{"post_id":"cksvspz59000109nucd9uagbg","tag_id":"cksvso32t000kvfnu1tochbyr","_id":"cksvspz5g000609nu3gt7d4vj"},{"post_id":"cksvspz59000109nucd9uagbg","tag_id":"cksvso32z000wvfnu5df1hux0","_id":"cksvspz5u000909nuhxbjaruk"},{"post_id":"cksvspz5c000309nubdf5duu5","tag_id":"cksvso32p000hvfnuesho84bg","_id":"cksvspz5v000b09nucfc04mv3"},{"post_id":"cksvspz5c000309nubdf5duu5","tag_id":"cksvso32t000kvfnu1tochbyr","_id":"cksvspz5x000d09nu78nu9j1j"},{"post_id":"cksvspz5g000709nubc4x2prk","tag_id":"cksvso32p000hvfnuesho84bg","_id":"cksvspz60000g09nufkrb73qj"},{"post_id":"cksvspz5g000709nubc4x2prk","tag_id":"cksvso32e000bvfnu5umg5dkn","_id":"cksvspz61000h09nu4skteym1"},{"post_id":"cksvspz5u000a09nucl6u22f4","tag_id":"cksvso35b002jvfnu8rq51k70","_id":"cksvspz61000i09nu6yyqgvro"},{"post_id":"cksvspz5u000a09nucl6u22f4","tag_id":"cksvso32z000wvfnu5df1hux0","_id":"cksvspz62000k09nuh3a5bxt1"},{"post_id":"cksvspz5u000a09nucl6u22f4","tag_id":"cksvso32p000hvfnuesho84bg","_id":"cksvspz62000l09nu20ql9rxh"},{"post_id":"cksvspz5u000a09nucl6u22f4","tag_id":"cksvso32y000uvfnufz2q38tb","_id":"cksvspz62000m09nuan7w8vcq"},{"post_id":"cksvspz5e000509nugpug5k2y","tag_id":"cksvso32p000hvfnuesho84bg","_id":"cksvspz62000n09nu310sd9ji"},{"post_id":"cksvspz5e000509nugpug5k2y","tag_id":"cksvspz5i000809nu7kh414ql","_id":"cksvspz63000o09nu1ofg9bca"},{"post_id":"cksvspz5y000e09nu8ecgclc8","tag_id":"cksvso32p000hvfnuesho84bg","_id":"cksvspz63000p09nug9zo0etn"},{"post_id":"cksvspz5y000e09nu8ecgclc8","tag_id":"cksvso32t000kvfnu1tochbyr","_id":"cksvspz63000q09nu57lb0kxp"},{"post_id":"cksvspz5w000c09nuc5v922wc","tag_id":"cksvspz5z000f09nu8oqe61zp","_id":"cksvspz63000r09nubb2872iu"},{"post_id":"cksvspz5w000c09nuc5v922wc","tag_id":"cksvspz61000j09nu557sfvts","_id":"cksvspz63000s09nu0hdea555"}],"Tag":[{"name":"最短路","_id":"cksvso3230005vfnu7u6uftxe"},{"name":"网络流","_id":"cksvso32e000bvfnu5umg5dkn"},{"name":"BZOJ","_id":"cksvso32p000hvfnuesho84bg"},{"name":"DP","_id":"cksvso32t000kvfnu1tochbyr"},{"name":"斜率优化","_id":"cksvso32u000nvfnu9d820c2i"},{"name":"atcoder","_id":"cksvso32x000rvfnu68wodmzd"},{"name":"树","_id":"cksvso32y000uvfnufz2q38tb"},{"name":"贪心","_id":"cksvso32z000wvfnu5df1hux0"},{"name":"图论","_id":"cksvso3330013vfnucymb864v"},{"name":"数学","_id":"cksvso3340014vfnu4fzwgthp"},{"name":"容斥原理","_id":"cksvso337001evfnuhsf8a7xm"},{"name":"二分法","_id":"cksvso339001lvfnuh3p21xci"},{"name":"hihoCoder","_id":"cksvso34z001rvfnuh4el5rat"},{"name":"多项式","_id":"cksvso352001vvfnuhf1m6rbi"},{"name":"递推","_id":"cksvso3540020vfnuhr4wcg4s"},{"name":"生成函数","_id":"cksvso3560023vfnu5oiqfwrp"},{"name":"学习笔记","_id":"cksvso3590029vfnubndw22fo"},{"name":"字符串","_id":"cksvso359002cvfnua9j20dnm"},{"name":"后缀自动机","_id":"cksvso35a002dvfnu56gc6hjr"},{"name":"游记","_id":"cksvso35a002evfnub8ds263t"},{"name":"线段树","_id":"cksvso35b002jvfnu8rq51k70"},{"name":"随笔","_id":"cksvso35d002tvfnu6gageg9g"},{"name":"并查集","_id":"cksvspz5i000809nu7kh414ql"},{"name":"计算几何","_id":"cksvspz5z000f09nu8oqe61zp"},{"name":"期望","_id":"cksvspz61000j09nu557sfvts"}]}}